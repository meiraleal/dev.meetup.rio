const FILE_BUNDLE = {
  "/index.js": {
    "content": "// index.js\n\n// A function that returns a promise that resolves when the page is controlled.\nconst ensureSWController = () => {\n\treturn new Promise((resolve) => {\n\t\t// If the controller is already active, resolve immediately.\n\t\tif (navigator.serviceWorker.controller) {\n\t\t\treturn resolve();\n\t\t}\n\t\t// Otherwise, add an event listener that resolves the promise\n\t\t// as soon as the controller takes over.\n\t\tnavigator.serviceWorker.addEventListener(\"controllerchange\", () => {\n\t\t\treturn resolve();\n\t\t});\n\t});\n};\n\nconst startApp = async () => {\n\tif (!(\"serviceWorker\" in navigator)) {\n\t\tconsole.warn(\"Service Worker not supported.\");\n\t\tthrow new Error(\"Platform not supported\");\n\t}\n\n\tconsole.log(\"Registering Service Worker...\");\n\tawait navigator.serviceWorker.register(\"/sw.js\", { scope: \"/\" });\n\n\tconsole.log(\"Waiting for Service Worker to take control...\");\n\tawait ensureSWController();\n\tconsole.log(\"âœ… Service Worker is in control!\");\n\n\t// Now that we've confirmed the controller is active, import the modules.\n\tawait import(\"/bootstrap.js\");\n\tawait import(\"/app.js\");\n};\n\nstartApp();\n",
    "metaType": "application/javascript"
  },
  "/manifest.json": {
    "content": "{\n\t\"manifest_version\": 3,\n\t\"name\": \"meetuprio\",\n\t\"version\": \"1.0\",\n\t\"description\": \"MV3 Development\",\n\t\"permissions\": [\n\t\t\"activeTab\",\n\t\t\"alarms\",\n\t\t\"background\",\n\t\t\"bookmarks\",\n\t\t\"browsingData\",\n\t\t\"clipboardRead\",\n\t\t\"clipboardWrite\",\n\t\t\"cookies\",\n\t\t\"debugger\",\n\t\t\"declarativeNetRequest\",\n\t\t\"declarativeNetRequestFeedback\",\n\t\t\"downloads\",\n\t\t\"history\",\n\t\t\"identity\",\n\t\t\"idle\",\n\t\t\"management\",\n\t\t\"nativeMessaging\",\n\t\t\"notifications\",\n\t\t\"pageCapture\",\n\t\t\"scripting\",\n\t\t\"storage\",\n\t\t\"tabs\",\n\t\t\"topSites\",\n\t\t\"unlimitedStorage\",\n\t\t\"webAuthenticationProxy\",\n\t\t\"webNavigation\",\n\t\t\"webRequest\"\n\t],\n\t\"action\": {\n\t\t\"default_popup\": \"popup.html\"\n\t},\n\t\"background\": {\n\t\t\"service_worker\": \"modules/backend/sw.js\"\n\t},\n\t\"host_permissions\": [\"<all_urls>\"],\n\t\"optional_host_permissions\": [],\n\t\"web_accessible_resources\": [\n\t\t{\n\t\t\t\"resources\": [\"*\", \"modules/*\", \"assets/*\"],\n\t\t\t\"matches\": [\"<all_urls>\"]\n\t\t}\n\t],\n\t\"icons\": {\n\t\t\"16\": \"assets/icons/icon_16.png\",\n\t\t\"48\": \"assets/icons/icon_48.png\",\n\t\t\"128\": \"assets/icons/icon_128.png\"\n\t},\n\t\"chrome_url_overrides\": {\n\t\t\"newtab\": \"extension.html\"\n\t}\n}\n",
    "metaType": "application/json"
  },
  "/bootstrap.js": {
    "content": "self.sleep = (ms = 0) => new Promise((resolve) => setTimeout(resolve, ms));\nconst coreModulesExternal = [\"test\", \"types\", \"mvc\", \"date\"];\nconst installEventsHandler = (target) => {\n\tconst listeners = new Map();\n\tconst anyListeners = new Set(); // For onAny listeners\n\ttarget.listeners = listeners;\n\n\ttarget.on = (key, callback) => {\n\t\tif (!callback)\n\t\t\treturn console.error(\n\t\t\t\t`Error adding listener to ${key}: no callback passed`,\n\t\t\t);\n\t\tif (!listeners.has(key)) {\n\t\t\tlisteners.set(key, new Set());\n\t\t}\n\t\tlisteners.get(key).add(callback);\n\t};\n\n\ttarget.off = (key, callback) => {\n\t\tconst callbackSet = listeners.get(key);\n\t\tif (!callbackSet) return;\n\t\tcallbackSet.delete(callback);\n\t\tif (callbackSet.size === 0) {\n\t\t\tlisteners.delete(key);\n\t\t}\n\t};\n\n\ttarget.onAny = (callback) => {\n\t\tif (!callback)\n\t\t\treturn console.error(\"Error adding onAny listener: no callback passed\");\n\t\tanyListeners.add(callback.bind(target));\n\t};\n\n\ttarget.offAny = (callback) => {\n\t\tanyListeners.delete(callback);\n\t};\n\n\ttarget.emit = (key, data) => {\n\t\tconst results = [];\n\t\tlisteners.get(key)?.forEach((callback) => {\n\t\t\ttry {\n\t\t\t\tconst bindedFn = callback;\n\t\t\t\tresults.push(bindedFn(data));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error in listener for key \"${key}\":`, error);\n\t\t\t}\n\t\t});\n\t\tanyListeners.forEach((callback) => {\n\t\t\ttry {\n\t\t\t\tconst bindedFn = callback.bind(target);\n\t\t\t\tresults.push(bindedFn({ key, data }));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error in onAny listener for key \"${key}\":`, error);\n\t\t\t}\n\t\t});\n\t\treturn results;\n\t};\n};\nconst eventsBase = {};\ninstallEventsHandler(eventsBase);\n\nconst ArrayStorageFunctions = {\n\tadd: function (...values) {\n\t\tvalues.forEach((value) => !this.includes(value) && this.push(value));\n\t\treturn this;\n\t},\n\tremove: function (key) {\n\t\tconst index = Number.parseInt(key, 10);\n\t\tif (!Number.isNaN(index) && index >= 0 && index < this.length)\n\t\t\tthis.splice(index, 1);\n\t\treturn this;\n\t},\n\tlist: function () {\n\t\treturn [...this];\n\t},\n\tget: function (key) {\n\t\tconst index = Number.parseInt(key, 10);\n\t\treturn !Number.isNaN(index) && index >= 0 && index < this.length\n\t\t\t? this[index]\n\t\t\t: undefined;\n\t},\n};\n\nconst ObjectStorageFunctions = {\n\tset: function (...args) {\n\t\tif (args.length === 1 && typeof args[0] === \"object\" && args[0] !== null)\n\t\t\tObject.entries(args[0]).forEach(([k, v]) => {\n\t\t\t\tthis[k] = v;\n\t\t\t});\n\t\telse if (args.length === 2 && typeof args[0] === \"string\") {\n\t\t\tthis[args[0]] = args[1];\n\t\t}\n\t\treturn this;\n\t},\n\tadd: function (prop, valuesToAdd) {\n\t\tif (typeof valuesToAdd !== \"object\") return;\n\t\tif (!this[prop]) this[prop] = {};\n\t\tObject.entries(valuesToAdd).forEach(([k, v]) => {\n\t\t\tthis[prop][k] = v;\n\t\t});\n\n\t\treturn this;\n\t},\n\tget: function (...args) {\n\t\tconst [key1, key2] = args;\n\t\tif (args.length === 0) return undefined;\n\t\tif (args.length === 2) return this[key1]?.[key2];\n\t\treturn this[key1];\n\t},\n\tremove: function (...args) {\n\t\targs.length === 2 ? delete this[args[0]][args[1]] : delete this[args[0]];\n\t\treturn this;\n\t},\n\tlist: function () {\n\t\treturn Object.entries(this);\n\t},\n\tkeys: function () {\n\t\treturn Object.keys(this);\n\t},\n};\n\nconst installModulePrototype = (base = {}) => {\n\tconst proto = Object.create(Object.getPrototypeOf(base));\n\tconst storageFunctions = Array.isArray(base)\n\t\t? ArrayStorageFunctions\n\t\t: ObjectStorageFunctions;\n\tObject.assign(proto, storageFunctions);\n\tObject.setPrototypeOf(base, proto);\n\treturn base;\n};\n\nconst coreModules = {\n\tmodules: {\n\t\tname: \"modules\",\n\t\tdescription: \"Global modules store\",\n\t},\n\tstorage: {\n\t\tname: \"storage\",\n\t\tdescription: \"Storage Module\",\n\t\tbase: {\n\t\t\tinstall: installModulePrototype,\n\t\t},\n\t},\n\terror: {\n\t\tname: \"error\",\n\t\tbase: console.error,\n\t\tfrontend: true,\n\t\tbackend: true,\n\t},\n\tlog: {\n\t\tname: \"log\",\n\t\tbase: console.log,\n\t\tfrontend: true,\n\t\tbackend: true,\n\t},\n\ticons: { name: \"icons\", alias: \"Icons\", base: self.__icons || {} },\n\ttheme: {\n\t\tname: \"theme\",\n\t},\n\tcomponents: {\n\t\tname: \"components\",\n\t},\n\thooks: {\n\t\tname: \"hooks\",\n\t\tdescription: \"Global Hooks store\",\n\t\tfunctions: ({ $APP }) => ({\n\t\t\tget: function (type) {\n\t\t\t\treturn this[type] || [];\n\t\t\t},\n\t\t\tadd: function (type, fn) {\n\t\t\t\tthis[type] = Array.isArray(this[type]) ? [...this[type], fn] : [fn];\n\t\t\t},\n\t\t\tset: function (hooks) {\n\t\t\t\tObject.entries(hooks).forEach(([key, hook]) => this.add(key, hook));\n\t\t\t},\n\t\t\trun: async function (type, ...args) {\n\t\t\t\ttry {\n\t\t\t\t\tif (Array.isArray(this[type])) {\n\t\t\t\t\t\tfor (const hook of this[type]) {\n\t\t\t\t\t\t\tawait hook(...args);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t$APP.error(`Error running hook '${type}':`, error);\n\t\t\t\t}\n\t\t\t},\n\t\t\tclear: function (type) {\n\t\t\t\tthis[type] = null;\n\t\t\t},\n\t\t}),\n\t},\n\tsettings: {\n\t\tname: \"settings\",\n\t\tdescription: \"Global settings store\",\n\t\tbase: {\n\t\t\tdev: true,\n\t\t\tbackend: false,\n\t\t\tfrontend: true,\n\t\t\tmv3: false,\n\t\t\tmv3Injected: false,\n\t\t\tbasePath: \"\",\n\t\t\t...(self.__settings || {}),\n\t\t},\n\t\thooks: ({ context }) => ({\n\t\t\tmoduleAdded({ module }) {\n\t\t\t\tif (module.settings) context[module.name] = module.settings;\n\t\t\t},\n\t\t}),\n\t},\n\tevents: {\n\t\tname: \"events\",\n\t\tdescription: \"Global events Store\",\n\t\tbase: eventsBase,\n\t\tfunctions: { install: installEventsHandler },\n\t},\n\tdata: {\n\t\tname: \"data\",\n\t\tdescription: \"Data Migration store\",\n\t},\n\troutes: {\n\t\tname: \"routes\",\n\t\tdescription: \"Routes store\",\n\t},\n\tdevFiles: {\n\t\tname: \"devFiles\",\n\t\tbase: [],\n\t},\n\tfs: {\n\t\tdev: true,\n\t\tname: \"fs\",\n\t\tdescription: \"FileSytem Module\",\n\t\tfunctions: ({ $APP, context }) => ({\n\t\t\tasync import(path, { tag, module } = {}) {\n\t\t\t\ttry {\n\t\t\t\t\tconst content = await import(path);\n\t\t\t\t\tcontext[path] = {\n\t\t\t\t\t\ttag,\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tmodule,\n\t\t\t\t\t\textension: tag ? \"component\" : \"js\",\n\t\t\t\t\t};\n\t\t\t\t\treturn content;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(`Failed to import ${path}:`, err);\n\t\t\t\t\treturn { error: true };\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync fetchResource(path, handleResponse, extension) {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(path);\n\t\t\t\t\tcontext[path] = {\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\textension,\n\t\t\t\t\t};\n\t\t\t\t\tif (response.ok) return await handleResponse(response);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.warn(`Resource not found at: ${path}`, error);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\tlist() {\n\t\t\t\tconst list = {};\n\t\t\t\tObject.values(context).forEach((file) => {\n\t\t\t\t\tconst { extension } = file;\n\t\t\t\t\tif (!list[file.extension]) list[extension] = [];\n\t\t\t\t\tlist[extension].push(file);\n\t\t\t\t});\n\t\t\t\treturn list;\n\t\t\t},\n\t\t\tassets() {\n\t\t\t\treturn Object.values(context).filter(\n\t\t\t\t\t({ extension }) => ![\"js\", \"component\"].includes(extension),\n\t\t\t\t);\n\t\t\t},\n\t\t\tcomponents() {\n\t\t\t\treturn Object.values(context).filter(\n\t\t\t\t\t({ tag, extension }) => extension === \"js\" && !!tag,\n\t\t\t\t);\n\t\t\t},\n\t\t\tjson(path) {\n\t\t\t\treturn context.fetchResource(path, (res) => res.json(), \"json\");\n\t\t\t},\n\t\t\tcss: async (file, addToStyle = false) => {\n\t\t\t\tconst cssContent = await context.fetchResource(\n\t\t\t\t\tfile,\n\t\t\t\t\tasync (response) => await response.text(),\n\t\t\t\t\t\"css\",\n\t\t\t\t);\n\t\t\t\tif (!addToStyle) return cssContent;\n\t\t\t\tconst style = document.createElement(\"style\");\n\t\t\t\tstyle.textContent = cssContent;\n\t\t\t\tdocument.head.appendChild(style);\n\t\t\t\treturn cssContent;\n\t\t\t},\n\t\t\tgetFilePath(file) {\n\t\t\t\tif ($APP.settings.mv3Injected) return chrome.runtime.getURL(file);\n\t\t\t\treturn `${$APP.settings.basePath}${file.startsWith(\"/\") ? file : `/${file}`}`;\n\t\t\t},\n\t\t\tgetModulePath(module, fileName) {\n\t\t\t\tcontext.getFilePath(`modules/${module}/${fileName}`);\n\t\t\t},\n\t\t\tgetRequestPath(urlString) {\n\t\t\t\tconst url = new URL(urlString);\n\t\t\t\treturn url.pathname + url.search;\n\t\t\t},\n\t\t}),\n\t},\n};\n\nconst prototypeAPP = {\n\timports: [],\n\tasync bootstrap(\n\t\t{ modules = [], backend = false, settings = {}, theme },\n\t\textraSettings = {},\n\t) {\n\t\tthis.settings.set({\n\t\t\t...settings,\n\t\t\t...extraSettings,\n\t\t\tbackend,\n\t\t\tfrontend: !backend,\n\t\t\tmodules,\n\t\t});\n\t\tif (this.settings.dev) {\n\t\t\tawait this.importModules(coreModulesExternal);\n\t\t\tif (modules.length) await this.importModules(modules);\n\t\t}\n\t\tif (!backend) {\n\t\t\t$APP.fs.css(\"theme.css\", true);\n\t\t\tif (theme) this.theme.set({ theme });\n\t\t}\n\t\t$APP.hooks.run(\"init\");\n\t\treturn this;\n\t},\n\tgetPath({ module, version, file = \"index.js\" }) {\n\t\tconst path = [\n\t\t\t\"/modules\",\n\t\t\tmodule,\n\t\t\tversion && version !== \"latest\" && version,\n\t\t\tfile,\n\t\t]\n\t\t\t.filter(Boolean)\n\t\t\t.join(\"/\");\n\t\treturn path;\n\t},\n\tasync importModule(m) {\n\t\tconst [path, v] = Array.isArray(m) ? m : [m];\n\t\tif (this.imports.includes(path)) return;\n\t\ttry {\n\t\t\tawait this.fs.import(this.getPath({ module: path, version: v }), {\n\t\t\t\tmodule: path,\n\t\t\t});\n\t\t\tconst module = this.modules[path];\n\t\t\tthis.imports.push(path);\n\t\t\tif (!module) return;\n\t\t\tif (module.modules) await this.importModules(module.modules);\n\t\t\tif (module.frontend && this.settings.frontend)\n\t\t\t\tawait this.fs.import(\n\t\t\t\t\tthis.getPath({ module: path, version: v, file: \"frontend.js\" }),\n\t\t\t\t\t{ module: path },\n\t\t\t\t);\n\t\t\tif (module.backend && this.settings.backend)\n\t\t\t\tawait this.fs.import(\n\t\t\t\t\tthis.getPath({ module: path, version: v, file: \"backend.js\" }),\n\t\t\t\t\t{ module: path },\n\t\t\t\t);\n\t\t} catch (error) {\n\t\t\t$APP.error(`Error loading module '${path}':`, error);\n\t\t}\n\t},\n\tasync importModules(modules) {\n\t\tfor (const module of modules) {\n\t\t\tawait this.importModule(module);\n\t\t}\n\t},\n\tinstallModulePrototype,\n\taddHooks({ hooks, base }) {\n\t\tif (!this.hooks) return base;\n\t\tif (hooks)\n\t\t\tObject.entries(\n\t\t\t\ttypeof hooks === \"function\"\n\t\t\t\t\t? hooks({ $APP: this, context: base })\n\t\t\t\t\t: hooks,\n\t\t\t).map(([name, fn]) => this.hooks.add(name, fn));\n\t},\n\tupdateModule(module, isAdd = false) {\n\t\tconst { alias, path, library, functions, name, hooks } = module;\n\t\tconst base = module.base ?? this[name];\n\t\tif (module.base) this.setModuleBase({ base, name, alias });\n\t\tif (library) this.setLibrary({ base, name, alias });\n\t\tif (!this.modules[name])\n\t\t\tthis.setModuleMeta({ name, module: { ...module, base } });\n\t\tif (functions) this.addFunctions({ name, functions });\n\t\tif (hooks) this.addHooks({ hooks, name, base });\n\t\tif (path && !this.modules[path]) this.modules[path] = this.modules[name];\n\t\tif (!isAdd)\n\t\t\tthis.hooks\n\t\t\t\t?.get(\"moduleUpdated\")\n\t\t\t\t.map((fn) => fn.bind(this[module.name])({ module }));\n\t\treturn base;\n\t},\n\tsetLibrary({ base, name, alias }) {\n\t\tthis[name] = base;\n\t\tif (alias) this[alias] = base;\n\t\tif (this.modules?.[name]) this.modules[name].base = base;\n\t},\n\tsetModuleBase({ base, name, alias }) {\n\t\tthis.installModulePrototype(base);\n\t\tthis.setLibrary({ base, name, alias });\n\t},\n\tsetModuleMeta({ name, module }) {\n\t\tif (this.modules) this.modules.set(name, module);\n\t},\n\taddModule(module) {\n\t\tif (\n\t\t\t(module.dev && this.settings.dev !== true) ||\n\t\t\t!!this?.modules?.[module.name]\n\t\t)\n\t\t\treturn;\n\t\tif (!module.base) module.base = {};\n\t\tconst base = this.updateModule(module, true);\n\t\tthis.hooks\n\t\t\t?.get(\"moduleAdded\")\n\t\t\t.map((fn) => fn.bind(this[module.name])({ module }));\n\t\tif (this.log) this.log(`Module '${module.name}' added successfully`);\n\t\treturn base;\n\t},\n\taddFunctions({ name, functions }) {\n\t\tif (!this[name]) throw new Error(`Module '${name}' not found`);\n\t\tconst proto = Object.getPrototypeOf(this[name]);\n\t\tObject.assign(\n\t\t\tproto,\n\t\t\ttypeof functions === \"function\"\n\t\t\t\t? functions({ $APP: this, context: this[name] })\n\t\t\t\t: functions,\n\t\t);\n\t\treturn this[name];\n\t},\n};\n\nconst initApp = (prototype = prototypeAPP) => {\n\tconst app = Object.create(prototype);\n\tfor (const moduleName in coreModules) app.addModule(coreModules[moduleName]);\n\treturn app;\n};\n\nconst $APP = initApp();\nself.initApp = initApp;\nself.$aux = {\n\tinitApp,\n\tArrayStorageFunctions,\n\tObjectStorageFunctions,\n\tprototypeAPP,\n\tcoreModules,\n};\n\nexport default $APP;\n",
    "metaType": "application/javascript"
  },
  "/app.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\n$APP.bootstrap({\n\tname: \"Habits Tracker\",\n\tmodules: [\n\t\t\"apps/habits\",\n\t\t\"icon-lucide\",\n\t\t\"font/manrope\",\n\t\t\"uix\",\n\t\t\"apps/bundler\",\n\t\t\"p2p\",\n\t],\n\ttheme: {\n\t\tfont: {\n\t\t\tfamily: \"'Manrope'\",\n\t\t},\n\t},\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/test/index.js": {
    "content": "export default {}"
  },
  "/modules/test/assert/index.js": {
    "content": "export default {}"
  },
  "/modules/test/mock/index.js": {
    "content": "export default {}"
  },
  "/modules/types/index.js": {
    "content": "const formats = { email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/ };\n\nconst parseJSON = (value) => {\n\ttry {\n\t\treturn value in specialCases ? value : JSON.parse(value);\n\t} catch (error) {\n\t\treturn undefined;\n\t}\n};\n\nconst specialCases = {\n\tundefined: undefined,\n\tnull: null,\n\t\"\": null,\n\t[undefined]: undefined,\n};\n\nconst typeHandlers = {\n\tany: (value) => value,\n\tfunction: (value) => value,\n\textension: () => undefined,\n\tboolean: (value, { attribute = true } = {}) =>\n\t\t(attribute && value === \"\") || [\"true\", 1, \"1\", true].includes(value),\n\tstring: (val) => (val in specialCases ? specialCases[val] : String(val)),\n\tarray: (value, prop = {}) => {\n\t\tif (Array.isArray(value)) return value;\n\t\tconst { itemType } = prop;\n\t\ttry {\n\t\t\tif (!value) throw value;\n\t\t\tconst parsedArray = parseJSON(value);\n\t\t\tif (!Array.isArray(parsedArray)) throw parsedArray;\n\t\t\treturn !itemType\n\t\t\t\t? parsedArray\n\t\t\t\t: parsedArray.map((item) =>\n\t\t\t\t\t\ttypeof item !== \"object\"\n\t\t\t\t\t\t\t? item\n\t\t\t\t\t\t\t: Object.entries(item).reduce((obj, [key, val]) => {\n\t\t\t\t\t\t\t\t\tobj[key] = typeHandlers[itemType[key]?.type]\n\t\t\t\t\t\t\t\t\t\t? typeHandlers[itemType[key].type](val, prop)\n\t\t\t\t\t\t\t\t\t\t: val;\n\t\t\t\t\t\t\t\t\treturn obj;\n\t\t\t\t\t\t\t\t}, {}),\n\t\t\t\t\t);\n\t\t} catch (err) {\n\t\t\treturn [];\n\t\t}\n\t},\n\tnumber: (value) => {\n\t\treturn value ? Number(value) : value;\n\t},\n\tdate: (value) => new Date(value),\n\tobject: (v, prop = {}) => {\n\t\tconst value = typeof v === \"string\" ? parseJSON(v) : v;\n\t\tif (prop.properties) {\n\t\t\tObject.entries(prop.properties).map(([propKey, propProps]) => {\n\t\t\t\tif (propProps.defaultValue !== undefined) {\n\t\t\t\t\tvalue[propKey] = propProps.defaultValue;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn value;\n\t},\n};\n\nconst stringToType = (value, prop = {}) => {\n\tconst { type } = prop;\n\treturn (typeHandlers[type] || ((val) => val))(value, prop);\n};\n\nconst validations = {\n\tnumber: (value, prop = {}) => {\n\t\tif (\"min\" in prop && value < prop.min) {\n\t\t\treturn [\"minimum\", null];\n\t\t}\n\t\tif (\"max\" in prop && value > prop.max) {\n\t\t\treturn [\"maximum\", null];\n\t\t}\n\t\tif (Number.isNaN(Number(value))) {\n\t\t\treturn [\"NaN\", null];\n\t\t}\n\t},\n};\n\nconst validateField = (value, prop) => {\n\tif (\n\t\tprop.required === true &&\n\t\t(value === undefined || value === null || value === \"\")\n\t)\n\t\treturn [\"required\", null];\n\tconst typeHandler = typeHandlers[prop.type];\n\tif (prop.relationship) {\n\t\tif (prop.many) {\n\t\t\treturn [\n\t\t\t\tnull,\n\t\t\t\tArray.isArray(value)\n\t\t\t\t\t? value.map((i) => (prop.mixed ? i : (i?.id ?? i)))\n\t\t\t\t\t: [],\n\t\t\t];\n\t\t}\n\t\treturn [null, value?.id ?? value];\n\t}\n\tconst typedValue = typeHandler\n\t\t? typeHandler(value, prop)\n\t\t: [undefined, null, \"\"].includes(value)\n\t\t\t? (prop.defaultValue ?? null)\n\t\t\t: value;\n\tconst validation = validations[prop.type];\n\tif (validation) {\n\t\tconst errors = validation(value, prop);\n\t\tif (errors) return errors;\n\t}\n\n\tif (\"format\" in prop || formats[prop.key]) {\n\t\tconst formatFn = \"format\" in prop ? prop.format : formats[prop.key];\n\t\tconst format =\n\t\t\ttypeof formatFn === \"function\"\n\t\t\t\t? prop.format\n\t\t\t\t: (value) => formatFn.test(value);\n\t\tconst isValid = format(typedValue);\n\t\tif (!isValid) return [\"invalid\", null];\n\t}\n\n\treturn [null, typedValue];\n};\n\nfunction interpolate(str, data) {\n\treturn str.replace(/\\${(.*?)}/g, (match, key) => {\n\t\treturn data[key.trim()];\n\t});\n}\n\nconst validateType = (\n\tobject,\n\t{ schema, row = {}, undefinedProps = true, validateVirtual = false },\n) => {\n\tif (!schema) return [null, object];\n\tconst errors = {};\n\tlet hasError = false;\n\n\tconst props = undefinedProps ? schema : object;\n\tfor (const key in props) {\n\t\tconst prop = { ...schema[key], key };\n\t\tif (\"virtual\" in prop || prop.persist === false) continue;\n\t\tconst [error, value] =\n\t\t\t[undefined, null, \"\"].includes(object[key]) && !prop.required\n\t\t\t\t? [null, prop.defaultValue]\n\t\t\t\t: validateField(object[key], prop);\n\t\tif (error) {\n\t\t\thasError = true;\n\t\t\terrors[key] = error;\n\t\t} else if (value !== undefined) object[key] = value;\n\t}\n\tconst virtual = Object.fromEntries(\n\t\tObject.entries(schema).filter(([name, prop]) => \"virtual\" in prop),\n\t);\n\tfor (const prop in virtual) {\n\t\tif (validateVirtual) {\n\t\t\t// Example: virtual: \"${directory}/${name}\"\n\t\t\tconst [error, value] = validateField(\n\t\t\t\tinterpolate(virtual[prop].virtual, { ...row, ...object }),\n\t\t\t\tvirtual[prop],\n\t\t\t);\n\t\t\tif (error) {\n\t\t\t\thasError = true;\n\t\t\t\terrors[prop] = error;\n\t\t\t} else if (value !== undefined) object[prop] = value;\n\t\t} else\n\t\t\tobject[prop] = interpolate(virtual[prop].virtual, { ...row, ...object });\n\t}\n\n\tif (hasError) return [errors, null];\n\treturn [null, object];\n};\n\nconst createChainableType = (obj = {}) =>\n\tnew Proxy(obj, {\n\t\tget(target, prop, receiver) {\n\t\t\tif (prop === \"$\") return { ...target };\n\t\t\tif (prop in target) return Reflect.get(target, prop, receiver);\n\t\t\treturn (value) => {\n\t\t\t\ttarget[prop] = value === undefined || value;\n\t\t\t\treturn receiver;\n\t\t\t};\n\t\t},\n\t});\n\nconst createType = (type, options) => {\n\tconst normalizedOptions =\n\t\ttypeof options === \"object\" && !Array.isArray(options) && options !== null\n\t\t\t? options\n\t\t\t: { defaultValue: options };\n\n\treturn createChainableType({\n\t\ttype,\n\t\tpersist: true,\n\t\tattribute: true,\n\t\t...normalizedOptions,\n\t});\n};\n\nconst createRelationType =\n\t(relationship) =>\n\t(...args) => {\n\t\tconst targetModel = args[0];\n\t\tlet targetForeignKey;\n\t\tlet options = args[2];\n\t\tif (typeof args[1] === \"string\") targetForeignKey = args[1];\n\t\telse options = args[1];\n\t\tconst belongs = belongTypes.includes(relationship);\n\t\treturn createChainableType({\n\t\t\ttype: belongs\n\t\t\t\t? relationship === \"belongs_many\"\n\t\t\t\t\t? \"array\"\n\t\t\t\t\t: \"string\"\n\t\t\t\t: relationship === \"one\"\n\t\t\t\t\t? \"object\"\n\t\t\t\t\t: \"array\",\n\t\t\tmany: manyTypes.includes(relationship),\n\t\t\tbelongs,\n\t\t\tpersist: belongs,\n\t\t\trelationship,\n\t\t\tdefaultValue: relationship === \"belongs_many\" ? [] : null,\n\t\t\tpolymorphic: targetModel === \"*\" || Array.isArray(targetModel),\n\t\t\ttargetModel,\n\t\t\ttargetForeignKey,\n\t\t\tindex: belongTypes.includes(relationship),\n\t\t\t...options,\n\t\t});\n\t};\n\nconst typesHelpers = {\n\tcreateType,\n\tstringToType,\n\tvalidateType,\n};\n\nconst relationshipTypes = [\"one\", \"many\", \"belongs\", \"belongs_many\"];\nconst manyTypes = [\"many\", \"belongs_many\"];\nconst belongTypes = [\"belongs\", \"belongs_many\"];\nconst proxyHandler = {\n\tget(target, prop) {\n\t\tif (target[prop]) return target[prop];\n\t\tconst type = prop.toLowerCase();\n\t\tif (relationshipTypes.includes(prop)) return createRelationType(prop);\n\t\tif (type === \"extension\")\n\t\t\treturn (options = {}) =>\n\t\t\t\tcreateType(\"extension\", {\n\t\t\t\t\t...options,\n\t\t\t\t\tpersist: false,\n\t\t\t\t\textension: true,\n\t\t\t\t});\n\t\treturn (options = {}) => {\n\t\t\tif (!typeHandlers[type]) throw new Error(`Unknown type: ${type}`);\n\t\t\treturn createType(type, options);\n\t\t};\n\t},\n};\n\nconst Types = new Proxy(typesHelpers, proxyHandler);\n\nexport default Types;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\n$APP.addModule({\n\tname: \"mvc\",\n\tmodules: [\"mvc/view\", \"mvc/model\", \"mvc/controller\", \"app\"],\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/view/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\n$APP.addModule({\n\tname: \"view\",\n\tpath: \"mvc/view\",\n\talias: \"View\",\n\tfrontend: true,\n\tbackend: true,\n\tmodules: [\"mvc/view/fonts\", \"mvc/view/unocss\"],\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/view/fonts/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n$APP.addModule({\n\tname: \"fonts\",\n\tpath: \"mvc/view/fonts\",\n\tfrontend: true,\n\tbase: [],\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/view/fonts/frontend.js": {
    "content": "import $APP from \"/bootstrap.js\";\nconst fontFormats = { ttf: \"truetype\" };\nconst Weight = {\n\textralight: 200,\n\tlight: 300,\n\tregular: 400,\n\tmedium: 500,\n\tsemibold: 600,\n\tbold: 700,\n\textrabold: 800,\n};\nconst prepareFont = (extension, config) => {\n\tconst { variants, name, type = \"woff2\" } = config;\n\tconst fontFaces = variants\n\t\t.map((weight) => {\n\t\t\tconst fontWeight = Weight[weight] || 400;\n\t\t\treturn `@font-face {\n      font-family: '${name}';\n      font-weight: ${fontWeight};\n      src: url('${$APP.settings.basePath}/modules/font/${extension}/${weight}.${type}') format('${fontFormats[type] || type}');\n    }`;\n\t\t})\n\t\t.join(\"\\n\");\n\treturn fontFaces;\n};\n\nconst load = (name, config) => {\n\tconst css = prepareFont(name, config);\n\tconst style = document.createElement(\"style\");\n\tstyle.textContent = css;\n\tdocument.head.appendChild(style);\n};\n\n$APP.addFunctions({\n\tname: \"fonts\",\n\tfunctions: { load },\n});\n\n$APP.addHooks({\n\tname: \"fonts\",\n\thooks: {\n\t\tmoduleAdded({ module }) {\n\t\t\tif (!module.font) return;\n\t\t\tload(module.name, module.font);\n\t\t},\n\t},\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/view/unocss/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n$APP.addModule({\n\tname: \"unocss\",\n\tpath: \"mvc/view/unocss\",\n\tfrontend: true,\n\tdev: true,\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/view/unocss/frontend.js": {
    "content": "export default {}"
  },
  "/modules/mvc/view/frontend.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport html from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nconst _data = T.object({\n\tproperties: {\n\t\tmodel: T.string().$,\n\t\tid: T.string().$,\n\t\tmethod: T.string().$,\n\t\tfilter: T.object().$,\n\t\tincludes: T.string().$,\n\t\torder: T.string().$,\n\t\tlimit: T.number().$,\n\t\toffset: T.number().$,\n\t\tcount: T.number().$,\n\t\trows: T.array().$,\n\t\trow: T.object().$,\n\t},\n}).$;\n\nconst _actions = T.object({}).$;\nconst _map = T.object({}).$;\nconst _rows = T.array({}).$;\nconst _row = T.object({}).$;\n\nfunction addClassTags(instance, proto) {\n\tif (proto?.constructor) {\n\t\taddClassTags(instance, Object.getPrototypeOf(proto));\n\t\tif (proto.constructor.tag) {\n\t\t\tinstance.classList.add(proto.constructor.tag);\n\t\t}\n\t}\n}\n\nclass View extends HTMLElement {\n\tstatic get observedAttributes() {\n\t\treturn Object.keys(this.properties).filter(\n\t\t\t(key) => this.properties[key].attribute !== false,\n\t\t);\n\t}\n\n\tstatic properties = { _data, _actions, _map, _rows, _row };\n\tstatic _attrs = {};\n\tstatic plugins = [];\n\tstate = {};\n\t_hasUpdated = false;\n\t_ignoreAttributeChange = false;\n\t_changedProps = {};\n\tconstructor() {\n\t\tsuper();\n\t\t$APP.events.install(this);\n\t}\n\tconnectedCallback() {\n\t\tif (this.constructor.properties) this.initProps();\n\t\taddClassTags(this, Object.getPrototypeOf(this));\n\t\tfor (const plugin of this.constructor.plugins) {\n\t\t\tconst { event, fn, test } = plugin;\n\t\t\tif (\n\t\t\t\tfn &&\n\t\t\t\t(!test || test({ instance: this, component: this.constructor }))\n\t\t\t)\n\t\t\t\tthis.on(event, fn.bind(this));\n\t\t}\n\t\tthis.emit(\"connectedCallback\", {\n\t\t\tinstance: this,\n\t\t\tcomponent: this.constructor,\n\t\t});\n\t\tthis.requestUpdate();\n\t}\n\n\tdisconnectedCallback() {\n\t\tthis.emit(\"disconnectedCallback\", {\n\t\t\tinstance: this,\n\t\t\tcomponent: this.constructor,\n\t\t});\n\t}\n\n\tq(element) {\n\t\treturn this.querySelector(element);\n\t}\n\n\tqa(element) {\n\t\treturn this.querySelectorAll(element);\n\t}\n\n\tprop(prop) {\n\t\treturn {\n\t\t\tvalue: this[prop],\n\t\t\tsetValue: ((newValue) => (this[prop] = newValue)).bind(this),\n\t\t};\n\t}\n\n\tinitProps() {\n\t\tfor (const attr of this.attributes) {\n\t\t\tconst key = this.constructor._attrs[attr.name];\n\t\t\tconst prop = this.constructor.properties[key];\n\t\t\tif (prop && prop.type !== \"boolean\" && attr.value === \"\") {\n\t\t\t\tthis.removeAttribute(attr.name);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.state[key] = prop\n\t\t\t\t? T.stringToType(attr.value, {\n\t\t\t\t\t\t...prop,\n\t\t\t\t\t\tattribute: true,\n\t\t\t\t\t})\n\t\t\t\t: attr.value;\n\t\t}\n\n\t\tfor (const [key, prop] of Object.entries(this.constructor.properties)) {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tsync,\n\t\t\t\tdefaultValue,\n\t\t\t\tattribute = true,\n\t\t\t\tsetter,\n\t\t\t\tgetter,\n\t\t\t} = prop;\n\t\t\tif (sync) continue;\n\t\t\tthis.state[key] ??= this[key] ?? defaultValue;\n\n\t\t\tif (!Object.getOwnPropertyDescriptor(this, key)) {\n\t\t\t\tObject.defineProperty(this, key, {\n\t\t\t\t\tget: getter ? getter.bind(this) : () => this.state[key],\n\t\t\t\t\tset: setter\n\t\t\t\t\t\t? setter.bind(this)\n\t\t\t\t\t\t: (value) => {\n\t\t\t\t\t\t\t\tconst oldValue = this.state[key];\n\t\t\t\t\t\t\t\tif (oldValue === value) return;\n\t\t\t\t\t\t\t\tthis.state[key] = value;\n\t\t\t\t\t\t\t\tthis.updateAttribute({\n\t\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\t\tskipPropUpdate: true,\n\t\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tthis.requestUpdate(key, oldValue, value);\n\t\t\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst value = this.state[key];\n\t\t\tif (!attribute || this.hasAttribute(key) || value === undefined) continue;\n\n\t\t\tthis.updateAttribute({\n\t\t\t\tkey,\n\t\t\t\tvalue,\n\t\t\t\tskipPropUpdate: true,\n\t\t\t\ttype,\n\t\t\t});\n\n\t\t\tthis._changedProps[key] = undefined;\n\t\t}\n\t}\n\n\trequestUpdate(key, oldValue) {\n\t\tif (key) this._changedProps[key] = oldValue;\n\t\tif (this.updateComplete) clearTimeout(this.updateComplete);\n\t\tconst changedProps = { ...this._changedProps };\n\t\tthis.updateComplete = setTimeout(() => {\n\t\t\tthis.performUpdate(changedProps, key === undefined);\n\t\t}, 0);\n\t\treturn this.updateComplete;\n\t}\n\n\tperformUpdate(changedProps, forceUpdate) {\n\t\tthis.updateComplete = null;\n\t\tif (this._hasUpdated && !forceUpdate && !this.shouldUpdate(changedProps))\n\t\t\treturn;\n\t\tthis.emit(\"willUpdate\", changedProps);\n\t\tthis.update(changedProps);\n\t\tif (!this._hasUpdated) {\n\t\t\tthis._hasUpdated = true;\n\t\t\tthis.emit(\"firstUpdated\", changedProps);\n\t\t}\n\t\tthis.emit(\"updated\", changedProps);\n\t\tthis._changedProps = {};\n\t}\n\n\tshouldUpdate(changedProps) {\n\t\tfor (const [key, oldValue] of Object.entries(changedProps)) {\n\t\t\tconst newValue = this[key];\n\t\t\tconst prop = this.constructor.properties[key];\n\t\t\tconst hasChanged = prop?.hasChanged\n\t\t\t\t? prop.hasChanged(newValue, oldValue)\n\t\t\t\t: oldValue !== newValue;\n\t\t\tif (key === \"darkmode\") console.log({ hasChanged }, prop.hasChanged);\n\t\t\tif (!hasChanged) delete changedProps[key];\n\t\t}\n\t\tthis.changedProps = {};\n\t\treturn Object.keys(changedProps).length > 0 || !this._hasUpdated;\n\t}\n\n\tupdate() {\n\t\thtml.render(this.render(), this);\n\t}\n\n\trender() {\n\t\treturn html``;\n\t}\n\n\tattributeChangedCallback(key, oldValue, value) {\n\t\tif (oldValue === value) return;\n\t\tthis.emit(\"attributeChangedCallback\", {\n\t\t\tinstance: this,\n\t\t\tcomponent: this.constructor,\n\t\t\tkey,\n\t\t\tvalue,\n\t\t\toldValue,\n\t\t});\n\n\t\tif (this._ignoreAttributeChange) return;\n\t\tthis.state[key] = T.stringToType(value, this.constructor.properties[key]);\n\t\tif (this._hasUpdated) this.requestUpdate(key, oldValue);\n\t}\n\n\tupdateAttribute({ key, value, type, skipPropUpdate = false }) {\n\t\tif (!type) return;\n\t\tthis._ignoreAttributeChange = skipPropUpdate;\n\t\tif (type === \"function\" && typeof value === \"function\") {\n\t\t\tthis.setAttribute(key, value.toString());\n\t\t} else if (type === \"boolean\") {\n\t\t\tif (value) this.setAttribute(key, \"\");\n\t\t\telse this.removeAttribute(key);\n\t\t} else {\n\t\t\tif (value === undefined) this.removeAttribute(key);\n\t\t\telse {\n\t\t\t\tif ([\"array\", \"object\"].includes(type))\n\t\t\t\t\tthis.setAttribute(key, JSON.stringify(value));\n\t\t\t\telse this.setAttribute(key, value);\n\t\t\t}\n\t\t}\n\n\t\tif (skipPropUpdate) this._ignoreAttributeChange = false;\n\t\telse this[key] = value;\n\t}\n}\n\nwindow.$ = (element) => document.querySelector(element);\nwindow.$$ = (element) => document.querySelectorAll(element);\n\n$APP.setLibrary({\n\tname: \"view\",\n\tpath: \"mvc/view\",\n\talias: \"View\",\n\tbase: View,\n});\n\nexport default View;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/view/html/index.js": {
    "content": "const DEV_MODE = false;\nconst ENABLE_EXTRA_SECURITY_HOOKS = false;\nconst ENABLE_SHADYDOM_NOPATCH = false;\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nlet LitUnstable;\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n\t? (event) => {\n\t\t\tconst shouldEmit = global.emitLitDebugLogEvents;\n\t\t\tif (!shouldEmit) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tglobal.dispatchEvent(\n\t\t\t\tnew CustomEvent(\"lit-debug\", {\n\t\t\t\t\tdetail: event,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t: undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\nlet issueWarning;\nif (DEV_MODE) {\n\tglobal.litIssuedWarnings ??= new Set();\n\n\t// Issue a warning, if we haven't already.\n\tissueWarning = (code, warning) => {\n\t\twarning += code\n\t\t\t? ` See https://lit.dev/msg/${code} for more information.`\n\t\t\t: \"\";\n\t\tif (!global.litIssuedWarnings.has(warning)) {\n\t\t\tconsole.warn(warning);\n\t\t\tglobal.litIssuedWarnings.add(warning);\n\t\t}\n\t};\n\tissueWarning(\n\t\t\"dev-mode\",\n\t\t\"Lit is in dev mode. Not recommended for production!\",\n\t);\n}\nconst wrap =\n\tENABLE_SHADYDOM_NOPATCH &&\n\tglobal.ShadyDOM?.inUse &&\n\tglobal.ShadyDOM?.noPatch === true\n\t\t? global.ShadyDOM.wrap\n\t\t: (node) => node;\nconst trustedTypes = global.trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n\t? trustedTypes.createPolicy(\"lit-html\", {\n\t\t\tcreateHTML: (s) => s,\n\t\t})\n\t: undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\n\nconst identityFunction = (value) => value;\nconst noopSanitizer = (_node, _name, _type) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer) => {\n\tif (!ENABLE_EXTRA_SECURITY_HOOKS) {\n\t\treturn;\n\t}\n\tif (sanitizerFactoryInternal !== noopSanitizer) {\n\t\tthrow new Error(\n\t\t\t\"Attempted to overwrite existing lit-html security policy.\" +\n\t\t\t\t\" setSanitizeDOMValueFactory should be called at most once.\",\n\t\t);\n\t}\n\tsanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n\tsanitizerFactoryInternal = noopSanitizer;\n};\nconst createSanitizer = (node, name, type) => {\n\treturn sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = \"$lit$\";\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${Math.random().toFixed(9).slice(2)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = \"?\" + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\nconst d =\n\tNODE_MODE && global.document === undefined\n\t\t? {\n\t\t\t\tcreateTreeWalker() {\n\t\t\t\t\treturn {};\n\t\t\t\t},\n\t\t\t}\n\t\t: document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment(\"\");\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\n\nconst isPrimitive = (value) =>\n\tvalue === null || (typeof value != \"object\" && typeof value != \"function\");\nconst isArray = Array.isArray;\nconst isIterable = (value) =>\n\tisArray(value) ||\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\ttypeof value?.[Symbol.iterator] === \"function\";\nconst SPACE_CHAR = \"[ \\t\\n\\f\\r]\";\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n\t`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n\t\"g\",\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\nconst MATHML_RESULT = 3;\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg} when it hasn't been compiled by @lit-labs/compiler.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\n\n/**\n * This is a template result that may be either uncompiled or compiled.\n *\n * In the future, TemplateResult will be this type. If you want to explicitly\n * note that a template result is potentially compiled, you can reference this\n * type and it will continue to behave the same through the next major version\n * of Lit. This can be useful for code that wants to prepare for the next\n * major version of Lit.\n */\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n * In Lit 4, this type will be an alias of\n * MaybeCompiledTemplateResult, so that code will get type errors if it assumes\n * that Lit templates are not compiled. When deliberately working with only\n * one, use either {@linkcode CompiledTemplateResult} or\n * {@linkcode UncompiledTemplateResult} explicitly.\n */\n\n/**\n * A TemplateResult that has been compiled by @lit-labs/compiler, skipping the\n * prepare step.\n */\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n\t(type) =>\n\t(strings, ...values) => {\n\t\t// Warn against templates octal escape sequences\n\t\t// We do this here rather than in render so that the warning is closer to the\n\t\t// template definition.\n\t\tif (DEV_MODE && strings.some((s) => s === undefined)) {\n\t\t\tconsole.warn(\n\t\t\t\t\"Some template strings are undefined.\\n\" +\n\t\t\t\t\t\"This is probably caused by illegal octal escape sequences.\",\n\t\t\t);\n\t\t}\n\t\tif (DEV_MODE) {\n\t\t\t// Import static-html.js results in a circular dependency which g3 doesn't\n\t\t\t// handle. Instead we know that static values must have the field\n\t\t\t// `_$litStatic$`.\n\t\t\tif (values.some((val) => val?.[\"_$litStatic$\"])) {\n\t\t\t\tissueWarning(\n\t\t\t\t\t\"\",\n\t\t\t\t\t`Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\\n` +\n\t\t\t\t\t\t`Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t// This property needs to remain unminified.\n\t\t\t[\"_$litType$\"]: type,\n\t\t\tstrings,\n\t\t\tvalues,\n\t\t};\n\t};\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nconst html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus not be properly contained within an `<svg>` HTML\n * element.\n */\nconst svg = tag(SVG_RESULT);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const num = mathml`<mn>1</mn>`;\n *\n * const eq = html`\n *   <math>\n *     ${num}\n *   </math>`;\n * ```\n *\n * The `mathml` *tag function* should only be used for MathML fragments, or\n * elements that would be contained **inside** a `<math>` HTML element. A common\n * error is placing a `<math>` *element* in a template tagged with the `mathml`\n * tag function. The `<math>` element is an HTML element and should be used\n * within a template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an MathML fragment from the\n * `render()` method, as the MathML fragment will be contained within the\n * element's shadow root and thus not be properly contained within a `<math>`\n * HTML element.\n */\nconst mathml = tag(MATHML_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nconst noChange = Symbol.for(\"lit-noChange\");\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nconst nothing = Symbol.for(\"lit-nothing\");\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - they must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\n\nconst walker = d.createTreeWalker(\n\td,\n\t129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */,\n);\nlet sanitizerFactoryInternal = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\n\nfunction trustFromTemplateString(tsa, stringFromTSA) {\n\t// A security check to prevent spoofing of Lit template results.\n\t// In the future, we may be able to replace this with Array.isTemplateObject,\n\t// though we might need to make that check inside of the html and svg\n\t// functions, because precompiled templates don't come in as\n\t// TemplateStringArray objects.\n\tif (!isArray(tsa) || !Object.hasOwn(tsa, \"raw\")) {\n\t\tlet message = \"invalid template strings array\";\n\t\tif (DEV_MODE) {\n\t\t\tmessage = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n\t\t\t\t.trim()\n\t\t\t\t.replace(/\\n */g, \"\\n\");\n\t\t}\n\t\tthrow new Error(message);\n\t}\n\treturn policy !== undefined\n\t\t? policy.createHTML(stringFromTSA)\n\t\t: stringFromTSA;\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (strings, type) => {\n\t// Insert makers into the template HTML to represent the position of\n\t// bindings. The following code scans the template strings to determine the\n\t// syntactic position of the bindings. They can be in text position, where\n\t// we insert an HTML comment, attribute value position, where we insert a\n\t// sentinel string and re-write the attribute name, or inside a tag where\n\t// we insert the sentinel string.\n\tconst l = strings.length - 1;\n\t// Stores the case-sensitive bound attribute names in the order of their\n\t// parts. ElementParts are also reflected in this array as undefined\n\t// rather than a string, to disambiguate from attribute bindings.\n\tconst attrNames = [];\n\tlet html =\n\t\ttype === SVG_RESULT ? \"<svg>\" : type === MATHML_RESULT ? \"<math>\" : \"\";\n\n\t// When we're inside a raw text tag (not it's text content), the regex\n\t// will still be tagRegex so we can find attributes, but will switch to\n\t// this regex when the tag ends.\n\tlet rawTextEndRegex;\n\n\t// The current parsing state, represented as a reference to one of the\n\t// regexes\n\tlet regex = textEndRegex;\n\tfor (let i = 0; i < l; i++) {\n\t\tconst s = strings[i];\n\t\t// The index of the end of the last attribute name. When this is\n\t\t// positive at end of a string, it means we're in an attribute value\n\t\t// position and need to rewrite the attribute name.\n\t\t// We also use a special value of -2 to indicate that we encountered\n\t\t// the end of a string in attribute name position.\n\t\tlet attrNameEndIndex = -1;\n\t\tlet attrName;\n\t\tlet lastIndex = 0;\n\t\tlet match;\n\n\t\t// The conditions in this loop handle the current parse state, and the\n\t\t// assignments to the `regex` variable are the state transitions.\n\t\twhile (lastIndex < s.length) {\n\t\t\t// Make sure we start searching from where we previously left off\n\t\t\tregex.lastIndex = lastIndex;\n\t\t\tmatch = regex.exec(s);\n\t\t\tif (match === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastIndex = regex.lastIndex;\n\t\t\tif (regex === textEndRegex) {\n\t\t\t\tif (match[COMMENT_START] === \"!--\") {\n\t\t\t\t\tregex = commentEndRegex;\n\t\t\t\t} else if (match[COMMENT_START] !== undefined) {\n\t\t\t\t\t// We started a weird comment, like </{\n\t\t\t\t\tregex = comment2EndRegex;\n\t\t\t\t} else if (match[TAG_NAME] !== undefined) {\n\t\t\t\t\tif (rawTextElement.test(match[TAG_NAME])) {\n\t\t\t\t\t\t// Record if we encounter a raw-text element. We'll switch to\n\t\t\t\t\t\t// this regex at the end of the tag.\n\t\t\t\t\t\trawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, \"g\");\n\t\t\t\t\t}\n\t\t\t\t\tregex = tagEndRegex;\n\t\t\t\t} else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n\t\t\t\t\tif (DEV_MODE) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\"Bindings in tag names are not supported. Please use static templates instead. \" +\n\t\t\t\t\t\t\t\t\"See https://lit.dev/docs/templates/expressions/#static-expressions\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tregex = tagEndRegex;\n\t\t\t\t}\n\t\t\t} else if (regex === tagEndRegex) {\n\t\t\t\tif (match[ENTIRE_MATCH] === \">\") {\n\t\t\t\t\t// End of a tag. If we had started a raw-text element, use that\n\t\t\t\t\t// regex\n\t\t\t\t\tregex = rawTextEndRegex ?? textEndRegex;\n\t\t\t\t\t// We may be ending an unquoted attribute value, so make sure we\n\t\t\t\t\t// clear any pending attrNameEndIndex\n\t\t\t\t\tattrNameEndIndex = -1;\n\t\t\t\t} else if (match[ATTRIBUTE_NAME] === undefined) {\n\t\t\t\t\t// Attribute name position\n\t\t\t\t\tattrNameEndIndex = -2;\n\t\t\t\t} else {\n\t\t\t\t\tattrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n\t\t\t\t\tattrName = match[ATTRIBUTE_NAME];\n\t\t\t\t\tregex =\n\t\t\t\t\t\tmatch[QUOTE_CHAR] === undefined\n\t\t\t\t\t\t\t? tagEndRegex\n\t\t\t\t\t\t\t: match[QUOTE_CHAR] === '\"'\n\t\t\t\t\t\t\t\t? doubleQuoteAttrEndRegex\n\t\t\t\t\t\t\t\t: singleQuoteAttrEndRegex;\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tregex === doubleQuoteAttrEndRegex ||\n\t\t\t\tregex === singleQuoteAttrEndRegex\n\t\t\t) {\n\t\t\t\tregex = tagEndRegex;\n\t\t\t} else if (regex === commentEndRegex || regex === comment2EndRegex) {\n\t\t\t\tregex = textEndRegex;\n\t\t\t} else {\n\t\t\t\t// Not one of the five state regexes, so it must be the dynamically\n\t\t\t\t// created raw text regex and we're at the close of that element.\n\t\t\t\tregex = tagEndRegex;\n\t\t\t\trawTextEndRegex = undefined;\n\t\t\t}\n\t\t}\n\t\tif (DEV_MODE) {\n\t\t\t// If we have a attrNameEndIndex, which indicates that we should\n\t\t\t// rewrite the attribute name, assert that we're in a valid attribute\n\t\t\t// position - either in a tag, or a quoted attribute value.\n\t\t\tconsole.assert(\n\t\t\t\tattrNameEndIndex === -1 ||\n\t\t\t\t\tregex === tagEndRegex ||\n\t\t\t\t\tregex === singleQuoteAttrEndRegex ||\n\t\t\t\t\tregex === doubleQuoteAttrEndRegex,\n\t\t\t\t\"unexpected parse state B\",\n\t\t\t);\n\t\t}\n\n\t\t// We have four cases:\n\t\t//  1. We're in text position, and not in a raw text element\n\t\t//     (regex === textEndRegex): insert a comment marker.\n\t\t//  2. We have a non-negative attrNameEndIndex which means we need to\n\t\t//     rewrite the attribute name to add a bound attribute suffix.\n\t\t//  3. We're at the non-first binding in a multi-binding attribute, use a\n\t\t//     plain marker.\n\t\t//  4. We're somewhere else inside the tag. If we're in attribute name\n\t\t//     position (attrNameEndIndex === -2), add a sequential suffix to\n\t\t//     generate a unique attribute name.\n\n\t\t// Detect a binding next to self-closing tag end and insert a space to\n\t\t// separate the marker from the tag end:\n\t\tconst end =\n\t\t\tregex === tagEndRegex && strings[i + 1].startsWith(\"/>\") ? \" \" : \"\";\n\t\thtml +=\n\t\t\tregex === textEndRegex\n\t\t\t\t? s + nodeMarker\n\t\t\t\t: attrNameEndIndex >= 0\n\t\t\t\t\t? (attrNames.push(attrName),\n\t\t\t\t\t\ts.slice(0, attrNameEndIndex) +\n\t\t\t\t\t\t\tboundAttributeSuffix +\n\t\t\t\t\t\t\ts.slice(attrNameEndIndex)) +\n\t\t\t\t\t\tmarker +\n\t\t\t\t\t\tend\n\t\t\t\t\t: s + marker + (attrNameEndIndex === -2 ? i : end);\n\t}\n\tconst htmlResult =\n\t\thtml +\n\t\t(strings[l] || \"<?>\") +\n\t\t(type === SVG_RESULT ? \"</svg>\" : type === MATHML_RESULT ? \"</math>\" : \"\");\n\n\t// Returned as an array for terseness\n\treturn [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\n/** @internal */\n\nclass Template {\n\t/** @internal */\n\n\tparts = [];\n\tconstructor(\n\t\t// This property needs to remain unminified.\n\t\t{ strings, [\"_$litType$\"]: type },\n\t\toptions,\n\t) {\n\t\tlet node;\n\t\tlet nodeIndex = 0;\n\t\tlet attrNameIndex = 0;\n\t\tconst partCount = strings.length - 1;\n\t\tconst parts = this.parts;\n\n\t\t// Create template element\n\t\tconst [html, attrNames] = getTemplateHtml(strings, type);\n\t\tthis.el = Template.createElement(html, options);\n\t\twalker.currentNode = this.el.content;\n\n\t\t// Re-parent SVG or MathML nodes into template root\n\t\tif (type === SVG_RESULT || type === MATHML_RESULT) {\n\t\t\tconst wrapper = this.el.content.firstChild;\n\t\t\twrapper.replaceWith(...wrapper.childNodes);\n\t\t}\n\n\t\t// Walk the template to find binding markers and create TemplateParts\n\t\twhile ((node = walker.nextNode()) !== null && parts.length < partCount) {\n\t\t\tif (node.nodeType === 1) {\n\t\t\t\tif (DEV_MODE) {\n\t\t\t\t\tconst tag = node.localName;\n\t\t\t\t\t// Warn if `textarea` includes an expression and throw if `template`\n\t\t\t\t\t// does since these are not supported. We do this by checking\n\t\t\t\t\t// innerHTML for anything that looks like a marker. This catches\n\t\t\t\t\t// cases like bindings in textarea there markers turn into text nodes.\n\t\t\t\t\tif (\n\t\t\t\t\t\t/^(?:textarea|template)$/i.test(tag) &&\n\t\t\t\t\t\tnode.innerHTML.includes(marker)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst m =\n\t\t\t\t\t\t\t`Expressions are not supported inside \\`${tag}\\` ` +\n\t\t\t\t\t\t\t`elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n\t\t\t\t\t\t\t\"information.\";\n\t\t\t\t\t\tif (tag === \"template\") {\n\t\t\t\t\t\t\tthrow new Error(m);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tissueWarning(\"\", m);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// TODO (justinfagnani): for attempted dynamic tag names, we don't\n\t\t\t\t// increment the bindingIndex, and it'll be off by 1 in the element\n\t\t\t\t// and off by two after it.\n\t\t\t\tif (node.hasAttributes()) {\n\t\t\t\t\tfor (const name of node.getAttributeNames()) {\n\t\t\t\t\t\tif (name.endsWith(boundAttributeSuffix)) {\n\t\t\t\t\t\t\tconst realName = attrNames[attrNameIndex++];\n\t\t\t\t\t\t\tconst value = node.getAttribute(name);\n\t\t\t\t\t\t\tconst statics = value.split(marker);\n\t\t\t\t\t\t\tconst m = /([.?@])?(.*)/.exec(realName);\n\t\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\t\ttype: ATTRIBUTE_PART,\n\t\t\t\t\t\t\t\tindex: nodeIndex,\n\t\t\t\t\t\t\t\tname: m[2],\n\t\t\t\t\t\t\t\tstrings: statics,\n\t\t\t\t\t\t\t\tctor:\n\t\t\t\t\t\t\t\t\tm[1] === \".\"\n\t\t\t\t\t\t\t\t\t\t? PropertyPart\n\t\t\t\t\t\t\t\t\t\t: m[1] === \"?\"\n\t\t\t\t\t\t\t\t\t\t\t? BooleanAttributePart\n\t\t\t\t\t\t\t\t\t\t\t: m[1] === \"@\"\n\t\t\t\t\t\t\t\t\t\t\t\t? EventPart\n\t\t\t\t\t\t\t\t\t\t\t\t: AttributePart,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tnode.removeAttribute(name);\n\t\t\t\t\t\t} else if (name.startsWith(marker)) {\n\t\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\t\ttype: ELEMENT_PART,\n\t\t\t\t\t\t\t\tindex: nodeIndex,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tnode.removeAttribute(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// TODO (justinfagnani): benchmark the regex against testing for each\n\t\t\t\t// of the 3 raw text element names.\n\t\t\t\tif (rawTextElement.test(node.tagName)) {\n\t\t\t\t\t// For raw text elements we need to split the text content on\n\t\t\t\t\t// markers, create a Text node for each segment, and create\n\t\t\t\t\t// a TemplatePart for each marker.\n\t\t\t\t\tconst strings = node.textContent.split(marker);\n\t\t\t\t\tconst lastIndex = strings.length - 1;\n\t\t\t\t\tif (lastIndex > 0) {\n\t\t\t\t\t\tnode.textContent = trustedTypes ? trustedTypes.emptyScript : \"\";\n\t\t\t\t\t\t// Generate a new text node for each literal section\n\t\t\t\t\t\t// These nodes are also used as the markers for node parts\n\t\t\t\t\t\t// We can't use empty text nodes as markers because they're\n\t\t\t\t\t\t// normalized when cloning in IE (could simplify when\n\t\t\t\t\t\t// IE is no longer supported)\n\t\t\t\t\t\tfor (let i = 0; i < lastIndex; i++) {\n\t\t\t\t\t\t\tnode.append(strings[i], createMarker());\n\t\t\t\t\t\t\t// Walk past the marker node we just added\n\t\t\t\t\t\t\twalker.nextNode();\n\t\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\t\ttype: CHILD_PART,\n\t\t\t\t\t\t\t\tindex: ++nodeIndex,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Note because this marker is added after the walker's current\n\t\t\t\t\t\t// node, it will be walked to in the outer loop (and ignored), so\n\t\t\t\t\t\t// we don't need to adjust nodeIndex here\n\t\t\t\t\t\tnode.append(strings[lastIndex], createMarker());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.nodeType === 8) {\n\t\t\t\tconst data = node.data;\n\t\t\t\tif (data === markerMatch) {\n\t\t\t\t\tparts.push({\n\t\t\t\t\t\ttype: CHILD_PART,\n\t\t\t\t\t\tindex: nodeIndex,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlet i = -1;\n\t\t\t\t\twhile ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n\t\t\t\t\t\t// Comment node has a binding marker inside, make an inactive part\n\t\t\t\t\t\t// The binding won't work, but subsequent bindings will\n\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\ttype: COMMENT_PART,\n\t\t\t\t\t\t\tindex: nodeIndex,\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// Move to the end of the match\n\t\t\t\t\t\ti += marker.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tnodeIndex++;\n\t\t}\n\t\tif (DEV_MODE) {\n\t\t\t// If there was a duplicate attribute on a tag, then when the tag is\n\t\t\t// parsed into an element the attribute gets de-duplicated. We can detect\n\t\t\t// this mismatch if we haven't precisely consumed every attribute name\n\t\t\t// when preparing the template. This works because `attrNames` is built\n\t\t\t// from the template string and `attrNameIndex` comes from processing the\n\t\t\t// resulting DOM.\n\t\t\tif (attrNames.length !== attrNameIndex) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Detected duplicate attribute bindings. This occurs if your template \" +\n\t\t\t\t\t\t\"has duplicate attributes on an element tag. For example \" +\n\t\t\t\t\t\t`\"<input ?disabled=\\${true} ?disabled=\\${false}>\" contains a ` +\n\t\t\t\t\t\t`duplicate \"disabled\" attribute. The error was detected in ` +\n\t\t\t\t\t\t\"the following template: \\n\" +\n\t\t\t\t\t\t\"`\" +\n\t\t\t\t\t\tstrings.join(\"${...}\") +\n\t\t\t\t\t\t\"`\",\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// We could set walker.currentNode to another node here to prevent a memory\n\t\t// leak, but every time we prepare a template, we immediately render it\n\t\t// and re-use the walker in new TemplateInstance._clone().\n\t\tdebugLogEvent?.({\n\t\t\tkind: \"template prep\",\n\t\t\ttemplate: this,\n\t\t\tclonableTemplate: this.el,\n\t\t\tparts: this.parts,\n\t\t\tstrings,\n\t\t});\n\t}\n\n\t// Overridden via `litHtmlPolyfillSupport` to provide platform support.\n\t/** @nocollapse */\n\tstatic createElement(html, _options) {\n\t\tconst el = d.createElement(\"template\");\n\t\tel.innerHTML = html;\n\t\treturn el;\n\t}\n}\nfunction resolveDirective(part, value, parent = part, attributeIndex) {\n\t// Bail early if the value is explicitly noChange. Note, this means any\n\t// nested directive is still attached and is not run.\n\tif (value === noChange || value === nothing) {\n\t\treturn value;\n\t}\n\n\tlet currentDirective =\n\t\tattributeIndex !== undefined\n\t\t\t? parent.__directives?.[attributeIndex]\n\t\t\t: parent.__directive;\n\tconst nextDirectiveConstructor = isPrimitive(value)\n\t\t? undefined\n\t\t: // This property needs to remain unminified.\n\t\t\tvalue[\"_$litDirective$\"];\n\tif (currentDirective?.constructor !== nextDirectiveConstructor) {\n\t\t// This property needs to remain unminified.\n\t\tcurrentDirective?.[\"_$notifyDirectiveConnectionChanged\"]?.(false);\n\t\tif (nextDirectiveConstructor === undefined) {\n\t\t\tcurrentDirective = undefined;\n\t\t} else {\n\t\t\tcurrentDirective = new nextDirectiveConstructor(part);\n\t\t\tcurrentDirective?._$initialize(part, parent, attributeIndex);\n\t\t}\n\t\tif (attributeIndex !== undefined) {\n\t\t\t(parent.__directives ??= [])[attributeIndex] = currentDirective;\n\t\t} else {\n\t\t\tparent.__directive = currentDirective;\n\t\t}\n\t}\n\tif (currentDirective !== undefined) {\n\t\tvalue = resolveDirective(\n\t\t\tpart,\n\t\t\tcurrentDirective._$resolve(part, value.values),\n\t\t\tcurrentDirective,\n\t\t\tattributeIndex,\n\t\t);\n\t}\n\treturn value;\n}\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance {\n\t_$parts = [];\n\n\t/** @internal */\n\n\t/** @internal */\n\t_$disconnectableChildren = undefined;\n\tconstructor(template, parent) {\n\t\tthis._$template = template;\n\t\tthis._$parent = parent;\n\t}\n\n\t// Called by ChildPart parentNode getter\n\tget parentNode() {\n\t\treturn this._$parent.parentNode;\n\t}\n\n\t// See comment in Disconnectable interface for why this is a getter\n\tget _$isConnected() {\n\t\treturn this._$parent._$isConnected;\n\t}\n\n\t// This method is separate from the constructor because we need to return a\n\t// DocumentFragment and we don't want to hold onto it with an instance field.\n\t_clone(options) {\n\t\tconst {\n\t\t\tel: { content },\n\t\t\tparts,\n\t\t} = this._$template;\n\t\tconst fragment = (options?.creationScope ?? d).importNode(content, true);\n\t\twalker.currentNode = fragment;\n\t\tlet node = walker.nextNode();\n\t\tlet nodeIndex = 0;\n\t\tlet partIndex = 0;\n\t\tlet templatePart = parts[0];\n\t\twhile (templatePart !== undefined) {\n\t\t\tif (nodeIndex === templatePart.index) {\n\t\t\t\tlet part;\n\t\t\t\tif (templatePart.type === CHILD_PART) {\n\t\t\t\t\tpart = new ChildPart(node, node.nextSibling, this, options);\n\t\t\t\t} else if (templatePart.type === ATTRIBUTE_PART) {\n\t\t\t\t\tpart = new templatePart.ctor(\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\ttemplatePart.name,\n\t\t\t\t\t\ttemplatePart.strings,\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t);\n\t\t\t\t} else if (templatePart.type === ELEMENT_PART) {\n\t\t\t\t\tpart = new ElementPart(node, this, options);\n\t\t\t\t}\n\t\t\t\tthis._$parts.push(part);\n\t\t\t\ttemplatePart = parts[++partIndex];\n\t\t\t}\n\t\t\tif (nodeIndex !== templatePart?.index) {\n\t\t\t\tnode = walker.nextNode();\n\t\t\t\tnodeIndex++;\n\t\t\t}\n\t\t}\n\t\t// We need to set the currentNode away from the cloned tree so that we\n\t\t// don't hold onto the tree even if the tree is detached and should be\n\t\t// freed.\n\t\twalker.currentNode = d;\n\t\treturn fragment;\n\t}\n\t_update(values) {\n\t\tlet i = 0;\n\t\tfor (const part of this._$parts) {\n\t\t\tif (part !== undefined) {\n\t\t\t\tdebugLogEvent?.({\n\t\t\t\t\tkind: \"set part\",\n\t\t\t\t\tpart,\n\t\t\t\t\tvalue: values[i],\n\t\t\t\t\tvalueIndex: i,\n\t\t\t\t\tvalues,\n\t\t\t\t\ttemplateInstance: this,\n\t\t\t\t});\n\t\t\t\tif (part.strings !== undefined) {\n\t\t\t\t\tpart._$setValue(values, part, i);\n\t\t\t\t\t// The number of values the part consumes is part.strings.length - 1\n\t\t\t\t\t// since values are in between template spans. We increment i by 1\n\t\t\t\t\t// later in the loop, so increment it by part.strings.length - 2 here\n\t\t\t\t\ti += part.strings.length - 2;\n\t\t\t\t} else {\n\t\t\t\t\tpart._$setValue(values[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n}\n\n/*\n * Parts\n */\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\n\nclass ChildPart {\n\ttype = CHILD_PART;\n\t_$committedValue = nothing;\n\t/** @internal */\n\n\t/** @internal */\n\n\t/** @internal */\n\n\t/** @internal */\n\n\t/**\n\t * Connection state for RootParts only (i.e. ChildPart without _$parent\n\t * returned from top-level `render`). This field is unused otherwise. The\n\t * intention would be clearer if we made `RootPart` a subclass of `ChildPart`\n\t * with this field (and a different _$isConnected getter), but the subclass\n\t * caused a perf regression, possibly due to making call sites polymorphic.\n\t * @internal\n\t */\n\n\t// See comment in Disconnectable interface for why this is a getter\n\tget _$isConnected() {\n\t\t// ChildParts that are not at the root should always be created with a\n\t\t// parent; only RootChildNode's won't, so they return the local isConnected\n\t\t// state\n\t\treturn this._$parent?._$isConnected ?? this.__isConnected;\n\t}\n\n\t// The following fields will be patched onto ChildParts when required by\n\t// AsyncDirective\n\t/** @internal */\n\t_$disconnectableChildren = undefined;\n\t/** @internal */\n\n\t/** @internal */\n\n\tconstructor(startNode, endNode, parent, options) {\n\t\tthis._$startNode = startNode;\n\t\tthis._$endNode = endNode;\n\t\tthis._$parent = parent;\n\t\tthis.options = options;\n\t\t// Note __isConnected is only ever accessed on RootParts (i.e. when there is\n\t\t// no _$parent); the value on a non-root-part is \"don't care\", but checking\n\t\t// for parent would be more code\n\t\tthis.__isConnected = options?.isConnected ?? true;\n\t\tif (ENABLE_EXTRA_SECURITY_HOOKS) {\n\t\t\t// Explicitly initialize for consistent class shape.\n\t\t\tthis._textSanitizer = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * The parent node into which the part renders its content.\n\t *\n\t * A ChildPart's content consists of a range of adjacent child nodes of\n\t * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n\t * `.endNode`).\n\t *\n\t * - If both `.startNode` and `.endNode` are non-null, then the part's content\n\t * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n\t *\n\t * - If `.startNode` is non-null but `.endNode` is null, then the part's\n\t * content consists of all siblings following `.startNode`, up to and\n\t * including the last child of `.parentNode`. If `.endNode` is non-null, then\n\t * `.startNode` will always be non-null.\n\t *\n\t * - If both `.endNode` and `.startNode` are null, then the part's content\n\t * consists of all child nodes of `.parentNode`.\n\t */\n\tget parentNode() {\n\t\tlet parentNode = wrap(this._$startNode).parentNode;\n\t\tconst parent = this._$parent;\n\t\tif (\n\t\t\tparent !== undefined &&\n\t\t\tparentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n\t\t) {\n\t\t\t// If the parentNode is a DocumentFragment, it may be because the DOM is\n\t\t\t// still in the cloned fragment during initial render; if so, get the real\n\t\t\t// parentNode the part will be committed into by asking the parent.\n\t\t\tparentNode = parent.parentNode;\n\t\t}\n\t\treturn parentNode;\n\t}\n\n\t/**\n\t * The part's leading marker node, if any. See `.parentNode` for more\n\t * information.\n\t */\n\tget startNode() {\n\t\treturn this._$startNode;\n\t}\n\n\t/**\n\t * The part's trailing marker node, if any. See `.parentNode` for more\n\t * information.\n\t */\n\tget endNode() {\n\t\treturn this._$endNode;\n\t}\n\t_$setValue(value, directiveParent = this) {\n\t\tif (DEV_MODE && this.parentNode === null) {\n\t\t\tthrow new Error(\n\t\t\t\t`This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`,\n\t\t\t);\n\t\t}\n\t\tvalue = resolveDirective(this, value, directiveParent);\n\t\tif (isPrimitive(value)) {\n\t\t\t// Non-rendering child values. It's important that these do not render\n\t\t\t// empty text nodes to avoid issues with preventing default <slot>\n\t\t\t// fallback content.\n\t\t\tif (value === nothing || value == null || value === \"\") {\n\t\t\t\tif (this._$committedValue !== nothing) {\n\t\t\t\t\tdebugLogEvent?.({\n\t\t\t\t\t\tkind: \"commit nothing to child\",\n\t\t\t\t\t\tstart: this._$startNode,\n\t\t\t\t\t\tend: this._$endNode,\n\t\t\t\t\t\tparent: this._$parent,\n\t\t\t\t\t\toptions: this.options,\n\t\t\t\t\t});\n\t\t\t\t\tthis._$clear();\n\t\t\t\t}\n\t\t\t\tthis._$committedValue = nothing;\n\t\t\t} else if (value !== this._$committedValue && value !== noChange) {\n\t\t\t\tthis._commitText(value);\n\t\t\t}\n\t\t\t// This property needs to remain unminified.\n\t\t} else if (value[\"_$litType$\"] !== undefined) {\n\t\t\tthis._commitTemplateResult(value);\n\t\t} else if (value.nodeType !== undefined) {\n\t\t\tif (DEV_MODE && this.options?.host === value) {\n\t\t\t\tthis._commitText(\n\t\t\t\t\t`[probable mistake: rendered a template's host in itself ` +\n\t\t\t\t\t\t\"(commonly caused by writing \\${this} in a template]\",\n\t\t\t\t);\n\t\t\t\tconsole.warn(\n\t\t\t\t\t\"Attempted to render the template host\",\n\t\t\t\t\tvalue,\n\t\t\t\t\t\"inside itself. This is almost always a mistake, and in dev mode \",\n\t\t\t\t\t`we render some warning text. In production however, we'll `,\n\t\t\t\t\t\"render it, which will usually result in an error, and sometimes \",\n\t\t\t\t\t\"in the element disappearing from the DOM.\",\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._commitNode(value);\n\t\t} else if (isIterable(value)) {\n\t\t\tthis._commitIterable(value);\n\t\t} else {\n\t\t\t// Fallback, will render the string representation\n\t\t\tthis._commitText(value);\n\t\t}\n\t}\n\t_insert(node) {\n\t\treturn wrap(wrap(this._$startNode).parentNode).insertBefore(\n\t\t\tnode,\n\t\t\tthis._$endNode,\n\t\t);\n\t}\n\t_commitNode(value) {\n\t\tif (this._$committedValue !== value) {\n\t\t\tthis._$clear();\n\t\t\tif (\n\t\t\t\tENABLE_EXTRA_SECURITY_HOOKS &&\n\t\t\t\tsanitizerFactoryInternal !== noopSanitizer\n\t\t\t) {\n\t\t\t\tconst parentNodeName = this._$startNode.parentNode?.nodeName;\n\t\t\t\tif (parentNodeName === \"STYLE\" || parentNodeName === \"SCRIPT\") {\n\t\t\t\t\tlet message = \"Forbidden\";\n\t\t\t\t\tif (DEV_MODE) {\n\t\t\t\t\t\tif (parentNodeName === \"STYLE\") {\n\t\t\t\t\t\t\tmessage =\n\t\t\t\t\t\t\t\t\"Lit does not support binding inside style nodes. \" +\n\t\t\t\t\t\t\t\t\"This is a security risk, as style injection attacks can \" +\n\t\t\t\t\t\t\t\t\"exfiltrate data and spoof UIs. \" +\n\t\t\t\t\t\t\t\t\"Consider instead using css\\`...\\` literals \" +\n\t\t\t\t\t\t\t\t\"to compose styles, and do dynamic styling with \" +\n\t\t\t\t\t\t\t\t\"css custom properties, ::parts, <slot>s, \" +\n\t\t\t\t\t\t\t\t\"and by mutating the DOM rather than stylesheets.\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmessage =\n\t\t\t\t\t\t\t\t\"Lit does not support binding inside script nodes. \" +\n\t\t\t\t\t\t\t\t\"This is a security risk, as it could allow arbitrary \" +\n\t\t\t\t\t\t\t\t\"code execution.\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(message);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdebugLogEvent?.({\n\t\t\t\tkind: \"commit node\",\n\t\t\t\tstart: this._$startNode,\n\t\t\t\tparent: this._$parent,\n\t\t\t\tvalue: value,\n\t\t\t\toptions: this.options,\n\t\t\t});\n\t\t\tthis._$committedValue = this._insert(value);\n\t\t}\n\t}\n\t_commitText(value) {\n\t\t// If the committed value is a primitive it means we called _commitText on\n\t\t// the previous render, and we know that this._$startNode.nextSibling is a\n\t\t// Text node. We can now just replace the text content (.data) of the node.\n\t\tif (\n\t\t\tthis._$committedValue !== nothing &&\n\t\t\tisPrimitive(this._$committedValue)\n\t\t) {\n\t\t\tconst node = wrap(this._$startNode).nextSibling;\n\t\t\tif (ENABLE_EXTRA_SECURITY_HOOKS) {\n\t\t\t\tif (this._textSanitizer === undefined) {\n\t\t\t\t\tthis._textSanitizer = createSanitizer(node, \"data\", \"property\");\n\t\t\t\t}\n\t\t\t\tvalue = this._textSanitizer(value);\n\t\t\t}\n\t\t\tdebugLogEvent?.({\n\t\t\t\tkind: \"commit text\",\n\t\t\t\tnode,\n\t\t\t\tvalue,\n\t\t\t\toptions: this.options,\n\t\t\t});\n\t\t\tnode.data = value;\n\t\t} else {\n\t\t\tif (ENABLE_EXTRA_SECURITY_HOOKS) {\n\t\t\t\tconst textNode = d.createTextNode(\"\");\n\t\t\t\tthis._commitNode(textNode);\n\t\t\t\t// When setting text content, for security purposes it matters a lot\n\t\t\t\t// what the parent is. For example, <style> and <script> need to be\n\t\t\t\t// handled with care, while <span> does not. So first we need to put a\n\t\t\t\t// text node into the document, then we can sanitize its content.\n\t\t\t\tif (this._textSanitizer === undefined) {\n\t\t\t\t\tthis._textSanitizer = createSanitizer(textNode, \"data\", \"property\");\n\t\t\t\t}\n\t\t\t\tvalue = this._textSanitizer(value);\n\t\t\t\tdebugLogEvent?.({\n\t\t\t\t\tkind: \"commit text\",\n\t\t\t\t\tnode: textNode,\n\t\t\t\t\tvalue,\n\t\t\t\t\toptions: this.options,\n\t\t\t\t});\n\t\t\t\ttextNode.data = value;\n\t\t\t} else {\n\t\t\t\tthis._commitNode(d.createTextNode(value));\n\t\t\t\tdebugLogEvent?.({\n\t\t\t\t\tkind: \"commit text\",\n\t\t\t\t\tnode: wrap(this._$startNode).nextSibling,\n\t\t\t\t\tvalue,\n\t\t\t\t\toptions: this.options,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis._$committedValue = value;\n\t}\n\t_commitTemplateResult(result) {\n\t\t// This property needs to remain unminified.\n\t\tconst { values, [\"_$litType$\"]: type } = result;\n\t\t// If $litType$ is a number, result is a plain TemplateResult and we get\n\t\t// the template from the template cache. If not, result is a\n\t\t// CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n\t\t// to create the <template> element the first time we see it.\n\t\tconst template =\n\t\t\ttypeof type === \"number\"\n\t\t\t\t? this._$getTemplate(result)\n\t\t\t\t: (type.el === undefined &&\n\t\t\t\t\t\t(type.el = Template.createElement(\n\t\t\t\t\t\t\ttrustFromTemplateString(type.h, type.h[0]),\n\t\t\t\t\t\t\tthis.options,\n\t\t\t\t\t\t)),\n\t\t\t\t\ttype);\n\t\tif (this._$committedValue?._$template === template) {\n\t\t\tdebugLogEvent?.({\n\t\t\t\tkind: \"template updating\",\n\t\t\t\ttemplate,\n\t\t\t\tinstance: this._$committedValue,\n\t\t\t\tparts: this._$committedValue._$parts,\n\t\t\t\toptions: this.options,\n\t\t\t\tvalues,\n\t\t\t});\n\t\t\tthis._$committedValue._update(values);\n\t\t} else {\n\t\t\tconst instance = new TemplateInstance(template, this);\n\t\t\tconst fragment = instance._clone(this.options);\n\t\t\tdebugLogEvent?.({\n\t\t\t\tkind: \"template instantiated\",\n\t\t\t\ttemplate,\n\t\t\t\tinstance,\n\t\t\t\tparts: instance._$parts,\n\t\t\t\toptions: this.options,\n\t\t\t\tfragment,\n\t\t\t\tvalues,\n\t\t\t});\n\t\t\tinstance._update(values);\n\t\t\tdebugLogEvent?.({\n\t\t\t\tkind: \"template instantiated and updated\",\n\t\t\t\ttemplate,\n\t\t\t\tinstance,\n\t\t\t\tparts: instance._$parts,\n\t\t\t\toptions: this.options,\n\t\t\t\tfragment,\n\t\t\t\tvalues,\n\t\t\t});\n\t\t\tthis._commitNode(fragment);\n\t\t\tthis._$committedValue = instance;\n\t\t}\n\t}\n\n\t// Overridden via `litHtmlPolyfillSupport` to provide platform support.\n\t/** @internal */\n\t_$getTemplate(result) {\n\t\tlet template = templateCache.get(result.strings);\n\t\tif (template === undefined) {\n\t\t\ttemplateCache.set(result.strings, (template = new Template(result)));\n\t\t}\n\t\treturn template;\n\t}\n\t_commitIterable(value) {\n\t\t// For an Iterable, we create a new InstancePart per item, then set its\n\t\t// value to the item. This is a little bit of overhead for every item in\n\t\t// an Iterable, but it lets us recurse easily and efficiently update Arrays\n\t\t// of TemplateResults that will be commonly returned from expressions like:\n\t\t// array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n\t\t// If value is an array, then the previous render was of an\n\t\t// iterable and value will contain the ChildParts from the previous\n\t\t// render. If value is not an array, clear this part and make a new\n\t\t// array for ChildParts.\n\t\tif (!isArray(this._$committedValue)) {\n\t\t\tthis._$committedValue = [];\n\t\t\tthis._$clear();\n\t\t}\n\n\t\t// Lets us keep track of how many items we stamped so we can clear leftover\n\t\t// items from a previous render\n\t\tconst itemParts = this._$committedValue;\n\t\tlet partIndex = 0;\n\t\tlet itemPart;\n\t\tfor (const item of value) {\n\t\t\tif (partIndex === itemParts.length) {\n\t\t\t\t// If no existing part, create a new one\n\t\t\t\t// TODO (justinfagnani): test perf impact of always creating two parts\n\t\t\t\t// instead of sharing parts between nodes\n\t\t\t\t// https://github.com/lit/lit/issues/1266\n\t\t\t\titemParts.push(\n\t\t\t\t\t(itemPart = new ChildPart(\n\t\t\t\t\t\tthis._insert(createMarker()),\n\t\t\t\t\t\tthis._insert(createMarker()),\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tthis.options,\n\t\t\t\t\t)),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// Reuse an existing part\n\t\t\t\titemPart = itemParts[partIndex];\n\t\t\t}\n\t\t\titemPart._$setValue(item);\n\t\t\tpartIndex++;\n\t\t}\n\t\tif (partIndex < itemParts.length) {\n\t\t\t// itemParts always have end nodes\n\t\t\tthis._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);\n\t\t\t// Truncate the parts array so _value reflects the current state\n\t\t\titemParts.length = partIndex;\n\t\t}\n\t}\n\n\t/**\n\t * Removes the nodes contained within this Part from the DOM.\n\t *\n\t * @param start Start node to clear from, for clearing a subset of the part's\n\t *     DOM (used when truncating iterables)\n\t * @param from  When `start` is specified, the index within the iterable from\n\t *     which ChildParts are being removed, used for disconnecting directives in\n\t *     those Parts.\n\t *\n\t * @internal\n\t */\n\t_$clear(start = wrap(this._$startNode).nextSibling, from) {\n\t\tthis._$notifyConnectionChanged?.(false, true, from);\n\t\twhile (start && start !== this._$endNode) {\n\t\t\tconst n = wrap(start).nextSibling;\n\t\t\twrap(start).remove();\n\t\t\tstart = n;\n\t\t}\n\t}\n\t/**\n\t * Implementation of RootPart's `isConnected`. Note that this method\n\t * should only be called on `RootPart`s (the `ChildPart` returned from a\n\t * top-level `render()` call). It has no effect on non-root ChildParts.\n\t * @param isConnected Whether to set\n\t * @internal\n\t */\n\tsetConnected(isConnected) {\n\t\tif (this._$parent === undefined) {\n\t\t\tthis.__isConnected = isConnected;\n\t\t\tthis._$notifyConnectionChanged?.(isConnected);\n\t\t} else if (DEV_MODE) {\n\t\t\tthrow new Error(\n\t\t\t\t\"part.setConnected() may only be called on a \" +\n\t\t\t\t\t\"RootPart returned from render().\",\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\n\nclass AttributePart {\n\ttype = ATTRIBUTE_PART;\n\n\t/**\n\t * If this attribute part represents an interpolation, this contains the\n\t * static strings of the interpolation. For single-value, complete bindings,\n\t * this is undefined.\n\t */\n\n\t/** @internal */\n\t_$committedValue = nothing;\n\t/** @internal */\n\n\t/** @internal */\n\n\t/** @internal */\n\t_$disconnectableChildren = undefined;\n\tget tagName() {\n\t\treturn this.element.tagName;\n\t}\n\n\t// See comment in Disconnectable interface for why this is a getter\n\tget _$isConnected() {\n\t\treturn this._$parent._$isConnected;\n\t}\n\tconstructor(element, name, strings, parent, options) {\n\t\tthis.element = element;\n\t\tthis.name = name;\n\t\tthis._$parent = parent;\n\t\tthis.options = options;\n\t\tif (strings.length > 2 || strings[0] !== \"\" || strings[1] !== \"\") {\n\t\t\tthis._$committedValue = new Array(strings.length - 1).fill(new String());\n\t\t\tthis.strings = strings;\n\t\t} else {\n\t\t\tthis._$committedValue = nothing;\n\t\t}\n\t\tif (ENABLE_EXTRA_SECURITY_HOOKS) {\n\t\t\tthis._sanitizer = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of this part by resolving the value from possibly multiple\n\t * values and static strings and committing it to the DOM.\n\t * If this part is single-valued, `this._strings` will be undefined, and the\n\t * method will be called with a single value argument. If this part is\n\t * multi-value, `this._strings` will be defined, and the method is called\n\t * with the value array of the part's owning TemplateInstance, and an offset\n\t * into the value array from which the values should be read.\n\t * This method is overloaded this way to eliminate short-lived array slices\n\t * of the template instance values, and allow a fast-path for single-valued\n\t * parts.\n\t *\n\t * @param value The part value, or an array of values for multi-valued parts\n\t * @param valueIndex the index to start reading values from. `undefined` for\n\t *   single-valued parts\n\t * @param noCommit causes the part to not commit its value to the DOM. Used\n\t *   in hydration to prime attribute parts with their first-rendered value,\n\t *   but not set the attribute, and in SSR to no-op the DOM operation and\n\t *   capture the value for serialization.\n\t *\n\t * @internal\n\t */\n\t_$setValue(value, directiveParent = this, valueIndex, noCommit) {\n\t\tconst strings = this.strings;\n\n\t\t// Whether any of the values has changed, for dirty-checking\n\t\tlet change = false;\n\t\tif (strings === undefined) {\n\t\t\t// Single-value binding case\n\t\t\tvalue = resolveDirective(this, value, directiveParent, 0);\n\t\t\tchange =\n\t\t\t\t!isPrimitive(value) ||\n\t\t\t\t(value !== this._$committedValue && value !== noChange);\n\t\t\tif (change) {\n\t\t\t\tthis._$committedValue = value;\n\t\t\t}\n\t\t} else {\n\t\t\t// Interpolation case\n\t\t\tconst values = value;\n\t\t\tvalue = strings[0];\n\t\t\tlet i, v;\n\t\t\tfor (i = 0; i < strings.length - 1; i++) {\n\t\t\t\tv = resolveDirective(this, values[valueIndex + i], directiveParent, i);\n\t\t\t\tif (v === noChange) {\n\t\t\t\t\t// If the user-provided value is `noChange`, use the previous value\n\t\t\t\t\tv = this._$committedValue[i];\n\t\t\t\t}\n\t\t\t\tchange ||= !isPrimitive(v) || v !== this._$committedValue[i];\n\t\t\t\tif (v === nothing) {\n\t\t\t\t\tvalue = nothing;\n\t\t\t\t} else if (value !== nothing) {\n\t\t\t\t\tvalue += (v ?? \"\") + strings[i + 1];\n\t\t\t\t}\n\t\t\t\t// We always record each value, even if one is `nothing`, for future\n\t\t\t\t// change detection.\n\t\t\t\tthis._$committedValue[i] = v;\n\t\t\t}\n\t\t}\n\t\tif (change && !noCommit) {\n\t\t\tthis._commitValue(value);\n\t\t}\n\t}\n\n\t/** @internal */\n\t_commitValue(value) {\n\t\tif (value === nothing) {\n\t\t\twrap(this.element).removeAttribute(this.name);\n\t\t} else {\n\t\t\tif (ENABLE_EXTRA_SECURITY_HOOKS) {\n\t\t\t\tif (this._sanitizer === undefined) {\n\t\t\t\t\tthis._sanitizer = sanitizerFactoryInternal(\n\t\t\t\t\t\tthis.element,\n\t\t\t\t\t\tthis.name,\n\t\t\t\t\t\t\"attribute\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tvalue = this._sanitizer(value ?? \"\");\n\t\t\t}\n\t\t\tdebugLogEvent?.({\n\t\t\t\tkind: \"commit attribute\",\n\t\t\t\telement: this.element,\n\t\t\t\tname: this.name,\n\t\t\t\tvalue,\n\t\t\t\toptions: this.options,\n\t\t\t});\n\t\t\twrap(this.element).setAttribute(this.name, value ?? \"\");\n\t\t}\n\t}\n}\nclass PropertyPart extends AttributePart {\n\ttype = PROPERTY_PART;\n\n\t/** @internal */\n\t_commitValue(value) {\n\t\tif (ENABLE_EXTRA_SECURITY_HOOKS) {\n\t\t\tif (this._sanitizer === undefined) {\n\t\t\t\tthis._sanitizer = sanitizerFactoryInternal(\n\t\t\t\t\tthis.element,\n\t\t\t\t\tthis.name,\n\t\t\t\t\t\"property\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tvalue = this._sanitizer(value);\n\t\t}\n\t\tdebugLogEvent &&\n\t\t\tdebugLogEvent({\n\t\t\t\tkind: \"commit property\",\n\t\t\t\telement: this.element,\n\t\t\t\tname: this.name,\n\t\t\t\tvalue,\n\t\t\t\toptions: this.options,\n\t\t\t});\n\n\t\tconst oldValue = this.element[this.name];\n\t\tthis.element[this.name] = value === nothing ? undefined : value;\n\n\t\t// MONKEY PATCH: for some reason, properties passed using . (<uix-test .obj=${obj}>) aren't not triggering requestUpdate when they change\n\t\tif (this.element?.requestUpdate && oldValue !== value)\n\t\t\tthis.element.requestUpdate(this.name, oldValue);\n\t}\n}\nclass BooleanAttributePart extends AttributePart {\n\ttype = BOOLEAN_ATTRIBUTE_PART;\n\n\t/** @internal */\n\t_commitValue(value) {\n\t\tdebugLogEvent?.({\n\t\t\tkind: \"commit boolean attribute\",\n\t\t\telement: this.element,\n\t\t\tname: this.name,\n\t\t\tvalue: !!(value && value !== nothing),\n\t\t\toptions: this.options,\n\t\t});\n\t\twrap(this.element).toggleAttribute(this.name, !!value && value !== nothing);\n\t}\n}\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\n\nclass EventPart extends AttributePart {\n\ttype = EVENT_PART;\n\tconstructor(element, name, strings, parent, options) {\n\t\tsuper(element, name, strings, parent, options);\n\t\tif (DEV_MODE && this.strings !== undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t`A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n\t\t\t\t\t\"invalid content. Event listeners in templates must have exactly \" +\n\t\t\t\t\t\"one expression and no surrounding text.\",\n\t\t\t);\n\t\t}\n\t}\n\n\t// EventPart does not use the base _$setValue/_resolveValue implementation\n\t// since the dirty checking is more complex\n\t/** @internal */\n\t_$setValue(newListener, directiveParent = this) {\n\t\tnewListener =\n\t\t\tresolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n\t\tif (newListener === noChange) {\n\t\t\treturn;\n\t\t}\n\t\tconst oldListener = this._$committedValue;\n\n\t\t// If the new value is nothing or any options change we have to remove the\n\t\t// part as a listener.\n\t\tconst shouldRemoveListener =\n\t\t\t(newListener === nothing && oldListener !== nothing) ||\n\t\t\tnewListener.capture !== oldListener.capture ||\n\t\t\tnewListener.once !== oldListener.once ||\n\t\t\tnewListener.passive !== oldListener.passive;\n\n\t\t// If the new value is not nothing and we removed the listener, we have\n\t\t// to add the part as a listener.\n\t\tconst shouldAddListener =\n\t\t\tnewListener !== nothing &&\n\t\t\t(oldListener === nothing || shouldRemoveListener);\n\t\tdebugLogEvent?.({\n\t\t\tkind: \"commit event listener\",\n\t\t\telement: this.element,\n\t\t\tname: this.name,\n\t\t\tvalue: newListener,\n\t\t\toptions: this.options,\n\t\t\tremoveListener: shouldRemoveListener,\n\t\t\taddListener: shouldAddListener,\n\t\t\toldListener,\n\t\t});\n\t\tif (shouldRemoveListener) {\n\t\t\tthis.element.removeEventListener(this.name, this, oldListener);\n\t\t}\n\t\tif (shouldAddListener) {\n\t\t\t// Beware: IE11 and Chrome 41 don't like using the listener as the\n\t\t\t// options object. Figure out how to deal w/ this in IE11 - maybe\n\t\t\t// patch addEventListener?\n\t\t\tthis.element.addEventListener(this.name, this, newListener);\n\t\t}\n\t\tthis._$committedValue = newListener;\n\t}\n\thandleEvent(event) {\n\t\tif (typeof this._$committedValue === \"function\") {\n\t\t\tthis._$committedValue.call(this.options?.host ?? this.element, event);\n\t\t} else {\n\t\t\tthis._$committedValue.handleEvent(event);\n\t\t}\n\t}\n}\nclass ElementPart {\n\ttype = ELEMENT_PART;\n\n\t/** @internal */\n\n\t// This is to ensure that every Part has a _$committedValue\n\n\t/** @internal */\n\n\t/** @internal */\n\t_$disconnectableChildren = undefined;\n\tconstructor(element, parent, options) {\n\t\tthis.element = element;\n\t\tthis._$parent = parent;\n\t\tthis.options = options;\n\t}\n\n\t// See comment in Disconnectable interface for why this is a getter\n\tget _$isConnected() {\n\t\treturn this._$parent._$isConnected;\n\t}\n\t_$setValue(value) {\n\t\tdebugLogEvent?.({\n\t\t\tkind: \"commit to element binding\",\n\t\t\telement: this.element,\n\t\t\tvalue,\n\t\t\toptions: this.options,\n\t\t});\n\t\tresolveDirective(this, value);\n\t}\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports mangled in the\n * client side code, we a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nconst _$LH = {\n\t// Used in lit-ssr\n\t_boundAttributeSuffix: boundAttributeSuffix,\n\t_marker: marker,\n\t_markerMatch: markerMatch,\n\t_HTML_RESULT: HTML_RESULT,\n\t_getTemplateHtml: getTemplateHtml,\n\t// Used in tests and private-ssr-support\n\t_TemplateInstance: TemplateInstance,\n\t_isIterable: isIterable,\n\t_resolveDirective: resolveDirective,\n\t_ChildPart: ChildPart,\n\t_AttributePart: AttributePart,\n\t_BooleanAttributePart: BooleanAttributePart,\n\t_EventPart: EventPart,\n\t_PropertyPart: PropertyPart,\n\t_ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n\t? global.litHtmlPolyfillSupportDevMode\n\t: global.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(global.litHtmlVersions ??= []).push(\"3.2.0\");\nif (DEV_MODE && global.litHtmlVersions.length > 1) {\n\tissueWarning(\n\t\t\"multiple-versions\",\n\t\t\"Multiple versions of Lit loaded. \" +\n\t\t\t\"Loading multiple versions is not recommended.\",\n\t);\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nconst render = (value, container, options) => {\n\tif (DEV_MODE && container == null) {\n\t\t// Give a clearer error message than\n\t\t//     Uncaught TypeError: Cannot read properties of null (reading\n\t\t//     '_$litPart$')\n\t\t// which reads like an internal Lit error.\n\t\tthrow new TypeError(`The container to render into may not be ${container}`);\n\t}\n\tconst renderId = DEV_MODE ? debugLogRenderId++ : 0;\n\tconst partOwnerNode = options?.renderBefore ?? container;\n\t// This property needs to remain unminified.\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tlet part = partOwnerNode[\"_$litPart$\"];\n\tdebugLogEvent?.({\n\t\tkind: \"begin render\",\n\t\tid: renderId,\n\t\tvalue,\n\t\tcontainer,\n\t\toptions,\n\t\tpart,\n\t});\n\tif (part === undefined) {\n\t\tconst endNode = options?.renderBefore ?? null;\n\t\t// This property needs to remain unminified.\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tpartOwnerNode[\"_$litPart$\"] = part = new ChildPart(\n\t\t\tcontainer.insertBefore(createMarker(), endNode),\n\t\t\tendNode,\n\t\t\tundefined,\n\t\t\toptions ?? {},\n\t\t);\n\t}\n\tpart._$setValue(value);\n\tdebugLogEvent?.({\n\t\tkind: \"end render\",\n\t\tid: renderId,\n\t\tvalue,\n\t\tcontainer,\n\t\toptions,\n\t\tpart,\n\t});\n\treturn part;\n};\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n\trender.setSanitizer = setSanitizer;\n\trender.createSanitizer = createSanitizer;\n\tif (DEV_MODE) {\n\t\trender._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n\t\t\t_testOnlyClearSanitizerFactoryDoNotCallOrElse;\n\t}\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for(\"\");\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value) => {\n\tif (value?.r !== brand) {\n\t\treturn undefined;\n\t}\n\treturn value?.[\"_$litStatic$\"];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nconst unsafeStatic = (value) => ({\n\t[\"_$litStatic$\"]: value,\n\tr: brand,\n});\nconst textFromStatic = (value) => {\n\tif (value[\"_$litStatic$\"] !== undefined) {\n\t\treturn value[\"_$litStatic$\"];\n\t}\n\tthrow new Error(`Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`);\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nconst literal = (strings, ...values) => ({\n\t[\"_$litStatic$\"]: values.reduce(\n\t\t(acc, v, idx) => acc + textFromStatic(v) + strings[idx + 1],\n\t\tstrings[0],\n\t),\n\tr: brand,\n});\nconst stringsCache = new Map();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nconst withStatic =\n\t(coreTag) =>\n\t(strings, ...values) => {\n\t\tconst l = values.length;\n\t\tlet staticValue;\n\t\tlet dynamicValue;\n\t\tconst staticStrings = [];\n\t\tconst dynamicValues = [];\n\t\tlet i = 0;\n\t\tlet hasStatics = false;\n\t\tlet s;\n\t\twhile (i < l) {\n\t\t\ts = strings[i];\n\t\t\t// Collect any unsafeStatic values, and their following template strings\n\t\t\t// so that we treat a run of template strings and unsafe static values as\n\t\t\t// a single template string.\n\t\t\twhile (\n\t\t\t\ti < l &&\n\t\t\t\t((dynamicValue = values[i]),\n\t\t\t\t(staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n\t\t\t) {\n\t\t\t\ts += staticValue + strings[++i];\n\t\t\t\thasStatics = true;\n\t\t\t}\n\t\t\t// If the last value is static, we don't need to push it.\n\t\t\tif (i !== l) {\n\t\t\t\tdynamicValues.push(dynamicValue);\n\t\t\t}\n\t\t\tstaticStrings.push(s);\n\t\t\ti++;\n\t\t}\n\t\t// If the last value isn't static (which would have consumed the last\n\t\t// string), then we need to add the last string.\n\t\tif (i === l) {\n\t\t\tstaticStrings.push(strings[l]);\n\t\t}\n\t\tif (hasStatics) {\n\t\t\tconst key = staticStrings.join(\"$$lit$$\");\n\t\t\tstrings = stringsCache.get(key);\n\t\t\tif (strings === undefined) {\n\t\t\t\t// Beware: in general this pattern is unsafe, and doing so may bypass\n\t\t\t\t// lit's security checks and allow an attacker to execute arbitrary\n\t\t\t\t// code and inject arbitrary content.\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\tstaticStrings.raw = staticStrings;\n\t\t\t\tstringsCache.set(key, (strings = staticStrings));\n\t\t\t}\n\t\t\tvalues = dynamicValues;\n\t\t}\n\t\treturn coreTag(strings, ...values);\n\t};\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nconst staticHTML = withStatic(html);\nconst unsafeHTML = (html) => staticHTML`${unsafeStatic(html)}`;\nconst staticSVG = withStatic(svg);\nconst unsafeSVG = (svg) => staticSVG`${unsafeStatic(svg)}`;\n\nconst helpers = {\n\tunsafeHTML,\n\tunsafeStatic,\n\tstaticHTML,\n\tstaticSVG,\n\tunsafeSVG,\n\trender,\n\thtml,\n\tliteral,\n\tsvg,\n\tcss,\n};\n\nexport function css(strings, ...values) {\n\treturn strings.reduce((acc, str, i) => acc + str + (values[i] ?? \"\"), \"\");\n}\n\nObject.assign(html, helpers);\n\nexport default html;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/model/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport T from \"/modules/types/index.js\";\n\n$APP.addModule({\n\tname: \"sysmodel\",\n\talias: \"SysModel\",\n});\n\nconst addModels = ({ context, collection = \"models\" }) => {\n\treturn ({ module }) => {\n\t\tif (!module[collection]) return;\n\t\tconst models = Object.fromEntries(\n\t\t\tObject.keys(module[collection]).map((model) => {\n\t\t\t\tconst props = {\n\t\t\t\t\tid: T.string({ primary: true }),\n\t\t\t\t\t...module[collection][model],\n\t\t\t\t};\n\t\t\t\treturn [\n\t\t\t\t\tmodel,\n\t\t\t\t\tObject.fromEntries(\n\t\t\t\t\t\tObject.entries(props).map(([key, _prop]) => {\n\t\t\t\t\t\t\tconst prop = _prop?.$ || _prop;\n\t\t\t\t\t\t\tprop.name = key;\n\t\t\t\t\t\t\tif (prop.relationship && !prop.targetForeignKey)\n\t\t\t\t\t\t\t\tprop.targetForeignKey = model;\n\t\t\t\t\t\t\treturn [key, prop];\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t];\n\t\t\t}),\n\t\t);\n\t\tcontext.set(models);\n\t};\n};\n\n$APP.addModule({\n\tname: \"models\",\n\thooks: ({ context }) => ({\n\t\tmoduleAdded: addModels({ context, collection: \"models\" }),\n\t\tmoduleUpdated: addModels({ context, collection: \"models\" }),\n\t}),\n});\n\n$APP.addModule({\n\tname: \"sysmodels\",\n\thooks: ({ context }) => ({\n\t\tmoduleAdded: addModels({ context, collection: \"sysmodels\" }),\n\t}),\n\tsettings: { APP: \"App\", USER: \"User\", DEVICE: \"Device\" },\n});\n\nconst instanceProxyHandler = {\n\tget(target, prop, receiver) {\n\t\tif (prop === \"remove\") {\n\t\t\treturn () =>\n\t\t\t\tModel.request(\"REMOVE\", target._modelName, { id: target.id });\n\t\t}\n\n\t\tif (prop === \"update\") {\n\t\t\treturn () => {\n\t\t\t\tconst cleanRow = { ...target };\n\t\t\t\tdelete cleanRow._modelName;\n\t\t\t\treturn Model.request(\"EDIT\", target._modelName, {\n\t\t\t\t\trow: cleanRow,\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\tif (prop === \"include\") {\n\t\t\treturn async (include) => {\n\t\t\t\tif (!target.id || !target._modelName) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\"Cannot run .include() on an object without an ID or model name.\",\n\t\t\t\t\t);\n\t\t\t\t\treturn receiver; // Return the proxy itself for chaining.\n\t\t\t\t}\n\n\t\t\t\tconst { models } = $APP;\n\t\t\t\tif (!(target._modelName in models))\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Model ${target._modelName} does not exist in models`,\n\t\t\t\t\t);\n\n\t\t\t\tconst model = models[target._modelName];\n\t\t\t\tconst prop = model[include];\n\t\t\t\tif (!prop)\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Relationship '${include}' not found in ${target._modelName} model`,\n\t\t\t\t\t);\n\t\t\t\tconst freshData = await Model.request(\"GET_MANY\", prop.targetModel, {\n\t\t\t\t\topts: {\n\t\t\t\t\t\tfilter: prop.belongs\n\t\t\t\t\t\t\t? target[include]\n\t\t\t\t\t\t\t: { [prop.targetForeignKey]: target.id },\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\ttarget[include] = proxifyMultipleRows(freshData, prop.targetModel);\n\n\t\t\t\treturn receiver;\n\t\t\t};\n\t\t}\n\t\treturn target[prop];\n\t},\n\n\tset(target, prop, value) {\n\t\ttarget[prop] = value;\n\t\treturn true;\n\t},\n};\n\nconst handleModelRequest = async ({ modelName, action, payload }) => {\n\tconst result = await Model.request(action, modelName, payload);\n\tif (action === \"ADD_MANY\" && result && Array.isArray(result.results)) {\n\t\tresult.results.forEach((res) => {\n\t\t\tif (res.status === \"fulfilled\" && res.value) {\n\t\t\t\tres.value = proxifyRow(res.value, modelName);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tif (action.includes(\"MANY\")) {\n\t\tif (payload.opts.object) return result;\n\t\tif (result?.items) {\n\t\t\tresult.items = proxifyMultipleRows(result.items, modelName);\n\t\t\treturn result;\n\t\t}\n\t\treturn proxifyMultipleRows(result, modelName);\n\t}\n\n\treturn proxifyRow(result, modelName);\n};\n\nconst getMethodRegistry = (modelName) => [\n\t{\n\t\ttype: \"static\",\n\t\tname: \"get\",\n\t\thandler: (id, opts = {}) =>\n\t\t\thandleModelRequest({\n\t\t\t\tmodelName,\n\t\t\t\taction: \"GET\",\n\t\t\t\tpayload: id ? { id, opts } : { opts },\n\t\t\t}),\n\t},\n\t{\n\t\ttype: \"static\",\n\t\tname: \"getAll\",\n\t\thandler: (opts = {}) =>\n\t\t\thandleModelRequest({\n\t\t\t\tmodelName,\n\t\t\t\taction: \"GET_MANY\",\n\t\t\t\tpayload: { opts },\n\t\t\t}),\n\t},\n\t{\n\t\ttype: \"static\",\n\t\tname: \"add\",\n\t\thandler: (row, opts) =>\n\t\t\thandleModelRequest({\n\t\t\t\tmodelName,\n\t\t\t\taction: \"ADD\",\n\t\t\t\tpayload: { row, opts },\n\t\t\t}),\n\t},\n\t{\n\t\ttype: \"static\",\n\t\tname: \"addMany\",\n\t\thandler: (rows, opts) =>\n\t\t\thandleModelRequest({\n\t\t\t\tmodelName,\n\t\t\t\taction: \"ADD_MANY\",\n\t\t\t\tpayload: { rows, opts },\n\t\t\t}),\n\t},\n\t{\n\t\ttype: \"static\",\n\t\tname: \"remove\",\n\t\thandler: (id) => Model.request(\"REMOVE\", modelName, { id }),\n\t},\n\t{\n\t\ttype: \"static\",\n\t\tname: \"removeAll\",\n\t\thandler: (filter) =>\n\t\t\tModel.request(\"REMOVE_MANY\", modelName, { opts: { filter } }),\n\t},\n\t{\n\t\ttype: \"static\",\n\t\tname: \"edit\",\n\t\thandler: (row) =>\n\t\t\thandleModelRequest({\n\t\t\t\tmodelName,\n\t\t\t\taction: \"EDIT\",\n\t\t\t\tpayload: { row },\n\t\t\t}),\n\t},\n\t{\n\t\ttype: \"static\",\n\t\tname: \"editAll\",\n\t\thandler: (filter, updates) =>\n\t\t\tModel.request(\"EDIT_MANY\", modelName, { opts: { filter, updates } }),\n\t},\n\n\t{ type: \"dynamic\", prefix: \"getBy\", action: \"GET\" },\n\t{ type: \"dynamic\", prefix: \"getAllBy\", action: \"GET_MANY\" },\n\t{ type: \"dynamic\", prefix: \"editAllBy\", action: \"EDIT_MANY\" },\n\t{ type: \"dynamic\", prefix: \"editBy\", action: \"EDIT\" },\n\t{ type: \"dynamic\", prefix: \"removeBy\", action: \"REMOVE\" },\n\t{ type: \"dynamic\", prefix: \"removeAllBy\", action: \"REMOVE_MANY\" },\n];\n\nconst proxifyRow = (row, modelName) => {\n\tif (!row || typeof row !== \"object\" || row.errors) return row;\n\tModel[modelName].rows[row.id] = row;\n\tModel[modelName].on(`get:${row.id}`, (data) => {\n\t\tif (data === undefined) {\n\t\t\tdelete Model[modelName].rows[row.id];\n\t\t\treturn;\n\t\t}\n\t\tconst { id, ...newRow } = data;\n\t\tObject.assign(Model[modelName].rows[row.id], newRow);\n\t});\n\trow._modelName = modelName;\n\treturn new Proxy(Model[modelName].rows[row.id], instanceProxyHandler);\n};\n\nconst proxifyMultipleRows = (rows, modelName) => {\n\tif (!Array.isArray(rows)) return rows;\n\treturn rows.map((row) => proxifyRow(row, modelName));\n};\n\nconst uncapitalize = (str) => {\n\tif (typeof str !== \"string\" || !str) return str;\n\treturn str.charAt(0).toLowerCase() + str.slice(1);\n};\n\nconst modelApiCache = new Map();\nconst Model = new Proxy(\n\t{},\n\t{\n\t\tget(target, prop, receiver) {\n\t\t\tif (prop in target) return Reflect.get(target, prop, receiver);\n\t\t\tif (modelApiCache.has(prop)) return modelApiCache.get(prop);\n\n\t\t\tconst modelName = prop;\n\t\t\tconst { models } = $APP;\n\t\t\tif (!(prop in models)) {\n\t\t\t\tthrow new Error(`Model ${modelName} does not exist in models`);\n\t\t\t}\n\t\t\tconst modelSchema = models[modelName];\n\t\t\tconst methodRegistry = getMethodRegistry(modelName, modelSchema);\n\t\t\tconst modelApi = new Proxy(\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\tget(target, methodName, modelReceiver) {\n\t\t\t\t\t\tif (methodName in target)\n\t\t\t\t\t\t\treturn Reflect.get(target, methodName, modelReceiver);\n\t\t\t\t\t\tfor (const definition of methodRegistry) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tdefinition.type === \"static\" &&\n\t\t\t\t\t\t\t\tdefinition.name === methodName\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\treturn definition.handler;\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tdefinition.type === \"dynamic\" &&\n\t\t\t\t\t\t\t\tmethodName.startsWith(definition.prefix)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst property = methodName.slice(definition.prefix.length);\n\t\t\t\t\t\t\t\tif (!property) continue;\n\n\t\t\t\t\t\t\t\tconst propertyKey = uncapitalize(property);\n\n\t\t\t\t\t\t\t\tif (!(propertyKey in modelSchema))\n\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t`Property '${propertyKey}' not found in model '${modelName}'`,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn (value, row = null) => {\n\t\t\t\t\t\t\t\t\tconst payload = {\n\t\t\t\t\t\t\t\t\t\topts: { filter: { [propertyKey]: value } },\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tif (row) payload.opts.row = row;\n\n\t\t\t\t\t\t\t\t\treturn handleModelRequest({\n\t\t\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\t\t\taction: definition.action,\n\t\t\t\t\t\t\t\t\t\tpayload,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Method '${methodName}' not found in model '${modelName}'`,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t$APP.events.install(modelApi);\n\n\t\t\tmodelApi.rows = $APP.storage.install({});\n\t\t\tmodelApiCache.set(prop, modelApi);\n\t\t\treturn modelApi;\n\t\t},\n\t},\n);\nModel.proxifyRow = proxifyRow;\nModel.proxifyMultipleRows = proxifyMultipleRows;\n\nexport default Model;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/controller/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\n$APP.addModule({\n\tname: \"controller\",\n\tpath: \"mvc/controller\",\n\talias: \"Controller\",\n\tmodules: [\"mvc/controller/backend\"],\n\tsettings: { syncKeySeparator: \"_-_\" },\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/controller/backend/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\nconst sanitize = (obj) => {\n\tif (obj === null || typeof obj !== \"object\") return obj;\n\tif (Array.isArray(obj)) return obj.map((item) => sanitize(item));\n\tconst newObj = {};\n\tfor (const key in obj) {\n\t\tif (Object.hasOwn(obj, key)) {\n\t\t\tconst value = obj[key];\n\t\t\tif (typeof value !== \"function\") newObj[key] = sanitize(value);\n\t\t}\n\t}\n\treturn newObj;\n};\n\n$APP.addModule({\n\tname: \"backend\",\n\talias: \"Backend\",\n\tpath: \"mvc/controller/backend\",\n\tbase: { sanitize },\n\tbackend: true,\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/app/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\n$APP.addModule({ name: \"app\" });\n",
    "metaType": "application/javascript"
  },
  "/modules/date/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\nconst date = {\n\tformatKey(date) {\n\t\tif (!date) return null;\n\t\tconst year = date.getFullYear();\n\t\tconst month = String(date.getMonth() + 1).padStart(2, \"0\");\n\t\tconst day = String(date.getDate()).padStart(2, \"0\");\n\t\treturn `${year}-${month}-${day}`;\n\t},\n};\n$APP.addModule({\n\tname: \"date\",\n\talias: \"Date\",\n\tbase: date,\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/apps/habits/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\n$APP.addModule({\n\tname: \"habits\",\n\tpath: \"apps/habits\",\n\tfrontend: true,\n\tbackend: true,\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/apps/habits/frontend.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport Controller from \"/modules/mvc/controller/frontend.js\";\nimport html from \"/modules/mvc/view/html/index.js\";\n\n$APP.events.on(\"INIT_APP\", () => {\n\t$APP.define(\"app-index\", {\n\t\trender() {\n\t\t\treturn html`<div class=\"max-w-6xl mx-auto p-8 flex flex-col gap-16\">\n                  <div class=\"flex flex-col gap-4\">\n                    <h1 class=\"text-6xl text-center font-bold\">\n                      <uix-icon name=\"calendar-heart\" class=\"text-4xl text-blue-600 inline-block align-middle\"></uix-icon>\n                      Habit Tracker\n\t\t\t\t\t\t\t\t\t\t</h1>\n                    <h2 class=\"text-3xl text-center font-bold\">Build better habits, one day at a time</h2>\n                  </div>\n                  <uix-card class=\"p-6 bg-white rounded-lg shadow-md flex flex-col gap-4\">\n                    <span class=\"text-2xl font-bold\">                 \n                      <uix-icon name=\"circle-plus\" class=\"text-lg text-green-600 inline-block align-middle\"></uix-icon> \n                      New Habit\n                    </span>\n                    <uix-form ._data=${{ model: \"habits\" }} ._map=${{ submit: \"$data:add\" }}>\n                      <uix-join>\n                        <uix-input name=\"name\" class=\"text-xl\"></uix-input>\n                        <uix-button label=\"ADD\" icon=\"plus\" type=\"submit\" class=\"text-xl p-3\"></uix-button>\n                      </uix-join>\n                    </uix-form>\n                  </uix-card>\n                  <uix-container      \n                    class=\"flex flex-col gap-4\"\n                    ._data=${{\n\t\t\t\t\t\t\t\t\t\t\tmodel: \"habits\",\n\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-card\",\n\t\t\t\t\t\t\t\t\t\t\tclass:\n\t\t\t\t\t\t\t\t\t\t\t\t\"p-6 bg-white rounded-lg shadow-md flex flex-col gap-4\",\n\t\t\t\t\t\t\t\t\t\t\tincludes: \"checkins,notes\",\n\t\t\t\t\t\t\t\t\t\t\tblocks: [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-list\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass: \"flex items-center justify-between\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tblocks: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-link\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass: \"text-xl font-semibold\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_map: { label: \"@parent.name\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-link\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass: \"text-red-500 hover:text-red-700\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ticon: \"trash\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfirmation:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Are you sure you want to remove habit?\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_map: { click: \"$data:remove\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-calendar\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass: \"gap-[10px]\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_map: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoggledDays: \"$map:@parent.checkins:date\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thabit: \"@parent.id\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdayContent: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-calendar-day\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-list\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass: \"flex items-center justify-between\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tblocks: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-button\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"Complete today\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_data: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: \"checkins\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethod: \"edit\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplayIf: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"@parent.checkins\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$ninc: { date: \"$today\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_map: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_row: \"$find:@parent.checkins:date=$today\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thabit: \"@parent.id\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate: \"$today\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclick: \"$data:add\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-button\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"Today Completed\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"px-4 py-2 rounded-md bg-green-600 text-white cursor-not-allowed\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_data: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: \"checkins\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethod: \"edit\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplayIf: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"@parent.checkins\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$inc: { date: \"$today\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_map: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thabit: \"@parent.id\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate: \"$today\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclick: \"$data:remove\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-modal\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ticon: \"message\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"Add notes\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_map: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcta: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-button\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ticon: \"message-square-text\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"Notes\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"px-4 py-2 rounded-md bg-gray-200 text-black hover:bg-gray-300\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-form\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass: \"flex flex-col gap-4\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_data: { model: \"notes\", method: \"add\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_map: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_row: \"$find:@parent.notes:date=$today\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thabit: \"@parent.id\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate: \"$today\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubmit: \"$data:upsert\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubmitSuccess:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$closest:uix-modal.hide\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tblocks: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-join\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tblocks: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-input\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: \"notes\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass: \"text-xl\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_map: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_row: \"$find:@parent.notes:date=$today\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: \"@notes\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag: \"uix-button\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"ADD\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ticon: \"plus\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"submit\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass: \"text-xl\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t}}> \n                  </uix-container>\n                  <uix-card class=\"p-6 bg-white rounded-lg shadow-md flex flex-col gap-4\">\n                    <span class=\"text-lg font-bold\">Your Progress</span>\n                    <uix-list class=\"flex gap-8 justify-evenly\">\n                      <uix-stat label=\"Total Habits\" ._data=${{ model: \"habits\" }} ._map=${{ value: \"$count\" }} class=\"flex flex-col bg-blue-100 p-4 rounded-lg text-center\"></uix-stat>\n                      <uix-stat label=\"Total Streaks\" value=\"5\" class=\"flex flex-col bg-blue-100 p-4 rounded-lg text-center\"></uix-stat>\n                      <uix-stat label=\"Longest Streaks\" value=\"5\" class=\"flex flex-col bg-blue-100 p-4 rounded-lg text-center\"></uix-stat>\n                    </uix-list>\n                  </uix-card>\n                </div>\n      <app-button></app-button>      \n    `;\n\t\t},\n\t});\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/controller/frontend.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport adaptersStorage from \"/modules/mvc/controller/adapter-storage.js\";\nimport adaptersUrl from \"/modules/mvc/controller/adapter-url.js\";\nimport backend from \"/modules/mvc/controller/backend/frontend.js\";\nimport View from \"/modules/mvc/view/frontend.js\";\n\nconst controllerAdapters = { ...adaptersStorage, ...adaptersUrl, backend };\n\nconst parseKey = (key) => {\n\tif (typeof key === \"string\" && key.includes(\".\")) {\n\t\tconst [storeKey, path] = key.split(\".\", 2);\n\t\treturn { storeKey, path };\n\t}\n\treturn { storeKey: key, path: null };\n};\n\nconst createAdapter = (store, storeName) => {\n\tconst adapter =\n\t\ttypeof store === \"function\"\n\t\t\t? store\n\t\t\t: (key, value) =>\n\t\t\t\t\tvalue !== undefined ? adapter.set(key, value) : adapter.get(key);\n\n\t$APP.events.install(adapter);\n\n\tconst notify = (key, value) => {\n\t\tController[storeName]?.emit(key, value);\n\t};\n\n\tadapter.get = (key) => {\n\t\tconst { storeKey, path } = parseKey(key);\n\t\tconst baseValue = store.get(storeKey);\n\t\t//console.log({ baseValue, key });\n\t\tif (path && typeof baseValue === \"object\" && baseValue !== null) {\n\t\t\treturn baseValue[path];\n\t\t}\n\t\treturn baseValue;\n\t};\n\n\tadapter.set = (key, value) => {\n\t\tconst { storeKey, path } = parseKey(key);\n\t\tif (path) {\n\t\t\tconst baseObject = store.get(storeKey) || {};\n\t\t\tconst newValue = { ...baseObject, [path]: value };\n\n\t\t\tstore.set(storeKey, newValue);\n\t\t\tnotify(storeKey, newValue);\n\t\t\treturn newValue;\n\t\t}\n\t\tstore.set(storeKey, value);\n\t\tnotify(storeKey, value);\n\t\treturn value;\n\t};\n\n\tadapter.remove = (key) => {\n\t\tconst { storeKey, path } = parseKey(key);\n\t\tif (path) {\n\t\t\tconst baseObject = store.get(storeKey);\n\t\t\tif (typeof baseObject === \"object\" && baseObject !== null) {\n\t\t\t\tdelete baseObject[path];\n\t\t\t\tstore.set(storeKey, baseObject);\n\t\t\t\tnotify(storeKey, baseObject);\n\t\t\t}\n\t\t\treturn { key: storeKey };\n\t\t}\n\t\tstore.remove(storeKey);\n\t\tnotify(storeKey, undefined);\n\t\treturn { key: storeKey };\n\t};\n\n\tadapter.has = store.has;\n\tadapter.keys = store.keys;\n\tadapter.entries = store.entries;\n\n\tadapterCache.set(storeName, adapter);\n\treturn adapter;\n};\n\nconst adapterCache = new Map();\n\nconst Controller = new Proxy(\n\t{},\n\t{\n\t\tget(target, prop) {\n\t\t\tif (prop in target) return target[prop];\n\t\t\tif (adapterCache.has(prop)) return adapterCache.get(prop);\n\t\t\tif (prop in controllerAdapters)\n\t\t\t\treturn createAdapter(controllerAdapters[prop], prop);\n\t\t\tif ($APP.mv3Connections?.includes(prop)) {\n\t\t\t\treturn (type, payload = {}) => {\n\t\t\t\t\tconst backendAdapter =\n\t\t\t\t\t\tadapterCache.get(\"backend\") ||\n\t\t\t\t\t\tcreateAdapter(controllerAdapters.backend, \"backend\");\n\t\t\t\t\treturn backendAdapter(type, payload, prop);\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\t},\n);\n\nconst init = () => {\n\tconst syncUrlAdapter = (adapterName) => {\n\t\tconst adapter = Controller[adapterName];\n\t\tconst newEntries = new Map(adapter.entries());\n\t\tconst oldKeys = new Set(adapter.listeners.keys());\n\n\t\tnewEntries.forEach((value, key) => {\n\t\t\tadapter.emit(key, value);\n\t\t\toldKeys.delete(key);\n\t\t});\n\n\t\toldKeys.forEach((key) => adapter.emit(key, undefined));\n\t};\n\n\twindow.addEventListener(\"popstate\", () => {\n\t\tsyncUrlAdapter(\"querystring\");\n\t\tsyncUrlAdapter(\"hash\");\n\t});\n};\n\n$APP.hooks.add(\"init\", init);\n\nconst getScopedKey = (baseKey, prop, instance) => {\n\tif (prop.scope) {\n\t\tif (prop.scope.includes(\".\")) {\n\t\t\tconst [obj, objProp] = prop.scope.split(\".\");\n\t\t\tif (instance[obj]?.[objProp])\n\t\t\t\treturn `${instance[obj]?.[objProp]}:${baseKey}`;\n\t\t}\n\n\t\tif (instance[prop.scope]) return `${instance[prop.scope]}:${baseKey}`;\n\t}\n\treturn baseKey;\n};\n\nView.plugins.push({\n\tevent: \"connectedCallback\",\n\ttest: ({ component }) => !!component.properties,\n\tfn: ({ instance, component }) => {\n\t\tif (!component.properties) return;\n\t\tObject.entries(component.properties)\n\t\t\t.filter(([, prop]) => prop.sync)\n\t\t\t.forEach(([key, prop]) => {\n\t\t\t\tconst adapter = Controller[prop.sync];\n\t\t\t\tif (!adapter) return;\n\n\t\t\t\tconst scopedKey = getScopedKey(key, prop, instance);\n\t\t\t\tconst initialValue = adapter.get(scopedKey);\n\n\t\t\t\tconst eventFn = (value) => {\n\t\t\t\t\tinstance.state[key] = value;\n\t\t\t\t\tinstance.requestUpdate();\n\t\t\t\t};\n\n\t\t\t\tif (!instance._listeners) instance._listeners = {};\n\t\t\t\tif (!instance._listeners[prop.sync])\n\t\t\t\t\tinstance._listeners[prop.sync] = {};\n\t\t\t\tinstance._listeners[prop.sync][scopedKey] = eventFn;\n\n\t\t\t\tif (!Object.getOwnPropertyDescriptor(instance, key)) {\n\t\t\t\t\tObject.defineProperty(instance, key, {\n\t\t\t\t\t\tget: () => instance.state[key],\n\t\t\t\t\t\tset: (newValue) => {\n\t\t\t\t\t\t\tif (instance.state[key] === newValue) return;\n\t\t\t\t\t\t\tinstance.state[key] = newValue;\n\t\t\t\t\t\t\tif (newValue !== adapter.get(scopedKey)) {\n\t\t\t\t\t\t\t\tadapter.set(scopedKey, newValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tadapter.on(scopedKey, eventFn);\n\t\t\t\teventFn(initialValue ?? prop.defaultValue);\n\t\t\t});\n\t},\n});\n\nView.plugins.push({\n\tevent: \"disconnectedCallback\",\n\ttest: ({ component }) => !!component._listeners,\n\tfn: ({ instance }) => {\n\t\tif (!instance._listeners) return;\n\t\tObject.entries(instance._listeners).forEach(([adapterName, fns]) => {\n\t\t\tconst adapter = Controller[adapterName];\n\t\t\tif (adapter)\n\t\t\t\tObject.entries(fns).forEach(([key, fn]) => adapter.off(key, fn));\n\t\t});\n\t},\n});\n\nexport default Controller;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/controller/adapter-storage.js": {
    "content": "const serialize = (value) => {\n\tif ((typeof value === \"object\" && value !== null) || Array.isArray(value)) {\n\t\treturn JSON.stringify(value);\n\t}\n\treturn value;\n};\n\nconst deserialize = (value) => {\n\ttry {\n\t\treturn JSON.parse(value);\n\t} catch {\n\t\treturn value;\n\t}\n};\n\nconst get = (storage) => (key) => {\n\tconst value = storage.getItem(key);\n\treturn value !== null ? deserialize(value) : null;\n};\n\nconst set = (storage) => (key, value) => {\n\tstorage.setItem(key, serialize(value));\n\treturn { key };\n};\n\nconst remove = (storage) => (key) => {\n\tstorage.removeItem(key);\n\treturn { key };\n};\nconst keys = (storage) => () => {\n\treturn Object.keys(storage);\n};\n\nconst has = (storage) => (key) => {\n\treturn storage.getItem(key) !== null && storage.getItem(key) !== undefined;\n};\n\nconst createStorageAdapter = (storage) => {\n\treturn {\n\t\thas: has(storage),\n\t\tset: set(storage),\n\t\tremove: remove(storage),\n\t\tget: get(storage),\n\t\tkeys: keys(storage),\n\t};\n};\n\nconst ramStore = new Map();\nconst ram = {\n\thas: (key) => {\n\t\treturn ramStore.has(key);\n\t},\n\tget: (key) => {\n\t\treturn ramStore.get(key);\n\t},\n\tset: (key, value) => {\n\t\tramStore.set(key, value);\n\t\treturn { key };\n\t},\n\tremove: (key) => {\n\t\tramStore.delete(key);\n\t\treturn { key };\n\t},\n\tkeys: () => ramStore.keys(),\n};\n\nconst local = createStorageAdapter(window.localStorage);\nconst session = createStorageAdapter(window.sessionStorage);\n\nexport default { local, ram, session };\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/controller/backend/frontend.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport Blocks from \"/modules/blocks/index.js\";\nimport Model from \"/modules/mvc/model/frontend.js\";\nimport View from \"/modules/mvc/view/frontend.js\";\nimport Loader from \"/modules/mvc/view/loader/index.js\";\n\nlet appWorker;\nlet wwPort;\nlet swPort;\nconst pendingRequests = {};\nconst pendingSWRequests = {};\n\nconst handleWWMessage = async (message = {}) => {\n\tconst { data } = message;\n\tconst { eventId, type, payload, connection } = data;\n\tconst handler = $APP.events[type];\n\tlet response = payload;\n\n\tconst respond =\n\t\teventId &&\n\t\t((responsePayload) =>\n\t\t\twwPort.postMessage({\n\t\t\t\teventId,\n\t\t\t\tpayload: responsePayload,\n\t\t\t\tconnection,\n\t\t\t}));\n\n\tif (handler) response = await handler({ respond, payload, eventId });\n\n\tif (eventId && pendingRequests[eventId]) {\n\t\ttry {\n\t\t\tpendingRequests[data.eventId].resolve(response);\n\t\t} catch (error) {\n\t\t\tpendingRequests[data.eventId].reject(new Error(error));\n\t\t} finally {\n\t\t\tdelete pendingRequests[eventId];\n\t\t}\n\t\treturn;\n\t}\n\n\tif (respond) return respond(response);\n};\n\nconst handleSWMessage = async (message = {}) => {\n\tconst { data } = message;\n\tconst { eventId, type, payload } = data;\n\tconsole.log({ eventId, type, payload });\n\tif (eventId && pendingSWRequests[eventId]) {\n\t\ttry {\n\t\t\tpendingSWRequests[eventId].resolve(payload);\n\t\t} catch (error) {\n\t\t\tpendingSWRequests[eventId].reject(new Error(error));\n\t\t} finally {\n\t\t\tdelete pendingSWRequests[eventId];\n\t\t}\n\t\treturn;\n\t}\n\n\tconst handler = $APP.swEvents[type];\n\tif (handler) await handler({ payload });\n};\n\nconst initBackend = async () => {\n\tappWorker = new Worker(\n\t\t`/worker.js?project=${encodeURIComponent(JSON.stringify($APP.settings))}`,\n\t\t{ type: \"module\" },\n\t);\n\n\tconst wwChannel = new MessageChannel();\n\twwPort = wwChannel.port1;\n\twwPort.onmessage = handleWWMessage;\n\tappWorker.postMessage({ type: \"INIT_PORT\" }, [wwChannel.port2]);\n\n\tconst { user, device, app } = await backend(\"INIT_APP\");\n\t$APP.models.set(app.models);\n\t$APP.events.emit(\"INIT_APP\", { user, device, app });\n\t$APP.about = { user, device, app };\n\n\tawait navigator.storage.persist();\n\n\tconst swChannel = new MessageChannel();\n\tswPort = swChannel.port1;\n\tswPort.onmessage = handleSWMessage;\n\n\tconst initSWPort = () => {\n\t\tif (navigator.serviceWorker.controller) {\n\t\t\tnavigator.serviceWorker.controller.postMessage({ type: \"INIT_PORT\" }, [\n\t\t\t\tswChannel.port2,\n\t\t\t]);\n\t\t}\n\t};\n\n\tinitSWPort();\n\tnavigator.serviceWorker.addEventListener(\"controllerchange\", initSWPort);\n};\n\nconst postMessageToPort = (port, params, retryFn) => {\n\tif (!port) {\n\t\tsetTimeout(() => retryFn(params), 100);\n\t\treturn;\n\t}\n\tport.postMessage(params);\n};\n\nconst postMessageToSW = (params) =>\n\tpostMessageToPort(swPort, params, postMessageToSW);\nconst postMessageToWW = (params) =>\n\tpostMessageToPort(wwPort, params, postMessageToWW);\n\nconst requestToSW = (type, payload = {}) => {\n\tconst eventId =\n\t\tDate.now().toString() + Math.random().toString(36).substr(2, 9);\n\treturn new Promise((resolve, reject) => {\n\t\tpendingSWRequests[eventId] = { resolve, reject };\n\t\tpostMessageToSW({ type, payload, eventId });\n\t});\n};\n\n$APP.addModule({\n\tname: \"SW\",\n\tbase: { postMessage: postMessageToSW, request: requestToSW },\n});\n\nconst backend = (type, payload = {}, connection = null) => {\n\tconst eventId =\n\t\tDate.now().toString() + Math.random().toString(36).substr(2, 9);\n\tconst params = { type, payload, eventId };\n\treturn new Promise((resolve, reject) => {\n\t\tif (connection) params.connection = connection;\n\t\tpendingRequests[eventId] = { resolve, reject };\n\t\tpostMessageToWW(params);\n\t});\n};\n\n$APP.hooks.add(\"init\", initBackend);\n\nconst requestDataSync = ({ instance }) => {\n\tconst {\n\t\tid,\n\t\tmodel,\n\t\tlimit,\n\t\toffset = 0,\n\t\tincludes,\n\t\trecursive,\n\t\torder,\n\t\tfilter,\n\t} = instance._data;\n\tconst method = (instance._data.method ?? id) ? \"get\" : \"getMany\";\n\tconst opts = { limit, offset, order, recursive };\n\n\tif (filter && Object.keys(filter).length > 0)\n\t\topts.filter = DisplayHandler.resolveObject(filter, instance);\n\tif (includes)\n\t\topts.includes = Array.isArray(includes) ? includes : includes.split(\",\");\n\n\tconst onDataLoaded = (results) => {\n\t\tif (method.toLowerCase() === \"get\") {\n\t\t\tinstance._row = results;\n\t\t} else {\n\t\t\tinstance._rows = results.items ?? results;\n\t\t\tif (results.count) instance._data.count = results.count;\n\t\t}\n\t\tinstance.requestUpdate();\n\t\tinstance.emit(\"dataLoaded\", { instance, component: instance.constructor });\n\t};\n\n\tif (method.toLowerCase() === \"get\") {\n\t\tModel[model].get(id, opts).then(onDataLoaded);\n\t} else {\n\t\tModel[model].getAll(opts).then(onDataLoaded);\n\t}\n};\n\nconst argsFn = ({ value, ...context }) => {\n\tconst [, ...args] = value.split(\":\");\n\treturn args.map((arg) =>\n\t\tDisplayHandler.resolveValue({ ...context, value: arg }),\n\t);\n};\n\nconst componentsFunctions = {\n\t$find: (context) => {\n\t\tconst [sourceArray, condition] = argsFn(context);\n\t\tif (!Array.isArray(sourceArray) || !condition) return;\n\t\tlet [key, value] = condition.split(\"=\");\n\t\tvalue = DisplayHandler.resolveValue({ ...context, value });\n\t\tif (!key || value === undefined) return;\n\t\treturn sourceArray.find((item) => String(item[key]) === String(value));\n\t},\n\t$boolean: (context) => {\n\t\tconst [source] = argsFn(context);\n\t\tconst value = DisplayHandler.resolveValue({ ...context, value: source });\n\t\treturn Boolean(value);\n\t},\n\t$filter: (context) => {\n\t\tconst [sourceArray, condition] = argsFn(context);\n\t\tif (!Array.isArray(sourceArray) || !condition) return [];\n\t\tconst [key, value] = condition.split(\"=\");\n\t\tif (!key || value === undefined) return [];\n\t\treturn sourceArray.filter((item) => String(item[key]) === String(value));\n\t},\n\t$includes: (context) => {\n\t\tconst [sourceArray, condition] = argsFn(context);\n\t\tif (!Array.isArray(sourceArray) || !condition) return false;\n\t\tconst [key, value] = condition.split(\"=\");\n\t\tif (!key || value === undefined) return false;\n\t\treturn sourceArray.some((item) => String(item[key]) === String(value));\n\t},\n\t$map: (context) => {\n\t\tconst mapFn = (ctx) => {\n\t\t\tconst [sourceArray, key] = argsFn(ctx);\n\t\t\tif (!Array.isArray(sourceArray) || !key) return [];\n\t\t\treturn sourceArray.map((row) => row[key]);\n\t\t};\n\t\tconst willUpdate =\n\t\t\t({ instance, prop }) =>\n\t\t\t() => {\n\t\t\t\tinstance[prop] = mapFn(context);\n\t\t\t\tinstance.requestUpdate();\n\t\t\t};\n\t\treturn mapFn({ ...context, willUpdate });\n\t},\n\t$count: ({ instance }) => instance?._rows?.count ?? instance?._rows?.length,\n\t$now: () => Date.now(),\n\t$data: (context) => {\n\t\tconst { value, prop, instance } = context;\n\t\tconst [, event] = value.split(\":\");\n\t\tif (!componentsEvents.data[event]) return;\n\t\tconst eventFn = componentsEvents.data[event];\n\t\tconst _data = instance._data || instance.closest(\"[_data]\")?._data || {};\n\t\tconst fn = eventFn({ ..._data, instance });\n\t\tif (prop.startsWith(\"on\")) instance[prop] = fn;\n\t\treturn fn;\n\t},\n\t$closest: ({ value, instance }) => {\n\t\tconst [element, fn] = value.slice(9).split(\".\");\n\t\tconst node = instance.closest(element);\n\t\treturn node[fn].bind(node);\n\t},\n\t$query: (context) => {\n\t\tconst { value } = context;\n\t\tif (value.startsWith(\"@parent\"))\n\t\t\treturn componentsFunctions.$parent(context);\n\t\tif (value.startsWith(\"@\")) return componentsFunctions.$row(context);\n\t},\n\t$row: ({ value, instance }) => {\n\t\tconst parent = instance.closest(\"[_row]\");\n\t\tconst row = instance._row ?? parent?._row ?? {};\n\t\treturn value === \"@\" ? row : row[value.slice(1)];\n\t},\n\t$parent: ({ value, instance, prop, willUpdate }) => {\n\t\tconst [, key] = value.split(\".\");\n\t\tconst parent = instance.parentElement.closest(\"[_row]\");\n\t\tif (!parent && !instance._parentListener) return;\n\t\tif (!instance._parentListener) {\n\t\t\tinstance._parentListener = parent;\n\t\t\tif (willUpdate) parent.on(\"willUpdate\", willUpdate({ prop, instance }));\n\t\t}\n\t\tconst row = instance._parentListener._row || {};\n\t\treturn key ? row[key] : row;\n\t},\n\t$today: () => new Date().toISOString().split(\"T\")[0],\n\t$todayLocale: () =>\n\t\tnew Intl.DateTimeFormat(undefined, { dateStyle: \"short\" }).format(\n\t\t\tnew Date(),\n\t\t),\n\t$currentTime: () =>\n\t\tnew Intl.DateTimeFormat(undefined, {\n\t\t\thour: \"2-digit\",\n\t\t\tminute: \"2-digit\",\n\t\t\tsecond: \"2-digit\",\n\t\t}).format(new Date()),\n\t$currentDay: () => new Date().getDate(),\n\t$currentMonth: () => new Date().getMonth() + 1,\n\t$currentYear: () => new Date().getFullYear(),\n\t$currentHour: () => new Date().getHours(),\n\t$timeAgo: ({ value }) => {\n\t\tif (!value) return \"\";\n\t\tconst rtf = new Intl.RelativeTimeFormat(undefined, { numeric: \"auto\" });\n\t\tconst seconds = (new Date(value).getTime() - Date.now()) / 1000;\n\t\tconst time = {\n\t\t\tyear: 31536000,\n\t\t\tmonth: 2592000,\n\t\t\tweek: 604800,\n\t\t\tday: 86400,\n\t\t\thour: 3600,\n\t\t\tminute: 60,\n\t\t};\n\t\tfor (const unit in time) {\n\t\t\tconst interval = seconds / time[unit];\n\t\t\tif (Math.abs(interval) > 1) return rtf.format(Math.round(interval), unit);\n\t\t}\n\t\treturn rtf.format(seconds, \"second\");\n\t},\n};\n\nconst DisplayHandler = {\n\toperators: {\n\t\t$eq: (s, p) => s === p,\n\t\t$neq: (s, p) => s !== p,\n\t\t$exists: (s) => s != null,\n\t\t$nexists: (s) => s == null,\n\t\t$gt: (s, p) => Number(s) > Number(p),\n\t\t$inc: (s, p) => {\n\t\t\tif (!Array.isArray(s)) return false;\n\t\t\tconst [key, value] = Object.entries(p)[0];\n\t\t\treturn s.some((item) => item && item[key] === value);\n\t\t},\n\t\t$ninc: (s, p) => {\n\t\t\tif (!Array.isArray(s)) return true;\n\t\t\tconst [key, value] = Object.entries(p)[0];\n\t\t\treturn !s.some((item) => item && item[key] === value);\n\t\t},\n\t},\n\tresolveObject(object, instance) {\n\t\treturn Object.fromEntries(\n\t\t\tObject.entries(object).map(([prop, value]) => [\n\t\t\t\tprop,\n\t\t\t\tDisplayHandler.resolveValue({ prop, value, instance }),\n\t\t\t]),\n\t\t);\n\t},\n\tresolveValue(context) {\n\t\tconst { value } = context;\n\t\tif (typeof value === \"object\" && value.tag) {\n\t\t\tconst block = {\n\t\t\t\t...value,\n\t\t\t\tproperties: { ...(value.properties || {}) },\n\t\t\t};\n\t\t\treturn value.function\n\t\t\t\t? (args = {}) => {\n\t\t\t\t\t\tblock.properties = { ...block.properties, ...args };\n\t\t\t\t\t\treturn Blocks.render({ block });\n\t\t\t\t\t}\n\t\t\t\t: Blocks.render({ block });\n\t\t}\n\t\tif (typeof value !== \"string\") return value;\n\t\tif (value.startsWith(\"@\")) return componentsFunctions.$query(context);\n\t\tif (value.startsWith(\"$\")) {\n\t\t\tconst [fn] = value.split(\":\");\n\t\t\treturn componentsFunctions[fn]?.(context);\n\t\t}\n\t\treturn value;\n\t},\n\tresolveParams(params, context) {\n\t\tif (typeof params !== \"object\" || params === null)\n\t\t\treturn this.resolveValue({ ...context, value: params });\n\t\tconst resolved = {};\n\t\tfor (const key in params) {\n\t\t\tresolved[key] = this.resolveValue({ ...context, value: params[key] });\n\t\t}\n\t\treturn resolved;\n\t},\n\tevaluate(rules, context) {\n\t\tfor (const subjectStr in rules) {\n\t\t\tconst condition = rules[subjectStr];\n\t\t\tconst subject = this.resolveValue({ ...context, value: subjectStr });\n\t\t\tfor (const operator in condition) {\n\t\t\t\tif (!this.operators[operator]) continue;\n\t\t\t\tconst rawParams = condition[operator];\n\t\t\t\tconst resolvedParams = this.resolveParams(rawParams, context);\n\t\t\t\tif (!this.operators[operator](subject, resolvedParams)) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t},\n};\n\nconst componentsEvents = {\n\tdata: {\n\t\t_prepareRow(model, instance) {\n\t\t\tconst modelProps = $APP.models[model];\n\t\t\tif (!modelProps) return;\n\t\t\tif (!instance._row) instance._row = {};\n\t\t\tinstance\n\t\t\t\t.qa(\".uix-input\")\n\t\t\t\t.forEach((input) => (instance._row[input.name] = input.inputValue()));\n\t\t\tconst row = { ...instance._row };\n\t\t\tObject.keys(row).forEach((prop) => {\n\t\t\t\tif (prop !== \"id\" && modelProps[prop] === undefined) delete row[prop];\n\t\t\t});\n\t\t\treturn row;\n\t\t},\n\t\trender() {\n\t\t\tconst { model, tag, blocks, properties = {} } = this._data;\n\t\t\tconst rows = this._rows ?? (this._row ? [this._row] : null);\n\t\t\tif (!rows) return;\n\t\t\treturn rows.map((row) =>\n\t\t\t\tBlocks.render({\n\t\t\t\t\trow,\n\t\t\t\t\tblock: {\n\t\t\t\t\t\ttag,\n\t\t\t\t\t\tblocks,\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tclass: this._data.class,\n\t\t\t\t\t\t\t_data: { model, id: row.id },\n\t\t\t\t\t\t\t_row: row,\n\t\t\t\t\t\t\t...properties,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t\tremove:\n\t\t\t({ model, id, instance }) =>\n\t\t\t() =>\n\t\t\t\tid\n\t\t\t\t\t? Model[model].remove(id)\n\t\t\t\t\t: Model[model].removeAll(\n\t\t\t\t\t\t\tcomponentsEvents.data._prepareRow(model, instance),\n\t\t\t\t\t\t),\n\t\tadd:\n\t\t\t({ model, instance }) =>\n\t\t\tasync () => {\n\t\t\t\tconst rowData = componentsEvents.data._prepareRow(model, instance);\n\t\t\t\tif (!rowData) return;\n\t\t\t\tconst res = await Model[model].add(rowData);\n\t\t\t\tif (res?.id) instance._row.id = res.id;\n\t\t\t},\n\t\tedit:\n\t\t\t({ model, instance }) =>\n\t\t\tasync () => {\n\t\t\t\tconst rowData = componentsEvents.data._prepareRow(model, instance);\n\t\t\t\tif (rowData?.id) await Model[model].edit(rowData);\n\t\t\t},\n\t\tupsert:\n\t\t\t({ model, instance }) =>\n\t\t\tasync () => {\n\t\t\t\tconst rowData = componentsEvents.data._prepareRow(model, instance);\n\t\t\t\tif (!rowData) return;\n\t\t\t\tif (rowData.id) {\n\t\t\t\t\tawait Model[model].edit(rowData);\n\t\t\t\t} else {\n\t\t\t\t\tconst res = await Model[model].add(rowData);\n\t\t\t\t\tif (res?.id) instance._row.id = res.id;\n\t\t\t\t}\n\t\t\t},\n\t},\n};\n\nView.plugins.push({\n\tevent: \"connectedCallback\",\n\ttest: ({ instance }) => !!instance._data?.displayIf,\n\tfn: ({ instance }) => {\n\t\tconst { displayIf } = instance._data;\n\t\tconst evaluate = () =>\n\t\t\tinstance.classList.toggle(\n\t\t\t\t\"hide\",\n\t\t\t\t!DisplayHandler.evaluate(displayIf, context),\n\t\t\t);\n\t\tconst context = { instance, row: instance._row, listener: evaluate };\n\t\tevaluate();\n\t\tinstance.on(\"dataLoaded\", evaluate);\n\t},\n});\n\nconst instanceMapProperties = ({ instance }) => {\n\tfor (const [propKey, value] of Object.entries(instance._map)) {\n\t\tif (!propKey || !value) continue;\n\t\tconst resolvedValue = DisplayHandler.resolveValue({\n\t\t\tvalue,\n\t\t\tinstance,\n\t\t\tprop: propKey,\n\t\t});\n\t\tinstance.state[propKey] = resolvedValue;\n\t\tconst prop = instance.constructor.properties[propKey];\n\t\tif (prop?.attribute && propKey !== \"_row\") {\n\t\t\tinstance.updateAttribute({\n\t\t\t\tkey: propKey,\n\t\t\t\tvalue: resolvedValue,\n\t\t\t\ttype: prop.type,\n\t\t\t\tskipPropUpdate: true,\n\t\t\t});\n\t\t}\n\t\tif (!instance.state._row) instance.state._row = {};\n\t\tinstance.state._row[propKey] = resolvedValue;\n\t}\n};\n\nView.plugins.push({\n\tevent: \"connectedCallback\",\n\ttest: ({ instance }) =>\n\t\tinstance?._data?.model &&\n\t\t![\"add\", \"edit\", \"remove\"].includes(instance?._data?.method),\n\tfn: ({ instance }) => {\n\t\tinstance._listeners = {};\n\t\tif (instance._data.tag) {\n\t\t\tinstance.on(\"dataLoaded\", () => {\n\t\t\t\tif (!instance._updatedRender) {\n\t\t\t\t\tinstance.render = componentsEvents.data.render.bind(instance);\n\t\t\t\t\tinstance._updatedRender = true;\n\t\t\t\t}\n\t\t\t\tinstance.requestUpdate();\n\t\t\t});\n\t\t}\n\n\t\tconst { model, id } = instance._data;\n\t\tconst row = instance._row;\n\n\t\tif (row && !id) {\n\t\t\tinstance._data.id = row.id;\n\t\t}\n\t\tif ((row && !id) || instance._rows) {\n\t\t\tinstance.emit(\"dataLoaded\", {\n\t\t\t\tinstance,\n\t\t\t\tcomponent: instance.constructor,\n\t\t\t});\n\t\t}\n\n\t\tconst modelRows = Model[model]?.rows;\n\t\tif (!modelRows) return;\n\n\t\tif (id) {\n\t\t\tconst listenerKey = `get:${id}`;\n\t\t\tif (row !== undefined && modelRows[id] === undefined) {\n\t\t\t\tmodelRows[id] = row;\n\t\t\t}\n\t\t\tinstance._listeners[listenerKey] = () => {\n\t\t\t\tinstance._row = modelRows[id];\n\t\t\t\tinstance.requestUpdate();\n\t\t\t};\n\t\t\tModel[model].on(listenerKey, instance._listeners[listenerKey]);\n\t\t} else {\n\t\t\tinstance._listeners.any = () => requestDataSync({ instance });\n\t\t\tModel[model].onAny(instance._listeners.any);\n\t\t}\n\n\t\tif (!instance._row && !instance._rows) requestDataSync({ instance });\n\t\tinstance.syncable = true;\n\t},\n});\n\nView.plugins.push({\n\tevent: \"connectedCallback\",\n\ttest: ({ instance }) => !!instance._map,\n\tfn: ({ instance }) => {\n\t\tconst container = instance.parentElement.closest(\"[_data]\");\n\t\tif (!container) return;\n\t\tcontainer.on(\"dataLoaded\", () => {\n\t\t\tinstanceMapProperties({ instance });\n\t\t\tinstance.requestUpdate();\n\t\t});\n\t},\n});\n\nView.plugins.push({\n\tevent: \"willUpdate\",\n\ttest: ({ instance }) => !!instance._map,\n\tfn() {\n\t\tinstanceMapProperties({ instance: this });\n\t},\n});\n\nView.plugins.push({\n\tevent: \"disconnectedCallback\",\n\ttest: ({ instance }) => instance.syncable,\n\tfn: ({ instance }) => {\n\t\tObject.entries(instance._listeners).forEach(([key, listener]) => {\n\t\t\tif (key === \"any\") Model[instance._data.model].offAny(listener);\n\t\t\telse Model[instance._data.model].off(key, listener);\n\t\t});\n\t},\n});\n\n$APP.events.set({\n\tBROADCAST: (payload) => {},\n\tUPDATE_MODELS: ({ payload: { models } }) => $APP.models.set(models),\n\tREQUEST_DATA_SYNC: ({ payload: { model, key, data } }) => {\n\t\tconsole.log({ key, model, data });\n\t\tModel[model].emit(key, data);\n\t},\n});\n\nexport default backend;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/controller/adapter-url.js": {
    "content": "const getHashParams = () => {\n\tconst hash = window.location.hash.substring(1);\n\treturn new URLSearchParams(hash);\n};\n\nconst setHashParams = (params) => {\n\tconst newHash = params.toString();\n\twindow.location.hash = newHash;\n};\n\nconst hash = {\n\tget: (key) => {\n\t\tconst params = getHashParams();\n\t\treturn params.get(key);\n\t},\n\thas: (key) => {\n\t\tconst params = getHashParams();\n\t\treturn params.has(key);\n\t},\n\tset: (key, value) => {\n\t\tconst params = getHashParams();\n\t\tparams.set(key, value);\n\t\tsetHashParams(params);\n\t\twindow.dispatchEvent(new Event(\"popstate\"));\n\t\treturn { key };\n\t},\n\tremove: (key) => {\n\t\tconst params = getHashParams();\n\t\tparams.delete(key);\n\t\tsetHashParams(params);\n\t\treturn { key };\n\t},\n\tkeys: () => {\n\t\tconst params = getHashParams();\n\t\treturn [...params.keys()];\n\t},\n\tentries: () => {\n\t\tconst params = getHashParams();\n\t\treturn [...params.entries()];\n\t},\n};\n\nconst querystring = {\n\tget(key) {\n\t\tconst params = new URLSearchParams(window.location.search);\n\t\treturn params.get(key);\n\t},\n\n\tset(key, value) {\n\t\tconst params = new URLSearchParams(window.location.search);\n\t\tparams.set(key, value);\n\t\twindow.history?.pushState?.(\n\t\t\t{},\n\t\t\t\"\",\n\t\t\t`${window.location.pathname}?${params}`,\n\t\t);\n\t\twindow.dispatchEvent(new Event(\"popstate\"));\n\t\treturn { key };\n\t},\n\n\tremove(key) {\n\t\tconst params = new URLSearchParams(window.location.search);\n\t\tparams.delete(key);\n\t\twindow.history.pushState?.({}, \"\", `${window.location.pathname}?${params}`);\n\t\treturn { key };\n\t},\n\tkeys() {\n\t\tconst params = new URLSearchParams(window.location.search);\n\t\treturn [...params.keys()];\n\t},\n\thas(key) {\n\t\tconst params = new URLSearchParams(window.location.search);\n\t\treturn params.has(key);\n\t},\n\tentries: () => {\n\t\tconst params = new URLSearchParams(window.location.search);\n\t\treturn [...params.entries()];\n\t},\n};\n\nexport default { querystring, hash };\n",
    "metaType": "application/javascript"
  },
  "/modules/blocks/index.js": {
    "content": "import { keyed as keyedDirective } from \"/modules/mvc/view/html/directive.js\";\nimport htmlModule from \"/modules/mvc/view/html/index.js\";\nimport spread from \"/modules/mvc/view/html/spread.js\";\n\nconst { unsafeStatic, staticHTML: html } = htmlModule;\n\nfunction parse(htmlString) {\n\tconst parser = new DOMParser();\n\tconst doc = parser.parseFromString(htmlString, \"text/html\");\n\n\tfunction parseValue(value) {\n\t\tif (value === \"\" || value.toLowerCase() === \"true\") return true;\n\t\tif (value.toLowerCase() === \"false\") return false;\n\t\tif (value.trim() !== \"\" && !Number.isNaN(Number(value))) {\n\t\t\treturn Number(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tfunction elementToBlock(element) {\n\t\tconst properties = {};\n\t\tfor (const attr of element.attributes) {\n\t\t\tproperties[attr.name] = parseValue(attr.value);\n\t\t}\n\n\t\tconst block = {\n\t\t\ttag: element.tagName.toLowerCase(),\n\t\t\tproperties: properties,\n\t\t\tblocks: Array.from(element.children).map(elementToBlock),\n\t\t};\n\n\t\treturn block;\n\t}\n\treturn Array.from(doc.body.children).map(elementToBlock);\n}\n\nfunction render({ block, row, filter, keyed = true }) {\n\tif (!block || !block.tag) return \"\";\n\tconst { tag, properties = {}, value, topBlock, bottomBlock } = block;\n\tlet blocks = block.blocks || [];\n\tconst tagName = tag;\n\tif (topBlock) blocks.unshift(topBlock);\n\tif (bottomBlock) blocks.push(bottomBlock);\n\tif (filter) blocks = blocks.filter(filter);\n\n\tconst children = blocks?.length\n\t\t? blocks.map((child) => render({ block: child, filter, keyed: false }))\n\t\t: value?.tag\n\t\t\t? render({ block: value, filter, keyed: false })\n\t\t\t: (value ?? \"\");\n\tconst template = html`<${unsafeStatic(tagName)}  ${spread(properties)}>${children}</${unsafeStatic(tagName)}>`;\n\treturn row?.id && keyed === true\n\t\t? keyedDirective(row.id, template)\n\t\t: template;\n}\n\nconst blocks = { render, parse };\n\nexport default blocks;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/model/frontend.js": {
    "content": "import backend from \"/modules/mvc/controller/backend/frontend.js\";\nimport Model from \"/modules/mvc/model/index.js\";\n\nconst request = (action, modelName, params = {}) => {\n\treturn backend(action, {\n\t\tmodel: modelName,\n\t\t...params,\n\t});\n};\n\nModel.request = request;\nexport default Model;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/view/loader/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport View from \"/modules/mvc/view/frontend.js\";\nimport ThemeManager from \"/modules/theme/index.js\";\n\nconst modulePath = `${$APP.settings.basePath}/modules`;\nconst componentDefinitions = new Map();\nconst componentConstructors = new Map();\nconst componentLoadPromises = new Map();\nconst resolvePath = (tagName) => {\n\tif ($APP.components?.[tagName]?.path) return $APP.components[tagName].path;\n\tconst parts = tagName.split(\"-\");\n\tconst moduleName = parts[0];\n\tconst module = $APP.modules[moduleName];\n\tconst componentName = parts.slice(1).join(\"-\");\n\tif (module)\n\t\treturn [modulePath, module.path ?? moduleName, componentName].join(\"/\");\n\treturn [$APP.settings.basePath, tagName].join(\"/\");\n};\n\nconst loadComponent = (tag) => {\n\tconst path = resolvePath(tag);\n\treturn $APP.fs.import(`${path}.js`, { tag });\n};\n\nasync function createAndRegisterComponent(tag, definition) {\n\tconst {\n\t\tproperties = {},\n\t\ticons,\n\t\tformAssociated = false,\n\t\tcss,\n\t\tstyle = false,\n\t\textends: extendsTag,\n\t\ttypes,\n\t\tconnectedCallback,\n\t\tdisconnectedCallback,\n\t\twillUpdate,\n\t\tfirstUpdated,\n\t\tupdated,\n\t\tclass: klass,\n\t\t...prototypeMethods\n\t} = definition;\n\tconst BaseClass = extendsTag ? await getComponent(extendsTag) : View;\n\tconst NewComponentClass = class extends BaseClass {\n\t\tstatic icons = icons;\n\t\tstatic css = css;\n\t\tstatic formAssociated = formAssociated;\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tif (klass) {\n\t\t\t\tthis.classList.add(...klass.split(\" \"));\n\t\t\t}\n\t\t}\n\n\t\tstatic properties = (() => {\n\t\t\tconst baseProperties = super.properties || {};\n\t\t\tconst baseTheme = super.theme || {};\n\t\t\tconst merged = { ...baseProperties };\n\t\t\tfor (const key of Object.keys(properties)) {\n\t\t\t\tconst config = properties[key];\n\n\t\t\t\tif (config.type === \"object\" && config.properties)\n\t\t\t\t\tconfig.properties = merged[key]?.properties\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t...merged[key]?.properties,\n\t\t\t\t\t\t\t\t...config.properties,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: config.properties;\n\n\t\t\t\tmerged[key] = merged[key]\n\t\t\t\t\t? { ...merged[key], ...config }\n\t\t\t\t\t: { ...config };\n\t\t\t\tif (config.theme) baseTheme[key] = merged[key].theme;\n\t\t\t}\n\t\t\tif (types) baseTheme.types = types;\n\t\t\tsuper.theme = baseTheme;\n\t\t\tmerged.attribute = merged.attribute === false;\n\t\t\treturn merged;\n\t\t})();\n\t};\n\tObject.assign(NewComponentClass.prototype, prototypeMethods);\n\tNewComponentClass.tag = tag;\n\tNewComponentClass._attrs = Object.fromEntries(\n\t\tObject.keys(NewComponentClass.properties).map((prop) => [\n\t\t\tprop.toLowerCase(),\n\t\t\tprop,\n\t\t]),\n\t);\n\tNewComponentClass.plugins = [...NewComponentClass.plugins];\n\n\tObject.entries({\n\t\tconnectedCallback,\n\t\tdisconnectedCallback,\n\t\twillUpdate,\n\t\t//shouldUpdate: definition.shouldUpdate,\n\t\tfirstUpdated,\n\t\tupdated,\n\t}).map(([event, fn]) => fn && NewComponentClass.plugins.push({ event, fn }));\n\n\tif (!customElements.get(tag) || $APP.settings.preview)\n\t\tcustomElements.define(tag, NewComponentClass);\n\n\tif (style || css) ThemeManager.loadStyle(NewComponentClass);\n\tcomponentConstructors.set(tag, NewComponentClass);\n\treturn NewComponentClass;\n}\n\nasync function getComponent(tag) {\n\ttag = tag.toLowerCase();\n\tif (customElements.get(tag)) {\n\t\tif (!componentConstructors.has(tag))\n\t\t\tcomponentConstructors.set(tag, customElements.get(tag));\n\t\treturn componentConstructors.get(tag);\n\t}\n\tif (componentConstructors.has(tag)) return componentConstructors.get(tag);\n\tif (componentLoadPromises.has(tag)) return componentLoadPromises.get(tag);\n\tconst loadPromise = (async () => {\n\t\ttry {\n\t\t\tlet definition = componentDefinitions.get(tag);\n\t\t\tif (!definition) {\n\t\t\t\tconst component = await loadComponent(tag);\n\t\t\t\tcomponentDefinitions.set(tag, component);\n\t\t\t\tdefinition = component.default;\n\t\t\t}\n\n\t\t\tif (!definition)\n\t\t\t\treturn console.warn(\n\t\t\t\t\t`[Loader] Definition for ${tag} not found after loading. The component's JS file might be missing a call to $APP.components.define('${tag}', ...).`,\n\t\t\t\t);\n\t\t\treturn await createAndRegisterComponent(tag, definition);\n\t\t} catch (error) {\n\t\t\tconsole.error(`[Loader] Failed to define component ${tag}:`, error);\n\t\t\treturn null;\n\t\t}\n\t})();\n\n\tcomponentLoadPromises.set(tag, loadPromise);\n\treturn loadPromise;\n}\n\nconst define = (...args) => {\n\tif (typeof args[0] === \"string\") {\n\t\tconst tag = args[0].toLowerCase();\n\t\tconst component = args[1];\n\t\t$APP.hooks.run(\"componentAdded\", { tag, component });\n\t\tif (!$APP.settings.dev)\n\t\t\tgetComponent(tag).catch((e) =>\n\t\t\t\tconsole.error(\n\t\t\t\t\t`[Loader] Error during preview definition for ${tag}:`,\n\t\t\t\t\te,\n\t\t\t\t),\n\t\t\t);\n\t} else if (typeof args[0] === \"object\" && args[0] !== null)\n\t\tObject.entries(args[0]).forEach(([tag, component]) => {\n\t\t\tdefine(tag, component);\n\t\t});\n};\n\nconst scanForUndefinedComponents = async (rootElement = document.body) => {\n\tif (!rootElement || typeof rootElement.querySelectorAll !== \"function\")\n\t\treturn;\n\tconst undefinedElements = rootElement.querySelectorAll(\":not(:defined)\");\n\tconst tagsToProcess = new Set();\n\tundefinedElements.forEach((element) => {\n\t\tconst tagName = element.tagName.toLowerCase();\n\t\tif (tagName.includes(\"-\")) tagsToProcess.add(tagName);\n\t});\n\n\tfor (const tag of tagsToProcess) getComponent(tag);\n};\n\nconst observeDOMChanges = () => {\n\tconst observer = new MutationObserver(async (mutationsList) => {\n\t\tconst tagsToProcess = new Set();\n\t\tfor (const mutation of mutationsList) {\n\t\t\tif (mutation.type === \"childList\" && mutation.addedNodes.length > 0) {\n\t\t\t\tmutation.addedNodes.forEach((node) => {\n\t\t\t\t\tif (node.nodeType === Node.ELEMENT_NODE) {\n\t\t\t\t\t\tconst tagName = node.tagName.toLowerCase();\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttagName.includes(\"-\") &&\n\t\t\t\t\t\t\t!customElements.get(tagName) &&\n\t\t\t\t\t\t\t!componentLoadPromises.has(tagName)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\ttagsToProcess.add(tagName);\n\t\t\t\t\t\tif (typeof node.querySelectorAll === \"function\") {\n\t\t\t\t\t\t\tnode.querySelectorAll(\":not(:defined)\").forEach((childNode) => {\n\t\t\t\t\t\t\t\tconst childTagName = childNode.tagName.toLowerCase();\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tchildTagName.includes(\"-\") &&\n\t\t\t\t\t\t\t\t\t!customElements.get(childTagName) &&\n\t\t\t\t\t\t\t\t\t!componentLoadPromises.has(childTagName)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\ttagsToProcess.add(childTagName);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tfor (const tag of tagsToProcess) getComponent(tag);\n\t});\n\tobserver.observe(document.body, {\n\t\tchildList: true,\n\t\tsubtree: true,\n\t});\n};\n\nconst init = () => {\n\t$APP.events.on(\"INIT_APP\", () => {\n\t\tscanForUndefinedComponents(document.body);\n\t\tobserveDOMChanges();\n\t});\n};\n\nif ($APP.settings.dev) $APP.hooks.add(\"init\", init);\n\n$APP.hooks.set({\n\tcomponentAdded({ tag, component }) {\n\t\tcomponentDefinitions.set(tag, component);\n\t\tif (!$APP.components[tag]) $APP.components[tag] = {};\n\t\t$APP.components[tag].definition = component;\n\t},\n\tmoduleAdded({ module }) {\n\t\tif (module.components) {\n\t\t\tObject.entries(module.components).forEach(([name, value]) => {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tvalue.forEach((componentName) => {\n\t\t\t\t\t\tconst tag = `${module.name}-${componentName}`;\n\t\t\t\t\t\tif (!$APP.components[tag]) $APP.components[tag] = {};\n\t\t\t\t\t\t$APP.components[tag].path =\n\t\t\t\t\t\t\t`${modulePath}/${module.name}/${name}/${componentName}`;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst tag = `${module.name}-${name}`;\n\t\t\t\t\tif (!$APP.components[tag]) $APP.components[tag] = {};\n\t\t\t\t\t$APP.components[tag].path = `${modulePath}/${module.name}/${name}`;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n});\n\nconst events = {\n\tGET_TAG_PROPS: async ({ payload } = {}) => {\n\t\tif (!payload.tag) return;\n\t\tconst component = await getComponent(payload.tag);\n\t\tif (!component)\n\t\t\tconsole.warn(\n\t\t\t\t`Component ${payload.tag} not found. Did you forget to define it?`,\n\t\t\t);\n\t\treturn component ? $APP.Backend.sanitize(component?.properties) : undefined;\n\t},\n};\n\n$APP.events.set(events);\n$APP.define = define;\nexport default { define };\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/view/html/directive.js": {
    "content": "/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n\t(c) =>\n\t(...values) => ({\n\t\t// This property needs to remain unminified.\n\t\t[\"_$litDirective$\"]: c,\n\t\tvalues,\n\t});\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport class Directive {\n\t//@internal\n\t__part;\n\t//@internal\n\t__attributeIndex;\n\t//@internal\n\t__directive;\n\t//@internal\n\t_$parent;\n\n\t// These will only exist on the AsyncDirective subclass\n\t//@internal\n\t_$disconnectableChildren;\n\t// This property needs to remain unminified.\n\t//@internal\n\t[\"_$notifyDirectiveConnectionChanged\"];\n\n\tconstructor(_partInfo) {}\n\n\t// See comment in Disconnectable interface for why this is a getter\n\tget _$isConnected() {\n\t\treturn this._$parent._$isConnected;\n\t}\n\n\t/** @internal */\n\t_$initialize(part, parent, attributeIndex) {\n\t\tthis.__part = part;\n\t\tthis._$parent = parent;\n\t\tthis.__attributeIndex = attributeIndex;\n\t}\n\t/** @internal */\n\t_$resolve(part, props) {\n\t\treturn this.update(part, props);\n\t}\n\n\trender(...props) {\n\t\tthrow new Error(\"The `render()` method must be implemented.\");\n\t}\n\n\tupdate(_part, props) {\n\t\treturn this.render(...props);\n\t}\n}\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nconst setCommittedValue = (part, value = RESET_VALUE) =>\n\t(part._$committedValue = value);\nconst nothing = Symbol.for(\"lit-nothing\");\nclass Keyed extends Directive {\n\tkey = nothing;\n\trender(k, v) {\n\t\tthis.key = k;\n\t\treturn v;\n\t}\n\tupdate(part, [k, v]) {\n\t\tif (k !== this.key) {\n\t\t\t// Clear the part before returning a value. The one-arg form of\n\t\t\t// setCommittedValue sets the value to a sentinel which forces a\n\t\t\t// commit the next render.\n\t\t\tsetCommittedValue(part);\n\t\t\tthis.key = k;\n\t\t}\n\t\treturn v;\n\t}\n}\n\nexport const keyed = directive(Keyed);\n",
    "metaType": "application/javascript"
  },
  "/modules/theme/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\nconst Theme = new Map();\n\nconst camelToKebab = (str) =>\n\tstr.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nconst generateShade = (baseColorVar, percentage) =>\n\tpercentage >= 0\n\t\t? `color-mix(in hsl, white ${percentage}%, ${baseColorVar})`\n\t\t: `color-mix(in hsl, ${baseColorVar}, black ${Math.abs(percentage)}%)`;\n\nconst shades = {\n\t0: 100,\n\t1: 98,\n\t5: 90,\n\t10: 80,\n\t20: 60,\n\t30: 40,\n\t40: 20,\n\t50: 0,\n\t60: -20,\n\t70: -30,\n\t80: -40,\n\t90: -55,\n\t95: -65,\n\t99: -80,\n\t100: -100,\n};\n\nconst generateColorVariables = (colors) =>\n\tObject.entries(colors)\n\t\t.flatMap(([color, value]) => [\n\t\t\t`--color-${color}: ${value};`,\n\t\t\t...Object.entries(shades).map(\n\t\t\t\t([shade, percentage]) =>\n\t\t\t\t\t`--color-${color}-${shade}: ${generateShade(`var(--color-${color})`, percentage)};`,\n\t\t\t),\n\t\t])\n\t\t.join(\"\\n\");\n\nconst generateGeneralVariables = (obj, prefix = \"--\") =>\n\tObject.entries(obj)\n\t\t.flatMap(([key, value]) =>\n\t\t\tkey === \"colors\"\n\t\t\t\t? []\n\t\t\t\t: typeof value === \"object\" && value !== null\n\t\t\t\t\t? generateGeneralVariables(value, `${prefix}${camelToKebab(key)}-`)\n\t\t\t\t\t: `${prefix}${camelToKebab(key)}: ${value};`,\n\t\t)\n\t\t.join(\"\\n\");\n\nconst setCSSVariables = (root, { colors, ...theme }) => {\n\tconst cssString = `${generateColorVariables(colors)}\\n${generateGeneralVariables(theme)}`;\n\tcssString\n\t\t.split(\"\\n\")\n\t\t.filter(Boolean)\n\t\t.forEach((variable) => {\n\t\t\tconst [name, value] = variable.trim().split(\": \");\n\t\t\troot.style.setProperty(name, value.slice(0, -1));\n\t\t});\n};\n\nconst globalStyleTag = (() => {\n\tconst styleTag =\n\t\tdocument.querySelector(\"#compstyles\") ||\n\t\t(() => {\n\t\t\tconst tag = document.createElement(\"style\");\n\t\t\ttag.id = \"compstyles\";\n\t\t\tdocument.head.appendChild(tag);\n\t\t\treturn tag;\n\t\t})();\n\treturn styleTag;\n})();\n\nasync function loadStyle(component) {\n\tconst { tag, css } = component;\n\tif (!css) return;\n\tif (Theme.has(tag)) return;\n\tTheme.set(tag, \"\");\n\tif (css) globalStyleTag.textContent += `.${tag} { ${css} }`;\n}\n\nconst getSize = (value, multiplier) => {\n\tconst size = $APP.theme.sizes[value] || value;\n\tif (typeof size === \"number\")\n\t\treturn multiplier ? `calc(${size}px * ${multiplier})` : `${size}px`;\n\tif (typeof size === \"string\" && size.includes(\"/\")) {\n\t\tconst [num, den] = size.split(\"/\");\n\t\tconst percent = `${((Number.parseFloat(num) / Number.parseFloat(den)) * 100).toFixed(3)}%`;\n\t\treturn multiplier ? `calc(${percent} * ${multiplier})` : percent;\n\t}\n\treturn size;\n};\n\nconst getTextSize = (\n\tsize,\n\t{ base = $APP.theme.text.base, ratio = $APP.theme.text.ratio } = {},\n) => {\n\tconst baseIndex = $APP.theme.text.sizes.indexOf(\"md\");\n\tconst sizeIndex = $APP.theme.text.sizes.indexOf(size);\n\tconst diff = sizeIndex - baseIndex;\n\tconst result =\n\t\tdiff < 0 ? base / ratio ** Math.abs(diff) : base * ratio ** diff;\n\treturn `${result.toFixed(2)}rem`;\n};\n\nconst ThemeManager = {\n\tloadStyle,\n\tgetSize,\n\tgetTextSize,\n};\n\n$APP.hooks.set({\n\tinit: () => {\n\t\tsetCSSVariables(document.documentElement, $APP.theme);\n\t},\n\tmoduleAdded({ module }) {\n\t\tif (module.theme) $APP.theme[module.name] = module.theme;\n\t},\n});\n\n$APP.theme.set({\n\tcolors: {\n\t\tdefault: \"darkgray\",\n\t\tprimary: \"#00a7f1\",\n\t\tsecondary: \"#007400\",\n\t\ttertiary: \"#00998d\",\n\t\tsuccess: \"#49f09c\",\n\t\twarning: \"#fc8700\",\n\t\terror: \"#ff0040\",\n\t\tsurface: \"darkgray\",\n\t\tred: \"#F44336\",\n\t\tpink: \"#E91E63\",\n\t\tpurple: \"#9C27B0\",\n\t\tblue: \"#2196F3\",\n\t\tcyan: \"#00BCD4\",\n\t\tgreen: \"#4CAF50\",\n\t\tyellow: \"#FFEB3B\",\n\t\torange: \"#FF9800\",\n\t\tbrown: \"#795548\",\n\t\tgray: \"#9E9E9E\",\n\t\tblack: \"#000000\",\n\t\twhite: \"#FFFFFF\",\n\t},\n\tfont: {\n\t\tfamily:\n\t\t\t\"'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif\",\n\t\ticonFamily: \"lucide\",\n\t\ticon: {\n\t\t\tfamily: \"lucide\",\n\t\t},\n\t},\n\tbackground: {\n\t\tcolor: \"var(--color-primary-10)\",\n\t},\n\tbutton: {\n\t\tshade: 60,\n\t\tborder: {\n\t\t\tshade: 90,\n\t\t},\n\t},\n\ttext: {\n\t\tcolor: \"var(--color-surface-100)\",\n\t\tsizes: [\n\t\t\t\"2xs\",\n\t\t\t\"xs\",\n\t\t\t\"sm\",\n\t\t\t\"md\",\n\t\t\t\"lg\",\n\t\t\t\"xl\",\n\t\t\t\"2xl\",\n\t\t\t\"xl\",\n\t\t\t\"2xl\",\n\t\t\t\"3xl\",\n\t\t\t\"4xl\",\n\t\t],\n\t\tbase: 1,\n\t\tratio: 1.2,\n\t},\n\tborder: {\n\t\tradius: \"md\",\n\t\tsize: \"1px\",\n\t\tstyle: \"solid\",\n\t\tcolor: \"var(--color-default-70)\",\n\t},\n\tradius: {\n\t\txs: \"2px\",\n\t\tsm: \"4px\",\n\t\tmd: \"8px\",\n\t\tlg: \"12px\",\n\t\txl: \"16px\",\n\t\t\"2xl\": \"24px\",\n\t\tfull: \"100%\",\n\t},\n\tspacing: {\n\t\tnone: \"0\",\n\t\txs: \"0.25rem\",\n\t\tsm: \"0.5rem\",\n\t\tmd: \"1rem\",\n\t\tlg: \"1.5rem\",\n\t\txl: \"2rem\",\n\t\t\"2xl\": \"2.5rem\",\n\t\t\"3xl\": \"3rem\",\n\t\t\"4xl\": \"4rem\",\n\t},\n\tsizes: {\n\t\t\"3xs\": 50,\n\t\t\"2xs\": 80,\n\t\txs: 120,\n\t\tsm: 200,\n\t\tmd: 320,\n\t\tlg: 480,\n\t\txl: 768,\n\t\t\"2xl\": 1024,\n\t\t\"3xl\": 1280,\n\t\t\"4xl\": 1536,\n\t\tmin: \"min-content\",\n\t\tmax: \"max-content\",\n\t\tfit: \"fit-content\",\n\t\t\"fit-content\": \"fit-content\",\n\t\tscreen: \"100vh\",\n\t\tfull: \"100%\",\n\t\tauto: \"auto\",\n\t},\n});\nexport default ThemeManager;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/view/html/spread.js": {
    "content": "import { Directive, directive } from \"/modules/mvc/view/html/directive.js\";\n\nconst prefixValueKeys = (value, prefix) => {\n\tconst o = {};\n\tfor (const p in value) {\n\t\to[prefix + p] = value[p];\n\t}\n\treturn o;\n};\n\nconst toSpread = ({ properties, events, attributes, booleanAttributes }) => {\n\tproperties ??= {};\n\treturn {\n\t\t...attributes,\n\t\t...prefixValueKeys(properties ?? {}, \".\"),\n\t\t...prefixValueKeys(events ?? {}, \"@\"),\n\t\t...prefixValueKeys(booleanAttributes ?? {}, \"?\"),\n\t};\n};\n\nclass Spread extends Directive {\n\telement;\n\thost;\n\tpreviousValue;\n\n\trender(value, events) {}\n\n\tisEqual(o, v) {\n\t\treturn Object.is(o, v);\n\t}\n\n\tupdate(part, [value]) {\n\t\tthis.element ??= part.element;\n\t\tif (this.element === undefined) {\n\t\t\tthis.element = part.parentNode;\n\t\t}\n\t\tthis.host ??= part.options?.host;\n\t\t// if value is an array,\n\t\t// 0: auto, 1: events, 2: boolean attributes, n: auto\n\t\tif (Array.isArray(value)) {\n\t\t\tvalue = value.reduce((a, o, i) => {\n\t\t\t\tObject.entries(o).forEach(([key, v]) => {\n\t\t\t\t\tif (i === 1) {\n\t\t\t\t\t\tkey = `@${key}`;\n\t\t\t\t\t} else if (i === 2) {\n\t\t\t\t\t\tkey = `?${key}`;\n\t\t\t\t\t}\n\t\t\t\t\ta[key] = v;\n\t\t\t\t});\n\t\t\t\treturn a;\n\t\t\t}, {});\n\t\t}\n\t\tconst { previousValue } = this;\n\t\tif (this.isEqual(value, previousValue)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.previousValue = value;\n\t\tObject.entries(value).forEach(([key, v]) => {\n\t\t\tif (!this.isEqual(previousValue?.[key], v)) {\n\t\t\t\tconst [, token, name] = key.match(/([.?@])?(.*)/);\n\t\t\t\tthis.updateItem(token, name, v);\n\t\t\t}\n\t\t});\n\t\t// Unset previous\n\t\tif (previousValue == null) {\n\t\t\treturn;\n\t\t}\n\t\tObject.entries(previousValue).forEach(([key]) => {\n\t\t\tif (!(key in value)) {\n\t\t\t\tconst [, token, name] = key.match(/([.?@])?(.*)/);\n\t\t\t\tthis.updateItem(token, name, undefined, true);\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateItem(token, name, value, unset = false) {\n\t\tswitch (token) {\n\t\t\tcase \".\":\n\t\t\t\treturn !unset && this.updateProperty(name, value);\n\t\t\tcase \"@\":\n\t\t\t\treturn this.updateEvent(name, value);\n\t\t\tcase \"?\":\n\t\t\t\treturn this.updateAttribute(name, value, true);\n\t\t\tdefault:\n\t\t\t\tif (typeof value === \"object\" && value !== null) {\n\t\t\t\t\tif (name === \"class\") {\n\t\t\t\t\t\treturn this.updateClass(value);\n\t\t\t\t\t}\n\t\t\t\t\tif (name === \"style\") {\n\t\t\t\t\t\treturn this.updateStyle(value);\n\t\t\t\t\t}\n\t\t\t\t\treturn this.updateAttribute(name, JSON.stringify(value));\n\t\t\t\t}\n\t\t\t\treturn name in this.element\n\t\t\t\t\t? this.updateProperty(name, value)\n\t\t\t\t\t: this.updateAttribute(name, value);\n\t\t}\n\t}\n\n\tlisteners = new Map();\n\n\tupdateEvent(name, value) {\n\t\tconst handleEvent =\n\t\t\ttypeof value === \"function\"\n\t\t\t\t? (e) => value.call(this.host ?? this.element, e)\n\t\t\t\t: null;\n\t\tlet listener = this.listeners.get(name);\n\t\tif (handleEvent === null) {\n\t\t\tif (listener) {\n\t\t\t\tthis.listeners.delete(name);\n\t\t\t\tthis.element.removeEventListener(name, listener);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (listener === undefined) {\n\t\t\tthis.listeners.set(\n\t\t\t\tname,\n\t\t\t\t(listener = {\n\t\t\t\t\thandleEvent,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis.element.addEventListener(name, listener);\n\t\t} else {\n\t\t\tlistener.handleEvent = handleEvent;\n\t\t}\n\t}\n\n\tupdateClass(value) {\n\t\tthis.updateAttribute(\n\t\t\t\"class\",\n\t\t\tObject.entries(value)\n\t\t\t\t.filter(([k, v]) => v)\n\t\t\t\t.map(([k]) => k)\n\t\t\t\t.join(\" \"),\n\t\t);\n\t}\n\n\tupdateStyle(value) {\n\t\tthis.updateAttribute(\n\t\t\t\"style\",\n\t\t\tObject.entries(value)\n\t\t\t\t.map(([k, v]) => `${k}: ${v}`)\n\t\t\t\t.join(\"; \"),\n\t\t);\n\t}\n\n\tupdateAttribute(name, value, asBoolean = false) {\n\t\tif (typeof value === \"boolean\") {\n\t\t\tvalue = value ? \"\" : null;\n\t\t}\n\t\t// TODO: does this match Lit's semantics?\n\t\tif (value == null || (asBoolean && !value)) {\n\t\t\tthis.element.removeAttribute(name);\n\t\t} else {\n\t\t\tthis.element.setAttribute(name, asBoolean ? \"\" : value);\n\t\t}\n\t}\n\n\tupdateProperty(name, value) {\n\t\tthis.element[name] = value;\n\t}\n}\n\nconst spread = directive(Spread);\n\nexport default spread;\n",
    "metaType": "application/javascript"
  },
  "/modules/icon-lucide/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\n$APP.addModule({ name: \"icon-lucide\", icon: true });\n",
    "metaType": "application/javascript"
  },
  "/modules/font/manrope/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\n$APP.addModule({\n\tname: \"manrope\",\n\tfont: {\n\t\tname: \"Manrope\",\n\t\ttype: \"woff2\",\n\t\tvariants: [\n\t\t\t\"extralight\",\n\t\t\t\"light\",\n\t\t\t\"medium\",\n\t\t\t\"regular\",\n\t\t\t\"semibold\",\n\t\t\t\"bold\",\n\t\t\t\"extrabold\",\n\t\t],\n\t},\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\n$APP.addModule({\n\tname: \"uix\",\n\tfrontend: true,\n\tcomponents: {\n\t\tform: [\n\t\t\t\"form\",\n\t\t\t\"form-control\",\n\t\t\t\"input\",\n\t\t\t\"select\",\n\t\t\t\"textarea\",\n\t\t\t\"time\",\n\t\t\t\"rating\",\n\t\t\t\"join\",\n\t\t\t\"file-upload\", // ðŸ”º ToDo\n\t\t\t\"number-input\", // ðŸ”º ToDo\n\t\t\t\"switch\", // ðŸ”º ToDo\n\t\t\t\"slider\", // ðŸ”º ToDo\n\t\t],\n\n\t\tnavigation: [\n\t\t\t\"navbar\",\n\t\t\t\"breadcrumbs\",\n\t\t\t\"menu\", // ðŸ”º ToDo (menu dropdown)\n\t\t\t\"sidebar\", // ðŸ”º ToDo\n\t\t\t\"pagination\",\n\t\t\t\"tabs\",\n\t\t\t\"tabbed\",\n\t\t],\n\n\t\toverlay: [\n\t\t\t\"overlay\",\n\t\t\t\"modal\",\n\t\t\t\"drawer\",\n\t\t\t\"tooltip\",\n\t\t\t\"popover\", // ðŸ”º ToDo\n\t\t\t\"alert-dialog\", // ðŸ”º ToDo\n\t\t\t\"toast\", // ðŸ”º ToDo\n\t\t],\n\n\t\tdisplay: [\n\t\t\t\"link\",\n\t\t\t\"button\",\n\t\t\t\"avatar\",\n\t\t\t\"badge\",\n\t\t\t\"card\",\n\t\t\t\"circle\",\n\t\t\t\"image\",\n\t\t\t\"logo\",\n\t\t\t\"media\",\n\t\t\t\"table\",\n\t\t\t\"table-row\",\n\t\t\t\"icon\",\n\t\t\t\"calendar\",\n\t\t\t\"calendar-day\",\n\t\t\t\"tag\", // ðŸ”º ToDo\n\t\t\t\"stat\",\n\t\t\t\"chart\",\n\t\t\t\"content\",\n\t\t],\n\n\t\tlayout: [\n\t\t\t\"list\",\n\t\t\t\"accordion\",\n\t\t\t\"row\",\n\t\t\t\"container\",\n\t\t\t\"divider\",\n\t\t\t\"section\", // ðŸ”º ToDo\n\t\t\t\"page\", // ðŸ”º ToDo\n\t\t\t\"flex\", // ðŸ”º ToDo\n\t\t\t\"stack\", // ðŸ”º ToDo\n\t\t\t\"spacer\", // ðŸ”º ToDo\n\t\t],\n\n\t\tfeedback: [\n\t\t\t\"spinner\",\n\t\t\t\"progress-bar\", // ðŸ”º ToDo\n\t\t\t\"circular-progress\", // ðŸ”º ToDo\n\t\t\t\"skeleton\", // ðŸ”º ToDo\n\t\t],\n\n\t\tutility: [\n\t\t\t\"draggable\",\n\t\t\t\"droparea\",\n\t\t\t\"clipboard\", // ðŸ”º ToDo\n\t\t\t\"theme-toggle\", // ðŸ”º ToDo\n\t\t\t\"dark-mode-switch\", // ðŸ”º ToDo\n\t\t],\n\t},\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/frontend.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport html from \"/modules/mvc/view/html/index.js\";\n\nconst routes = {\n\t\"/theme\": {\n\t\tcomponent: () => html`<theme-ui></theme-ui>`,\n\t\ttitle: \"Theme\",\n\t\ttemplate: \"uix-template\",\n\t},\n};\n\n$APP.routes.set(routes);\n",
    "metaType": "application/javascript"
  },
  "/modules/apps/bundler/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\n$APP.addModule({\n\tname: \"bundler\",\n\tpath: \"apps/bundler\",\n\tbase: [],\n\tdev: true,\n\tfrontend: true,\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/apps/bundler/frontend.js": {
    "content": "export default {}"
  },
  "/modules/integrations/github.js": {
    "content": "export default {}"
  },
  "/modules/p2p/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\nconst p2p = {};\n$APP.events.install(p2p);\n$APP.addModule({\n\tname: \"p2p\",\n\tfrontend: true,\n\tbackend: true,\n\tbase: p2p,\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/p2p/frontend.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\nconst events = {\n\t\"P2P:SEND_DATA_OP\": ({ payload }) => {\n\t\tconsole.log(\"P2P DATA OP\", { payload });\n\t\t$APP.p2p.emit(\"SEND_DATA_OP\", payload);\n\t},\n};\n$APP.events.set(events);\n",
    "metaType": "application/javascript"
  },
  "/theme.css": {
    "content": "body {\n\tfont-family: var(--font-family);\n}\n\nhtml,\nbody {\n\tfont-family: var(--font-family);\n\tbackground-color: var(--background-color) !important;\n\tcolor: var(--text-color) !important;\n\twidth: 100%;\n\tmin-height: 100%;\n\theight: 100%;\n\tpadding: 0;\n\tmargin: 0;\n}\n\n:not(.production) {\n\t*:not(:defined) {\n\t\tborder: 1px solid red;\n\t}\n}\n\n.dark {\n\tfilter: invert(1) hue-rotate(180deg);\n}\n\n.dark img,\n.dark dialog,\n.dark video,\n.dark iframe {\n\tfilter: invert(1) hue-rotate(180deg);\n}\n\nhtml {\n\tfont-size: 14px;\n}\n\n@media (max-width: 768px) {\n\thtml {\n\t\tfont-size: 18px;\n\t}\n}\n\n@media (max-width: 480px) {\n\thtml {\n\t\tfont-size: 20px;\n\t}\n}\n\ntextarea {\n\tfont-family: inherit;\n\tfont-feature-settings: inherit;\n\tfont-variation-settings: inherit;\n\tfont-size: 100%;\n\tfont-weight: inherit;\n\tline-height: inherit;\n\tcolor: inherit;\n\tmargin: 0;\n\tpadding: 0;\n}\n\n:root {\n\tbox-sizing: border-box;\n\t-moz-text-size-adjust: none;\n\t-webkit-text-size-adjust: none;\n\ttext-size-adjust: none;\n\tline-height: 1.2;\n\t-webkit-font-smoothing: antialiased;\n}\n*,\n*::before,\n*::after {\n\tbox-sizing: border-box;\n}\n* {\n\tmargin: 0;\n}\nbody {\n\t-webkit-font-smoothing: antialiased;\n}\na {\n\tcolor: currentColor;\n\ttext-decoration: none;\n\tfont-family: var(--font-family);\n}\n\nbutton,\ntextarea,\nselect {\n\tbackground-color: inherit;\n\tborder-width: 0;\n\tcolor: inherit;\n}\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n\tdisplay: block;\n\tmax-width: 100%;\n}\ninput,\nbutton,\ntextarea,\nselect {\n\tfont: inherit;\n}\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n\tfont-family: var(--font-family);\n\toverflow-wrap: break-word;\n}\n\ndialog::backdrop {\n\tbackground-color: rgba(0, 0, 0, 0.8);\n}\n\n*::-webkit-scrollbar {\n\twidth: 8px;\n\tmargin-right: 10px;\n}\n\n*::-webkit-scrollbar-track {\n\tbackground: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n\t&:hover {\n\t\tscrollbar-color: rgba(154, 153, 150, 0.8) transparent;\n\t}\n\tborder-radius: 10px;\n\tborder: none;\n}\n\n*::-webkit-scrollbar-button {\n\tbackground: transparent;\n\tcolor: transparent;\n}\n\n* {\n\tscrollbar-width: thin;\n\tscrollbar-color: transparent transparent;\n\t&:hover {\n\t\tscrollbar-color: rgba(154, 153, 150, 0.8) transparent;\n\t}\n}\n\n[full] {\n\twidth: 100%;\n\theight: 100vh;\n}\n\n[w-full] {\n\twidth: 100%;\n}\n\n[grow] {\n\tflex-grow: 1;\n}\n\n[hide] {\n\tdisplay: none !important;\n}\n\n.hide {\n\tdisplay: none !important;\n}\n\n[noscroll] {\n\toverflow: hidden;\n}\n\ndiv [container] {\n\tdisplay: flex;\n}\n\ndiv [container][horizontal] {\n\tdisplay: flex;\n\tflex-direction: col;\n}\n",
    "metaType": "text/css"
  },
  "/worker.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\nlet STARTED;\n\nconst bootstrap = async (_project) => {\n\tconsole.log(\"App Worker: bootstrap() called\");\n\tconst url = new URL(self.location);\n\tconst param = url.searchParams.get(\"project\");\n\tconst project = param ? JSON.parse(decodeURIComponent(param)) : {};\n\tproject.backend = true;\n\tconst APP = await $APP.bootstrap({\n\t\tbackend: true,\n\t\t...(project || {}),\n\t\tsettings: {\n\t\t\t...(project.settings || {}),\n\t\t\tpreview: !!self.IS_PREVIEW,\n\t\t\tIS_MV3: !!self.chrome,\n\t\t},\n\t});\n\n\tif (APP && !STARTED) {\n\t\tconsole.log(\"App Worker: Initializing backend application\");\n\t\tawait $APP.Backend.bootstrap(APP);\n\t}\n\treturn APP;\n};\n\nlet app;\nlet commsPort;\nconst events = [];\nconst MessageHandler = {\n\thandleMessage: async ({ data }) => {\n\t\tif (data.eventId && events.includes(data.eventId)) return;\n\t\tif (data.eventId) events.push(data.eventId);\n\n\t\tconst respond =\n\t\t\tdata.eventId &&\n\t\t\t((responsePayload) => {\n\t\t\t\tif (commsPort) {\n\t\t\t\t\tcommsPort.postMessage({\n\t\t\t\t\t\teventId: data.eventId,\n\t\t\t\t\t\tpayload: responsePayload,\n\t\t\t\t\t\tconnection: data.connection,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tif (data.type === \"LOAD_APP\" && $APP.settings.preview) {\n\t\t\tconst project = data?.payload?.project;\n\t\t\tif (!project) return;\n\t\t\tif (app) {\n\t\t\t\tconsole.info(\"App Worker: Restarting existing application\");\n\t\t\t\tapp.restart();\n\t\t\t}\n\t\t\tapp = await bootstrap(project);\n\t\t}\n\n\t\tif ($APP?.Backend) {\n\t\t\tconsole.info(`App Worker: Routing message to backend: ${data.type}`);\n\t\t\t$APP.Backend.handleMessage({\n\t\t\t\tdata,\n\t\t\t\trespond,\n\t\t\t});\n\t\t} else {\n\t\t\t$APP.hooks.add(\"APP:BACKEND_STARTED\", async () => {\n\t\t\t\tconsole.info(\n\t\t\t\t\t`App Worker: Routing message to backend after APP:BACKEND_STARTED: ${data.type}`,\n\t\t\t\t);\n\t\t\t\t$APP.Backend.handleMessage({\n\t\t\t\t\tdata,\n\t\t\t\t\trespond,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t},\n};\n\nself.addEventListener(\"message\", async (event) => {\n\tif (event.data.type === \"INIT_PORT\") {\n\t\tcommsPort = event.ports[0];\n\t\tconsole.warn(\"App Worker: Communication port initialized.\");\n\t\tcommsPort.onmessage = MessageHandler.handleMessage;\n\t\t(async () => {\n\t\t\tapp = await bootstrap();\n\t\t\t$APP.Backend.client = commsPort;\n\t\t})();\n\t}\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/view/backend.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\nconst getTagProps = async (tag) => {\n\treturn $APP.Backend.requestFromClient(\"GET_TAG_PROPS\", { tag });\n};\n$APP.addFunctions({ name: \"view\", functions: { getTagProps } });\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/controller/backend/backend.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport Model from \"/modules/mvc/model/backend.js\";\nimport Database from \"/modules/mvc/model/database/index.js\";\n\nconst generateId = (() => {\n\tlet lastTimestamp = 0;\n\tlet sequentialCounter = 0;\n\treturn () => {\n\t\tlet now = Date.now();\n\t\tif (now > lastTimestamp) {\n\t\t\tsequentialCounter = 0;\n\t\t} else {\n\t\t\tsequentialCounter++;\n\t\t\tnow += sequentialCounter;\n\t\t}\n\t\tlastTimestamp = now;\n\t\treturn now.toString();\n\t};\n})();\n\nlet nextRequestId = 1;\nconst pendingRequests = {};\nconst pendingBackendRequests = {};\n\nconst requestFromClient = async (type, payload, timeout = 5000) => {\n\tconst clients = await self.clients.matchAll({\n\t\ttype: \"window\",\n\t\tincludeUncontrolled: true,\n\t});\n\tconst client = clients[0]; // Simple strategy: pick the first client.\n\n\tif (!client) {\n\t\treturn Promise.reject(\n\t\t\tnew Error(\"No active client found to send request to.\"),\n\t\t);\n\t}\n\n\tconst eventId = `backend-request-${nextRequestId++}`;\n\n\treturn new Promise((resolve, reject) => {\n\t\tpendingBackendRequests[eventId] = { resolve, reject };\n\t\tsetTimeout(() => {\n\t\t\tdelete pendingBackendRequests[eventId];\n\t\t\treject(new Error(`Request timed out after ${timeout}ms`));\n\t\t}, timeout);\n\t\tclient.postMessage({\n\t\t\ttype,\n\t\t\tpayload,\n\t\t\teventId,\n\t\t});\n\t});\n};\n\nconst broadcast = async (params) => {\n\t$APP.Backend.client.postMessage(params);\n\t$APP.Backend.client.postMessage({ type: \"BROADCAST\", params });\n};\n\nconst handleMessage = async ({ data, respond }) => {\n\tconst { events } = $APP;\n\tconst { type, payload, connection, eventId } = data;\n\tif (pendingBackendRequests[eventId]) {\n\t\tconst promise = pendingBackendRequests[eventId];\n\t\tpromise.resolve(payload);\n\t\tdelete pendingBackendRequests[eventId];\n\t\treturn;\n\t}\n\n\tif (connection) {\n\t\tif (!pendingRequests[eventId]) {\n\t\t\t$APP.mv3.postMessage(data, connection);\n\t\t\tpendingRequests[eventId] = respond;\n\t\t} else pendingRequests[eventId].postMessage(data);\n\t\treturn;\n\t}\n\n\tconst handler = events[type];\n\tif (!handler) return;\n\tawait handler({\n\t\tpayload,\n\t\teventId,\n\t\trespond,\n\t\tclient: createClientProxy($APP.Backend.client),\n\t\tbroadcast,\n\t});\n};\n\nconst createClientProxy = (client) => {\n\treturn new Proxy(\n\t\t{},\n\t\t{\n\t\t\tget: (target, prop) => {\n\t\t\t\treturn (payload) => sendRequestToClient(client, prop, payload);\n\t\t\t},\n\t\t},\n\t);\n};\n\nconst sendRequestToClient = (client, type, payload) => {\n\tconst eventId = `sw_${nextRequestId++}`;\n\treturn new Promise((resolve, reject) => {\n\t\tpendingBackendRequests[eventId] = { resolve, reject };\n\t\tclient.postMessage({ type, payload, eventId });\n\t});\n};\n\nfunction createModelAdder({ $APP, getApp, debounceDelay = 50 }) {\n\tlet debounceTimer;\n\n\tconst processModelAdditions = async () => {\n\t\t$APP.log(`Batch processing ${$APP.dynamicModels.length} model(s)...`);\n\n\t\ttry {\n\t\t\tconst { SysModel } = $APP;\n\t\t\tconst app = await getApp();\n\t\t\tconst newVersion = app.version + 1;\n\t\t\tawait SysModel.edit($APP.settings.sysmodels.APP, {\n\t\t\t\tid: app.id,\n\t\t\t\tmodels: $APP.models,\n\t\t\t\tversion: newVersion,\n\t\t\t});\n\t\t\t$APP.log(\n\t\t\t\t`Batch add successful. ${$APP.dynamicModels.length} model(s) added. App version is now ${newVersion}.`,\n\t\t\t);\n\n\t\t\tawait Database.reload({\n\t\t\t\tmodels: $APP.models,\n\t\t\t\tversion: newVersion,\n\t\t\t});\n\n\t\t\tif ($APP.dynamicData.length)\n\t\t\t\tawait migrateData(Object.fromEntries($APP.dynamicData), true);\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Failed to process model additions batch:\", error);\n\t\t}\n\t};\n\n\t$APP.addModule({ name: \"dynamicModels\", base: [] });\n\t$APP.addModule({ name: \"dynamicData\", base: [] });\n\n\treturn function addModel({ name, schema }) {\n\t\tif (!$APP.dynamicModels.includes(name)) $APP.dynamicModels.add(name);\n\t\tif (!name || !schema)\n\t\t\tthrow new Error(\"A model 'name' and 'schema' are required.\");\n\t\t$APP.log(`Model \"${name}\" queued for addition.`);\n\t\t$APP.models.set({ [name]: schema });\n\t\tclearTimeout(debounceTimer);\n\t\tdebounceTimer = setTimeout(processModelAdditions, debounceDelay);\n\t};\n}\n\nconst createAppEntry = async ({\n\ttimestamp = Date.now(),\n\tid = timestamp.toString(),\n\tmodels = $APP.models,\n\tversion = 1,\n} = {}) => {\n\tconst app = {\n\t\tid,\n\t\tversion,\n\t\tactive: true,\n\t\tmodels,\n\t};\n\tawait $APP.SysModel.add($APP.settings.sysmodels.APP, app);\n\t$APP.hooks.run(\"appCreated\", {\n\t\tapp,\n\t});\n\treturn app;\n};\n\nasync function generateKeyPair() {\n\tconst keyPair = await self.crypto.subtle.generateKey(\n\t\t{\n\t\t\tname: \"RSA-OAEP\",\n\t\t\tmodulusLength: 2048,\n\t\t\tpublicExponent: new Uint8Array([1, 0, 1]),\n\t\t\thash: \"SHA-256\",\n\t\t},\n\t\ttrue,\n\t\t[\"encrypt\", \"decrypt\"],\n\t);\n\n\tconst publicKey = await self.crypto.subtle.exportKey(\n\t\t\"spki\",\n\t\tkeyPair.publicKey,\n\t);\n\tconst privateKey = await self.crypto.subtle.exportKey(\n\t\t\"pkcs8\",\n\t\tkeyPair.privateKey,\n\t);\n\n\treturn {\n\t\tpublicKey: btoa(String.fromCharCode(...new Uint8Array(publicKey))),\n\t\tprivateKey: btoa(String.fromCharCode(...new Uint8Array(privateKey))),\n\t};\n}\n\nconst createUserEntry = async ({ app: _app, device, user } = {}) => {\n\tconst app = _app || (await $APP.Backend.getApp());\n\tif (!user) {\n\t\tconst existingUser = await $APP.SysModel.get($APP.settings.sysmodels.USER, {\n\t\t\tactive: true,\n\t\t\tappId: app.id,\n\t\t});\n\n\t\tif (existingUser) {\n\t\t\texistingUser.privateKey = null;\n\t\t\tconst existingDevice = await $APP.SysModel.get(\n\t\t\t\t$APP.settings.sysmodels.DEVICE,\n\t\t\t\t{\n\t\t\t\t\tuserId: existingUser.id,\n\t\t\t\t\tactive: true,\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (!existingDevice)\n\t\t\t\tawait $APP.SysModel.add($APP.settings.sysmodels.DEVICE, device);\n\t\t\treturn existingUser;\n\t\t}\n\t}\n\n\tconst { publicKey, privateKey } = await generateKeyPair();\n\tconst newUser = user || {\n\t\tid: user?.id || generateId(),\n\t\tname: user?.name || \"Local User\",\n\t\tpublicKey,\n\t\tprivateKey,\n\t\tappId: app.id,\n\t\tactive: true,\n\t};\n\tawait $APP.SysModel.add($APP.settings.sysmodels.USER, newUser);\n\n\tconst newDevice = device || {\n\t\tuserId: newUser.id,\n\t\tappId: app.id,\n\t\tactive: true,\n\t};\n\tawait $APP.SysModel.add($APP.settings.sysmodels.DEVICE, newDevice);\n\tnewUser.privateKey = null;\n\treturn newUser;\n};\n\nconst getApp = async () => {\n\treturn await $APP.SysModel.get($APP.settings.sysmodels.APP, {\n\t\tactive: true,\n\t});\n};\n\nconst getUser = async (_app) => {\n\tconst app = _app || (await $APP.Backend.getApp());\n\t// Reset cached user if the app context has changed\n\tif ($APP.Backend.user && $APP.Backend.user.appId !== app.id) {\n\t\t$APP.Backend.user = null;\n\t}\n\n\tif (!$APP.Backend.user) {\n\t\tlet puser = await $APP.SysModel.get($APP.settings.sysmodels.USER, {\n\t\t\tappId: app.id, // Ensure we get user for the correct app\n\t\t\tactive: true,\n\t\t});\n\t\tif (!puser)\n\t\t\tpuser = await $APP.Backend.createUserEntry({\n\t\t\t\tapp,\n\t\t\t});\n\t\tconst { privateKey, active, ...user } = puser;\n\t\t$APP.Backend.user = user;\n\t}\n\treturn $APP.Backend.user;\n};\n\nconst getDevice = async ({ app: _app, user: _user } = {}) => {\n\tconst app = _app || (await $APP.Backend.getApp());\n\tconst user = _user || (await $APP.Backend.getUser(app));\n\tif (!user) throw new Error(\"User not found\");\n\tconst device = await $APP.SysModel.get($APP.settings.sysmodels.DEVICE, {\n\t\tuserId: user.id,\n\t\tactive: true,\n\t});\n\treturn device || null;\n};\n\nconst migrateData = async (_data, skipDynamicCheck = false) => {\n\tconst data = _data ?? $APP.data;\n\tconst { SysModel } = $APP;\n\tconst app = await getApp();\n\n\tconst appsData = Object.entries(data);\n\tif (appsData.length) {\n\t\tfor (const [modelName, entries] of appsData) {\n\t\t\tif (!skipDynamicCheck && $APP.dynamicModels.includes(modelName))\n\t\t\t\t$APP.dynamicData.add([modelName, entries]);\n\t\t\telse\n\t\t\t\tawait Model[modelName].addMany(entries, {\n\t\t\t\t\tkeepIndex: true,\n\t\t\t\t});\n\t\t}\n\t\tDatabase.app = await SysModel.edit($APP.settings.sysmodels.APP, {\n\t\t\tid: app.id,\n\t\t\tmigrationTimestamp: Date.now(),\n\t\t});\n\t}\n};\n\nconst setupAppEnvironment = async (app) => {\n\tDatabase.app = app;\n\tawait Database.reload({\n\t\tname: app.id,\n\t\tmodels: app.models,\n\t\tversion: app.version,\n\t});\n\n\tconst { active, privateKey, ...user } = await getUser(app);\n\tconst device = await getDevice({\n\t\tapp,\n\t\tuser,\n\t});\n\tif ($APP.data && !app.migrationTimestamp) {\n\t\tawait migrateData($APP.data);\n\t\tapp = await getApp();\n\t}\n\n\treturn {\n\t\tapp,\n\t\tuser,\n\t\tdevice,\n\t\tmodels: app.models,\n\t};\n};\n\nconst addModel = createModelAdder({\n\t$APP,\n\tgetApp,\n});\n\nconst Backend = {\n\tbootstrap: async () => {\n\t\tlet app = await getApp();\n\t\tif (!app) {\n\t\t\tapp = await createAppEntry();\n\t\t}\n\t\tawait $APP.hooks.run(\"APP:BACKEND_STARTED\", {\n\t\t\tapp,\n\t\t\tmodels: app.models,\n\t\t});\n\t\treturn setupAppEnvironment(app);\n\t},\n\thandleMessage,\n\tgetApp,\n\tgetDevice,\n\tcreateAppEntry,\n\tcreateUserEntry,\n\tgetUser,\n\tgenerateId,\n\tbroadcast,\n\taddModel,\n\trequestFromClient,\n};\n\n$APP.events.set({\n\tINIT_APP: async ({ respond }) => {\n\t\tawait $APP.hooks.add(\"APP:DATABASE_STARTED\", async () => {\n\t\t\tconst app = await getApp();\n\t\t\tconst user = await getUser();\n\t\t\tconst device = await getDevice();\n\t\t\trespond({ app, user, device });\n\t\t});\n\t},\n\tGET_CURRENT_APP: async ({ respond }) => {\n\t\tconst app = await $APP.Backend.getApp();\n\t\trespond(app);\n\t},\n\tLIST_APPS: async ({ respond }) => {\n\t\tconst apps = await $APP.SysModel.getMany($APP.settings.sysmodels.APP);\n\t\trespond(apps || []);\n\t},\n\tCREATE_APP: async ({ respond }) => {\n\t\tconst currentApp = await $APP.Backend.getApp();\n\t\tif (currentApp) {\n\t\t\tawait $APP.SysModel.edit($APP.settings.sysmodels.APP, {\n\t\t\t\tid: currentApp.id,\n\t\t\t\tactive: false,\n\t\t\t});\n\t\t}\n\n\t\tconst newApp = await $APP.Backend.createAppEntry();\n\t\tconst env = await setupAppEnvironment(newApp);\n\t\trespond(env.app);\n\t},\n\tSELECT_APP: async ({ payload, respond }) => {\n\t\tconst { appId } = payload;\n\t\tif (!appId) {\n\t\t\treturn respond({\n\t\t\t\terror: \"An 'appId' is required to select an app.\",\n\t\t\t});\n\t\t}\n\n\t\tconst currentApp = await $APP.Backend.getApp();\n\t\tif (currentApp && currentApp.id !== appId) {\n\t\t\tawait $APP.SysModel.edit($APP.settings.sysmodels.APP, {\n\t\t\t\tid: currentApp.id,\n\t\t\t\tactive: false,\n\t\t\t});\n\t\t}\n\n\t\tawait $APP.SysModel.edit($APP.settings.sysmodels.APP, {\n\t\t\tid: appId,\n\t\t\tactive: true,\n\t\t});\n\n\t\tconst selectedApp = await $APP.SysModel.get($APP.settings.sysmodels.APP, {\n\t\t\tid: appId,\n\t\t});\n\n\t\tconst env = await setupAppEnvironment(selectedApp);\n\t\trespond(env.app);\n\t},\n\n\tGET_DB_DUMP: async ({ respond }) => {\n\t\tconst dump = await Database.createDBDump();\n\t\trespond(dump);\n\t},\n\n\tLOAD_DB_DUMP: async ({ payload, respond = console.log }) => {\n\t\ttry {\n\t\t\tDatabase.loadDBDump(payload);\n\t\t\trespond({ success: true });\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Failed to load DB dump:\", error);\n\t\t\trespond({ success: false, error });\n\t\t}\n\t},\n});\n$APP.setLibrary({\n\tname: \"backend\",\n\tpath: \"mvc/controller/backend\",\n\talias: \"Backend\",\n\tbase: Backend,\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/model/backend.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport Database from \"/modules/mvc/model/database/index.js\";\nimport Model from \"/modules/mvc/model/index.js\";\n\nconst queryModelEvents = {\n\tDISCONNECT: (_, { port }) => port.removePort(),\n\tCREATE_REMOTE_WORKSPACE: async ({ payload }, { importDB }) =>\n\t\timportDB(payload),\n\tADD_REMOTE_USER: async ({ payload }) => $APP.Backend.createUserEntry(payload),\n\tADD: async ({ payload, respond }) => {\n\t\tconst response = await Database.add(\n\t\t\tpayload.model,\n\t\t\tpayload.row,\n\t\t\tpayload.opts,\n\t\t);\n\t\trespond(response);\n\t},\n\tADD_MANY: async ({ payload, respond }) => {\n\t\tconst response = await Database.addMany(\n\t\t\tpayload.model,\n\t\t\tpayload.rows,\n\t\t\tpayload.opts,\n\t\t);\n\t\trespond({ success: true, results: response });\n\t},\n\tREMOVE: async ({ payload, respond }) => {\n\t\tconst response = await Database.remove(\n\t\t\tpayload.model,\n\t\t\tpayload.id,\n\t\t\tpayload.opts,\n\t\t);\n\t\trespond(response);\n\t},\n\tREMOVE_MANY: async ({ payload, respond }) => {\n\t\tconst response = await Database.removeMany(\n\t\t\tpayload.model,\n\t\t\tpayload.ids,\n\t\t\tpayload.opts,\n\t\t);\n\t\trespond({ success: true, results: response });\n\t},\n\tEDIT: async ({ payload, respond }) => {\n\t\tconst response = await Database.edit(\n\t\t\tpayload.model,\n\t\t\tpayload.row,\n\t\t\tpayload.opts,\n\t\t);\n\t\trespond(response);\n\t},\n\tEDIT_MANY: async ({ payload, respond }) => {\n\t\tconst response = await Database.editMany(\n\t\t\tpayload.model,\n\t\t\tpayload.rows,\n\t\t\tpayload.opts,\n\t\t);\n\t\trespond({ success: true, results: response });\n\t},\n\tGET: async ({ payload, respond }) => {\n\t\tconst { id, model, opts = {} } = payload;\n\t\tconst response = await Database.get(\n\t\t\tmodel,\n\t\t\tid ??\n\t\t\t\t(opts.filter &&\n\t\t\t\t\t((typeof opts.filter === \"string\" && JSON.parse(opts.filter)) ||\n\t\t\t\t\t\topts.filter)),\n\t\t\topts,\n\t\t);\n\t\trespond(response);\n\t},\n\tGET_MANY: async ({ payload: { model, opts = {} }, respond } = {}) => {\n\t\tconst response = await Database.getMany(model, opts.filter, opts);\n\t\trespond(response);\n\t},\n};\n\n$APP.events.set(queryModelEvents);\n\nconst request = (action, modelName, payload = {}) => {\n\treturn new Promise((resolve) => {\n\t\tconst event = queryModelEvents[action];\n\t\tif (event && typeof event === \"function\") {\n\t\t\tevent({\n\t\t\t\trespond: resolve,\n\t\t\t\tpayload: {\n\t\t\t\t\tmodel: modelName,\n\t\t\t\t\t...payload,\n\t\t\t\t},\n\t\t\t});\n\t\t} else resolve({ success: false, error: `Action \"${action}\" not found.` });\n\t});\n};\n\nconst syncRelationships = ({ model, row }) => {\n\tif (!row) return;\n\n\tconst props = $APP.models[model];\n\tconst relationships = Object.entries(props).filter(\n\t\t([, prop]) => prop.belongs && prop.targetModel !== \"*\",\n\t);\n\n\tif (!relationships.length) return;\n\n\trelationships.forEach(([key, prop]) => {\n\t\tif (row[key]) {\n\t\t\t$APP.Backend.broadcast({\n\t\t\t\ttype: \"REQUEST_DATA_SYNC\",\n\t\t\t\tpayload: {\n\t\t\t\t\tkey: `get:${row[key]}`,\n\t\t\t\t\tmodel: prop.targetModel,\n\t\t\t\t\tdata: undefined,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n};\n\nconst handleExtensions = ({ row, db, model }) => {\n\tif (!row.models) return;\n\tconst currentExtensions = new Set(row.extensions || []);\n\tconst foundExtensions = new Set();\n\tObject.values(row.models).forEach((modelSchema) =>\n\t\tObject.keys(modelSchema).forEach((prop) => {\n\t\t\tif (prop.startsWith(\"$\")) {\n\t\t\t\tfoundExtensions.add(prop.slice(1));\n\t\t\t}\n\t\t}),\n\t);\n\tconst newExtensions = [...foundExtensions].filter(\n\t\t(ext) => !currentExtensions.has(ext),\n\t);\n\n\tif (newExtensions.length === 0) return;\n\n\tconsole.log(`New extensions found: ${newExtensions.join(\", \")}`);\n\n\tnewExtensions.forEach((extensionName) => {\n\t\tconsole.log(`Initializing extension: ${extensionName}`);\n\t\t$APP.DatabaseExtensions.add(extensionName);\n\t});\n\n\tconst allExtensions = [...currentExtensions, ...newExtensions];\n\tdb.edit(model, { ...row, extensions: allExtensions });\n};\n\n$APP.hooks.set({\n\t\"ModelAddRecord-App\": handleExtensions,\n\t\"ModelEditRecord-App\": handleExtensions,\n\n\tonAddRecord({ model, row, system }) {\n\t\tif (system) return;\n\t\t$APP.Backend.broadcast({\n\t\t\ttype: \"REQUEST_DATA_SYNC\",\n\t\t\tpayload: { key: `get:${row.id}`, model, data: row },\n\t\t});\n\t\tsyncRelationships({ model, row });\n\t\tconsole.log(\"BROADCAST MESSAGE\", {\n\t\t\tsystem,\n\t\t\ttype: \"REQUEST_DATA_SYNC\",\n\t\t\tpayload: { key: `get:${row.id}`, model, data: row },\n\t\t});\n\t},\n\n\tonEditRecord({ model, row, system }) {\n\t\tif (system) return;\n\t\t$APP.Backend.broadcast({\n\t\t\ttype: \"REQUEST_DATA_SYNC\",\n\t\t\tpayload: { key: `get:${row.id}`, model, data: row },\n\t\t});\n\t\tsyncRelationships({ model, row });\n\t},\n\n\tonRemoveRecord({ model, row, id, system }) {\n\t\tif (system) return;\n\t\t$APP.Backend.broadcast({\n\t\t\ttype: \"REQUEST_DATA_SYNC\",\n\t\t\tpayload: { key: `get:${id}`, model, data: undefined },\n\t\t});\n\t\tsyncRelationships({ model, row });\n\t},\n});\n\nModel.request = request;\nexport default Model;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/model/database/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport Model from \"/modules/mvc/model/backend.js\";\nimport metadata from \"/modules/mvc/model/extensions/metadata.js\";\nimport operations from \"/modules/mvc/model/extensions/operations.js\";\nimport IndexedDBWrapper from \"/modules/mvc/model/indexeddb/index.js\";\nimport T from \"/modules/types/index.js\";\n\nconst availableDatabaseExtensions = { operations, metadata };\n\n$APP.sysmodels.set({\n\t[$APP.settings.sysmodels.APP]: {\n\t\tname: T.string({ index: true, primary: true }).$,\n\t\tversion: T.number().$,\n\t\tusers: T.many($APP.settings.sysmodels.USER, \"appId\").$,\n\t\tactive: T.boolean({ defaultValue: true, index: true }).$,\n\t\tmodels: T.object().$,\n\t\tmigrationTimestamp: T.number().$,\n\t},\n\t[$APP.settings.sysmodels.USER]: {\n\t\tname: T.string({ index: true, primary: true }).$,\n\t\tappId: T.one($APP.settings.sysmodels.APP, \"users\").$,\n\t\tdevices: T.many($APP.settings.sysmodels.DEVICE, \"userId\").$,\n\t\tpublicKey: T.string().$,\n\t\tprivateKey: T.string().$,\n\t\tactive: T.boolean({ index: true }).$,\n\t},\n\t[$APP.settings.sysmodels.DEVICE]: {\n\t\tname: T.string({ index: true, primary: true }).$,\n\t\tuserId: T.one($APP.settings.sysmodels.USER, \"devices\").$,\n\t\tdeviceData: T.string().$,\n\t\tactive: T.number({ defaultValue: true, index: true }).$,\n\t},\n});\n\nconst isSystem = (model) => !!$APP.sysmodels[model];\n\n$APP.addModule({\n\tname: \"DatabaseExtensions\",\n\tbase: $APP.storage.install([]),\n});\n\nconst filterExtensionModels = (models, ext) =>\n\tObject.fromEntries(\n\t\tObject.entries(models)\n\t\t\t.filter(([_, schema]) => Object.hasOwn(schema, `$${ext}`))\n\t\t\t.map(([model]) => [model, availableDatabaseExtensions[ext]]),\n\t);\n\nconst loadDBDump = async (payload) => {\n\tconst { dump } = payload;\n\tconst app = payload.app ?? (await getApp());\n\tif (!dump) throw \"No dump provided\";\n\tif (!app) throw \"No app selected\";\n\n\tfor (const [modelName, entries] of Object.entries(dump))\n\t\tif (Model[modelName])\n\t\t\tawait Model[modelName].addMany(entries, { keepIndex: true });\n\n\tawait $APP.SysModel.edit($APP.settings.sysmodels.APP, {\n\t\tid: app.id,\n\t\tmigrationTimestamp: Date.now(),\n\t});\n};\n\nconst createDBDump = async () => {\n\tconst app = await $APP.Backend.getApp();\n\tconst dump = {};\n\tconst modelNames = Object.keys(app.models);\n\n\tfor (const modelName of modelNames)\n\t\tif (Model[modelName])\n\t\t\tdump[modelName] = await Model[modelName].getAll({ object: true });\n\n\treturn dump;\n};\n\nconst createDatabase = () => {\n\tlet models;\n\tlet version;\n\tlet name;\n\tlet db;\n\tlet system;\n\tconst extdbs = {};\n\tconst stores = {};\n\n\tconst open = async (props = {}) => {\n\t\tif (props.extensions) $APP.DatabaseExtensions.add(...props.extensions);\n\t\tif (props.name) name = props.name;\n\t\tif (props.models) models = props.models;\n\t\tif (props.version) version = props.version;\n\t\tsystem = props.system === true;\n\t\tif (db) db.close();\n\t\tdb = await IndexedDBWrapper.open({\n\t\t\tname,\n\t\t\tversion,\n\t\t\tmodels,\n\t\t});\n\t\tif ($APP.DatabaseExtensions.length && !system) {\n\t\t\t$APP.DatabaseExtensions.forEach(async (ext) => {\n\t\t\t\textdbs[ext] = await IndexedDBWrapper.open({\n\t\t\t\t\tname: `${name}_${ext}`,\n\t\t\t\t\tversion,\n\t\t\t\t\tmodels: filterExtensionModels(models, ext),\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n\n\tconst _loadRelationshipsForMany = async (rows, modelName, includes, opts) => {\n\t\tif (!rows || rows.length === 0 || !includes || includes.length === 0)\n\t\t\treturn;\n\t\tconst modelDef = models[modelName];\n\t\tconst idsToFetchByModel = {};\n\t\tconst relationshipDetails = {};\n\n\t\tfor (const relation of includes) {\n\t\t\tconst relationDef = modelDef[relation];\n\t\t\tif (!relationDef) continue;\n\t\t\trelationshipDetails[relation] = relationDef;\n\n\t\t\tconst { targetModel, belongs, polymorphic, mixed } = relationDef;\n\n\t\t\tfor (const row of rows) {\n\t\t\t\tlet fkValue = row[relation];\n\n\t\t\t\tif (belongs) {\n\t\t\t\t\tfkValue = row[relation];\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (fkValue === null || fkValue === undefined) continue;\n\n\t\t\t\tconst addId = (model, id) => {\n\t\t\t\t\tif (!idsToFetchByModel[model]) idsToFetchByModel[model] = new Set();\n\t\t\t\t\tidsToFetchByModel[model].add(id);\n\t\t\t\t};\n\n\t\t\t\tconst processFkValue = (val) => {\n\t\t\t\t\tif (polymorphic) {\n\t\t\t\t\t\tif (typeof val === \"string\") {\n\t\t\t\t\t\t\tconst [polyModel, polyId] = val.split(\"@\");\n\t\t\t\t\t\t\tif (polyModel && polyId) addId(polyModel, polyId);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof val === \"string\") {\n\t\t\t\t\t\taddId(targetModel, val);\n\t\t\t\t\t} else if (mixed && typeof val === \"object\" && val !== null) {\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (Array.isArray(fkValue)) {\n\t\t\t\t\tfkValue.forEach(processFkValue);\n\t\t\t\t} else {\n\t\t\t\t\tprocessFkValue(fkValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst fetchedItemsByModel = {};\n\t\tfor (const [modelToFetch, idSet] of Object.entries(idsToFetchByModel)) {\n\t\t\tif (idSet.size > 0) {\n\t\t\t\tconst ids = Array.from(idSet);\n\t\t\t\tconst items = await api.getMany(modelToFetch, ids);\n\t\t\t\tfetchedItemsByModel[modelToFetch] = items.reduce((acc, item) => {\n\t\t\t\t\tacc[item.id] = item;\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {});\n\t\t\t}\n\t\t}\n\n\t\tfor (const row of rows) {\n\t\t\tfor (const relation of includes) {\n\t\t\t\tconst relationDef = relationshipDetails[relation];\n\t\t\t\tif (!relationDef) continue;\n\n\t\t\t\tconst { targetModel, belongs, polymorphic, mixed, many } = relationDef;\n\t\t\t\tconst transform = opts.transform ?? relationDef.transform;\n\n\t\t\t\tif (belongs) {\n\t\t\t\t\tconst fkValueOnCurrentRow = row[relation];\n\t\t\t\t\tif (\n\t\t\t\t\t\tfkValueOnCurrentRow === null ||\n\t\t\t\t\t\tfkValueOnCurrentRow === undefined\n\t\t\t\t\t) {\n\t\t\t\t\t\trow[relation] = many ? [] : null;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst stitch = (fk) => {\n\t\t\t\t\t\tlet model = targetModel;\n\t\t\t\t\t\tlet id = fk;\n\t\t\t\t\t\tif (polymorphic && typeof fk === \"string\") {\n\t\t\t\t\t\t\t[model, id] = fk.split(\"@\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (mixed && typeof fk === \"object\" && fk !== null) return fk;\n\n\t\t\t\t\t\tconst item = fetchedItemsByModel[model]?.[id] ?? null;\n\t\t\t\t\t\treturn transform ? transform(item, model) : item;\n\t\t\t\t\t};\n\n\t\t\t\t\tif (many) {\n\t\t\t\t\t\trow[relation] = Array.isArray(fkValueOnCurrentRow)\n\t\t\t\t\t\t\t? fkValueOnCurrentRow.map(stitch).filter(Boolean)\n\t\t\t\t\t\t\t: [];\n\t\t\t\t\t} else {\n\t\t\t\t\t\trow[relation] = stitch(fkValueOnCurrentRow);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet filter;\n\t\t\t\t\tif (polymorphic) {\n\t\t\t\t\t\tconst searchPolymorphicId = `${modelName}@${row.id}`;\n\t\t\t\t\t\tconst targetFkDef =\n\t\t\t\t\t\t\tmodels[targetModel]?.[relationDef.targetForeignKey];\n\t\t\t\t\t\tif (targetFkDef?.many) {\n\t\t\t\t\t\t\tfilter = {\n\t\t\t\t\t\t\t\t[relationDef.targetForeignKey]: {\n\t\t\t\t\t\t\t\t\t$contains: searchPolymorphicId,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfilter = { [relationDef.targetForeignKey]: searchPolymorphicId };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfilter = { [relationDef.targetForeignKey]: row.id };\n\t\t\t\t\t}\n\t\t\t\t\trow[relation] = await api.getMany(targetModel, filter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst api = {\n\t\tloadDBDump,\n\t\tcreateDBDump,\n\t\textdbs,\n\t\tget db() {\n\t\t\treturn db;\n\t\t},\n\t\tget models() {\n\t\t\treturn models;\n\t\t},\n\t\tget version() {\n\t\t\treturn db?.version;\n\t\t},\n\t\topen,\n\t\tstores,\n\t\treload: open,\n\t\tcount: (...args) => db.count(...args),\n\t\tisEmpty: (...args) => db.isEmpty(...args),\n\t\tasync put(model, row = {}, opts = {}) {\n\t\t\tconst { skipRelationship = false, currentRow = {} } = opts;\n\t\t\tconst properties = models[model];\n\t\t\tif (!properties)\n\t\t\t\treturn console.error(\n\t\t\t\t\t`Model ${model} not found. current schema version: ${version} / ${db.version}`,\n\t\t\t\t);\n\t\t\tif (isSystem(model)) {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = await db.put(model, row);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tconst row = await db.get(model, result);\n\t\t\t\t\t\treturn [null, row];\n\t\t\t\t\t}\n\t\t\t\t\treturn [null, null];\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn [error, null];\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst [errors, validatedRow] = T.validateType(row, {\n\t\t\t\tschema: models[model],\n\t\t\t\trow: currentRow,\n\t\t\t\tundefinedProps: !!opts.insert,\n\t\t\t\tvalidateVirtual: true,\n\t\t\t});\n\t\t\tif (errors) return [errors, null];\n\t\t\ttry {\n\t\t\t\tif (skipRelationship) {\n\t\t\t\t\tawait db.put(model, validatedRow, opts);\n\t\t\t\t\treturn [null, validatedRow];\n\t\t\t\t}\n\t\t\t\tconst storesToTransact = [model];\n\t\t\t\tconst relationships = Object.keys(properties).filter((prop) => {\n\t\t\t\t\tconst propDef = properties[prop];\n\t\t\t\t\tconst bool =\n\t\t\t\t\t\tpropDef.targetModel &&\n\t\t\t\t\t\tpropDef.relationship &&\n\t\t\t\t\t\tvalidatedRow[prop] !== undefined &&\n\t\t\t\t\t\tvalidatedRow[prop] !== null;\n\t\t\t\t\tif (bool && !storesToTransact.includes(propDef.targetModel)) {\n\t\t\t\t\t\tif (propDef.polymorphic) {\n\t\t\t\t\t\t} else storesToTransact.push(propDef.targetModel);\n\t\t\t\t\t}\n\t\t\t\t\treturn bool;\n\t\t\t\t});\n\t\t\t\tconst id = validatedRow.id || row.id;\n\t\t\t\tconst updates = [];\n\t\t\t\tfor (const propKey of relationships) {\n\t\t\t\t\tconst prop = properties[propKey];\n\t\t\t\t\tlet relatedValue = validatedRow[propKey];\n\t\t\t\t\tif (prop.many && Array.isArray(relatedValue)) {\n\t\t\t\t\t\tconst newFkArray = [];\n\t\t\t\t\t\tfor (const item of relatedValue) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttypeof item === \"string\" ||\n\t\t\t\t\t\t\t\t(prop.mixed && typeof item === \"object\" && item !== null)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tnewFkArray.push(item);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst childModel = prop.targetModel;\n\t\t\t\t\t\t\t\tif (models[childModel]) {\n\t\t\t\t\t\t\t\t\tconst newChildRow = { ...item };\n\t\t\t\t\t\t\t\t\tif (!newChildRow.id)\n\t\t\t\t\t\t\t\t\t\tnewChildRow.id = $APP.Backend.generateId();\n\n\t\t\t\t\t\t\t\t\tupdates.push([childModel, newChildRow]);\n\t\t\t\t\t\t\t\t\tif (!storesToTransact.includes(childModel))\n\t\t\t\t\t\t\t\t\t\tstoresToTransact.push(childModel);\n\n\t\t\t\t\t\t\t\t\tconst idToStore = prop.polymorphic\n\t\t\t\t\t\t\t\t\t\t? `${childModel}@${newChildRow.id}`\n\t\t\t\t\t\t\t\t\t\t: newChildRow.id;\n\t\t\t\t\t\t\t\t\tnewFkArray.push(idToStore);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalidatedRow[propKey] = newFkArray;\n\t\t\t\t\t\trelatedValue = newFkArray;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!models[prop.targetModel] && !prop?.polymorphic) {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t`ERROR: couldn't find target model '${prop.targetModel}' for relationship '${propKey}' on model '${model}'`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconst fkProp = models[prop.targetModel]?.[prop.targetForeignKey];\n\t\t\t\t\tif (!fkProp) {\n\t\t\t\t\t\tif (!prop.belongs) {\n\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t`WARN: couldn't find target foreign key '${prop.targetForeignKey}' in model '${prop.targetModel}' for relationship '${propKey}' from '${model}'. This might be a one-way definition or configuration issue.`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (fkProp.belongs) {\n\t\t\t\t\t\tconst effectiveFkId = fkProp.polymorphic ? `${model}@${id}` : id;\n\t\t\t\t\t\tconst targetIsMany = fkProp.many;\n\n\t\t\t\t\t\tif (targetIsMany) {\n\t\t\t\t\t\t\tconst fks = Array.isArray(relatedValue)\n\t\t\t\t\t\t\t\t? relatedValue\n\t\t\t\t\t\t\t\t: [relatedValue];\n\t\t\t\t\t\t\tif (fks.length) {\n\t\t\t\t\t\t\t\tconst targets = await api.getMany(\n\t\t\t\t\t\t\t\t\tprop.targetModel,\n\t\t\t\t\t\t\t\t\tfks.map((fk) => (fk && typeof fk === \"object\" ? fk.id : fk)),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\ttargets.forEach((target) => {\n\t\t\t\t\t\t\t\t\tif (target) {\n\t\t\t\t\t\t\t\t\t\tconst fk = target[prop.targetForeignKey];\n\t\t\t\t\t\t\t\t\t\tif (!fk) target[prop.targetForeignKey] = [effectiveFkId];\n\t\t\t\t\t\t\t\t\t\telse if (!fk.includes(effectiveFkId))\n\t\t\t\t\t\t\t\t\t\t\tfk.push(effectiveFkId);\n\t\t\t\t\t\t\t\t\t\tupdates.push([prop.targetModel, target]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst targetId =\n\t\t\t\t\t\t\t\ttypeof relatedValue === \"string\"\n\t\t\t\t\t\t\t\t\t? relatedValue\n\t\t\t\t\t\t\t\t\t: relatedValue?.id;\n\t\t\t\t\t\t\tif (targetId) {\n\t\t\t\t\t\t\t\tconst target = await api.get(prop.targetModel, targetId);\n\t\t\t\t\t\t\t\tif (target) {\n\t\t\t\t\t\t\t\t\ttarget[prop.targetForeignKey] = effectiveFkId;\n\t\t\t\t\t\t\t\t\tupdates.push([prop.targetModel, target]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!prop.belongs && !properties[propKey]?.polymorphic) {\n\t\t\t\t\t\tdelete validatedRow[propKey];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tupdates.push([model, validatedRow]);\n\t\t\t\tconst tx = await db.transaction(storesToTransact);\n\t\t\t\tconst relatedPuts = updates.map(([m, r]) => tx.put(m, r));\n\t\t\t\tawait Promise.all(relatedPuts);\n\t\t\t\tawait tx.done();\n\t\t\t\treturn [null, validatedRow];\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"Error in put operation:\", error, {\n\t\t\t\t\tmodel,\n\t\t\t\t\trow,\n\t\t\t\t\tmodels,\n\t\t\t\t\tversion,\n\t\t\t\t});\n\t\t\t\treturn [error, null];\n\t\t\t}\n\t\t},\n\t\tasync get(model, filter, opts = {}) {\n\t\t\tif (!filter) return null;\n\t\t\tconst { insert = false, includes = [], recursive = null } = opts;\n\t\t\tlet row = await db.get(model, filter);\n\t\t\tif (!row && !insert) return null;\n\t\t\tif (!row && insert) {\n\t\t\t\tconst [error, newRow] = await api.add(\n\t\t\t\t\tmodel,\n\t\t\t\t\ttypeof filter === \"object\" ? filter : { id: filter },\n\t\t\t\t\t{\n\t\t\t\t\t\tskipRelationship: true,\n\t\t\t\t\t\t...(typeof filter !== \"object\" && {\n\t\t\t\t\t\t\toverrideId: true,\n\t\t\t\t\t\t\tkeepIndex: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.error(\"Failed to insert record in get():\", error);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\trow = newRow;\n\t\t\t}\n\t\t\tif (row && includes.length) {\n\t\t\t\tawait _loadRelationshipsForMany([row], model, includes, opts);\n\t\t\t}\n\t\t\tif (row && recursive) {\n\t\t\t\tconst visited = new Set();\n\t\t\t\tlet itemsToProcess = [row];\n\t\t\t\tconst relationName = recursive;\n\t\t\t\twhile (itemsToProcess.length > 0) {\n\t\t\t\t\tconst currentBatch = [];\n\t\t\t\t\tfor (const item of itemsToProcess) {\n\t\t\t\t\t\tconst modelForVisitor = item._modelName || model;\n\t\t\t\t\t\tconst visitedKey = `${modelForVisitor}@${item.id}`;\n\t\t\t\t\t\tif (!visited.has(visitedKey)) {\n\t\t\t\t\t\t\tvisited.add(visitedKey);\n\t\t\t\t\t\t\tcurrentBatch.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentBatch.length === 0) break;\n\n\t\t\t\t\tawait _loadRelationshipsForMany(\n\t\t\t\t\t\tcurrentBatch,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t[relationName],\n\t\t\t\t\t\topts,\n\t\t\t\t\t);\n\n\t\t\t\t\titemsToProcess = [];\n\t\t\t\t\tfor (const item of currentBatch) {\n\t\t\t\t\t\tconst children = item[relationName];\n\t\t\t\t\t\tif (Array.isArray(children)) {\n\t\t\t\t\t\t\tchildren.forEach((child) => {\n\t\t\t\t\t\t\t\tif (child) {\n\t\t\t\t\t\t\t\t\tconst relDef = models[model][relationName];\n\t\t\t\t\t\t\t\t\tif (relDef) child._modelName = relDef.targetModel;\n\t\t\t\t\t\t\t\t\titemsToProcess.push(child);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (children) {\n\t\t\t\t\t\t\tconst relDef = models[model][relationName];\n\t\t\t\t\t\t\tif (relDef) children._modelName = relDef.targetModel;\n\t\t\t\t\t\t\titemsToProcess.push(children);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn row;\n\t\t},\n\t\tasync getMany(model, filter, opts = {}) {\n\t\t\tconst { limit, offset, order, includes = [], recursive = null } = opts;\n\t\t\tlet items;\n\t\t\tif (Array.isArray(filter)) {\n\t\t\t\titems = (\n\t\t\t\t\tawait Promise.all(filter.map((id) => db.get(model, id)))\n\t\t\t\t).filter((item) => item !== null);\n\t\t\t} else {\n\t\t\t\titems = await db.getMany(model, filter, {\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torder,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (includes.length && items.length)\n\t\t\t\tawait _loadRelationshipsForMany(items, model, includes, opts);\n\n\t\t\tif (recursive && items.length) {\n\t\t\t\tconst visited = new Set();\n\t\t\t\tlet itemsToProcess = [...items];\n\t\t\t\tconst relationName = recursive;\n\n\t\t\t\twhile (itemsToProcess.length > 0) {\n\t\t\t\t\tconst currentBatch = [];\n\t\t\t\t\tfor (const item of itemsToProcess) {\n\t\t\t\t\t\tconst modelForVisitor = item._modelName || model;\n\t\t\t\t\t\tconst visitedKey = `${modelForVisitor}@${item.id}`;\n\t\t\t\t\t\tif (!visited.has(visitedKey)) {\n\t\t\t\t\t\t\tvisited.add(visitedKey);\n\t\t\t\t\t\t\tcurrentBatch.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentBatch.length === 0) break;\n\n\t\t\t\t\tconst batchModelName = currentBatch[0]._modelName || model;\n\t\t\t\t\tawait _loadRelationshipsForMany(\n\t\t\t\t\t\tcurrentBatch,\n\t\t\t\t\t\tbatchModelName,\n\t\t\t\t\t\t[relationName],\n\t\t\t\t\t\topts,\n\t\t\t\t\t);\n\n\t\t\t\t\titemsToProcess = [];\n\t\t\t\t\tfor (const item of currentBatch) {\n\t\t\t\t\t\tconst children = item[relationName];\n\t\t\t\t\t\tconst relDef = models[batchModelName][relationName];\n\t\t\t\t\t\tif (Array.isArray(children)) {\n\t\t\t\t\t\t\tchildren.forEach((child) => {\n\t\t\t\t\t\t\t\tif (child) {\n\t\t\t\t\t\t\t\t\tif (relDef) child._modelName = relDef.targetModel;\n\t\t\t\t\t\t\t\t\titemsToProcess.push(child);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (children) {\n\t\t\t\t\t\t\tif (relDef) children._modelName = relDef.targetModel;\n\t\t\t\t\t\t\titemsToProcess.push(children);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!limit) return items;\n\n\t\t\tconst count = await db.count(\n\t\t\t\tmodel,\n\t\t\t\tArray.isArray(filter) ? { id: { $in: filter } } : filter,\n\t\t\t);\n\t\t\treturn { count, limit, offset, items };\n\t\t},\n\t\tasync remove(model, id, opts = {}) {\n\t\t\tconst properties = models[model];\n\t\t\tif (!properties) {\n\t\t\t\tconsole.error(`Model ${model} not found for removal.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst row = await api.get(model, id);\n\t\t\tif (!row) return false;\n\t\t\tconst relationships = Object.keys(properties).filter(\n\t\t\t\t(prop) => properties[prop].targetModel && properties[prop].relationship,\n\t\t\t);\n\t\t\tconst storesToTransact = [model];\n\t\t\tconst updates = [];\n\n\t\t\tif (relationships.length > 0) {\n\t\t\t\tfor (const propKey of relationships) {\n\t\t\t\t\tconst propDef = properties[propKey];\n\t\t\t\t\tif (!propDef.targetModel || !propDef.targetForeignKey) continue;\n\n\t\t\t\t\tif (!storesToTransact.includes(propDef.targetModel)) {\n\t\t\t\t\t\tif (propDef.polymorphic) {\n\t\t\t\t\t\t} else storesToTransact.push(propDef.targetModel);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst targetModelName = propDef.targetModel;\n\t\t\t\t\tconst fkFieldNameOnTarget = propDef.targetForeignKey;\n\t\t\t\t\tconst fkFieldDefOnTarget =\n\t\t\t\t\t\tmodels[targetModelName]?.[fkFieldNameOnTarget];\n\n\t\t\t\t\tif (!fkFieldDefOnTarget) continue;\n\n\t\t\t\t\tif (fkFieldDefOnTarget.belongs) {\n\t\t\t\t\t\tconst valueToRemove = fkFieldDefOnTarget.polymorphic\n\t\t\t\t\t\t\t? `${model}@${id}`\n\t\t\t\t\t\t\t: id;\n\t\t\t\t\t\tlet filterForTargets;\n\n\t\t\t\t\t\tif (fkFieldDefOnTarget.many) {\n\t\t\t\t\t\t\tfilterForTargets = {\n\t\t\t\t\t\t\t\t[fkFieldNameOnTarget]: { $contains: valueToRemove },\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else filterForTargets = { [fkFieldNameOnTarget]: valueToRemove };\n\n\t\t\t\t\t\tconst targetsToUpdate = await api.getMany(\n\t\t\t\t\t\t\ttargetModelName,\n\t\t\t\t\t\t\tfilterForTargets,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\ttargetsToUpdate.forEach((target) => {\n\t\t\t\t\t\t\tlet newFkValue;\n\t\t\t\t\t\t\tif (fkFieldDefOnTarget.many) {\n\t\t\t\t\t\t\t\tnewFkValue = (target[fkFieldNameOnTarget] || []).filter(\n\t\t\t\t\t\t\t\t\t(entry) => entry !== valueToRemove,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewFkValue = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tupdates.push([\n\t\t\t\t\t\t\t\ttargetModelName,\n\t\t\t\t\t\t\t\t{ ...target, [fkFieldNameOnTarget]: newFkValue },\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst tx = await db.transaction(storesToTransact);\n\t\t\t\tconst relatedPuts = updates.map(([targetModel, targetRow]) =>\n\t\t\t\t\ttx.put(targetModel, targetRow),\n\t\t\t\t);\n\t\t\t\tconst mainRemove = tx.remove(model, id);\n\t\t\t\tawait Promise.all([...relatedPuts, mainRemove]);\n\t\t\t\tawait tx.done();\n\t\t\t\tconst system = isSystem(model);\n\t\t\t\t[`ModelRemoveRecord-${model}`, \"onRemoveRecord\"].forEach((event) =>\n\t\t\t\t\t$APP.hooks.run(event, {\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\topts,\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tsystem,\n\t\t\t\t\t\trow,\n\t\t\t\t\t\tdb: api,\n\t\t\t\t\t\textensions: Object.keys(models[model])\n\t\t\t\t\t\t\t.filter((prop) => prop[0] === \"$\")\n\t\t\t\t\t\t\t.map((prop) => prop.slice(1)),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t\"Failed to remove record or update relationships:\",\n\t\t\t\t\terror,\n\t\t\t\t\t{ model, id },\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tasync removeMany(model, filter, opts = {}) {\n\t\t\tif (!filter && opts.filter) filter = opts.filter;\n\t\t\tconst entries = Array.isArray(filter)\n\t\t\t\t? filter.map((item) => (typeof item === \"object\" ? item.id : item))\n\t\t\t\t: (await db.getMany(model, filter)).map((entry) => entry.id);\n\t\t\treturn Promise.all(\n\t\t\t\tentries\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.map((entryId) => api.remove(model, entryId, opts)),\n\t\t\t);\n\t\t},\n\t\tasync edit(model, row, _opts = {}) {\n\t\t\tif (!row || !row.id) {\n\t\t\t\tconsole.error(\"Edit operation requires a row with an ID.\", {\n\t\t\t\t\tmodel,\n\t\t\t\t\trow,\n\t\t\t\t});\n\t\t\t\treturn {\n\t\t\t\t\terrors: { id: \"ID is required for edit.\" },\n\t\t\t\t\tmodel,\n\t\t\t\t\trow,\n\t\t\t\t\topts: _opts,\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst opts = {\n\t\t\t\t..._opts,\n\t\t\t\tupdate: true,\n\t\t\t\tcurrentRow:\n\t\t\t\t\t_opts.currentRow ?? (await api.get(model, row.id, { includes: [] })),\n\t\t\t};\n\t\t\tif (!opts.currentRow) {\n\t\t\t\tconsole.warn(`Record not found for edit: ${model} with id ${row.id}`);\n\t\t\t\treturn { errors: { record: \"Record not found.\" }, model, row, opts };\n\t\t\t}\n\t\t\tconst [errors, patchResult] = await api.put(\n\t\t\t\tmodel,\n\t\t\t\t{ ...opts.currentRow, ...row },\n\t\t\t\topts,\n\t\t\t);\n\n\t\t\tif (errors) return { errors, model, row, opts };\n\t\t\tconst system = isSystem(model);\n\t\t\t[`ModelEditRecord-${model}`, \"onEditRecord\"].forEach((event) =>\n\t\t\t\t$APP.hooks.run(event, {\n\t\t\t\t\trow,\n\t\t\t\t\tmodel,\n\t\t\t\t\tsystem,\n\t\t\t\t\topts,\n\t\t\t\t\tdb: api,\n\t\t\t\t\textensions: Object.keys(models[model])\n\t\t\t\t\t\t.filter((prop) => prop[0] === \"$\")\n\t\t\t\t\t\t.map((prop) => prop.slice(1)),\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn patchResult;\n\t\t},\n\t\tasync editMany(model, rows, opts = {}) {\n\t\t\tif (!rows?.length) return [];\n\t\t\tconst results = await Promise.allSettled(\n\t\t\t\trows.map(async (row) => {\n\t\t\t\t\tif (row?.id) return api.edit(model, row, opts);\n\t\t\t\t\treturn { errors: { id: \"Row or ID missing for editMany\" }, row };\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn results;\n\t\t},\n\t\tasync editAll(model, filter, updates, opts = {}) {\n\t\t\tconst rows = await db.getMany(model, filter, {\n\t\t\t\t...opts,\n\t\t\t});\n\t\t\tconst results = await Promise.allSettled(\n\t\t\t\trows.map((row) =>\n\t\t\t\t\tapi.edit(model, { ...row, ...updates }, { ...opts, currentRow: row }),\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn results;\n\t\t},\n\t\tasync add(model, row, opts = {}) {\n\t\t\tconst newRow = { ...row };\n\t\t\tconst system = isSystem(model);\n\t\t\tif ((!system && !opts.keepIndex && !opts.overrideId) || !newRow.id) {\n\t\t\t\tnewRow.id = $APP.Backend.generateId();\n\t\t\t}\n\t\t\tconst [errors, resultRow] = await api.put(model, newRow, {\n\t\t\t\t...opts,\n\t\t\t\tinsert: true,\n\t\t\t});\n\t\t\tif (errors) return { errors, model, row: newRow, opts };\n\t\t\t[`ModelAddRecord-${model}`, \"onAddRecord\"].forEach((event) =>\n\t\t\t\t$APP.hooks.run(event, {\n\t\t\t\t\tmodel,\n\t\t\t\t\trow: resultRow,\n\t\t\t\t\tsystem,\n\t\t\t\t\topts,\n\t\t\t\t\tdb: api,\n\t\t\t\t\textensions: Object.keys(models[model])\n\t\t\t\t\t\t.filter((prop) => prop[0] === \"$\")\n\t\t\t\t\t\t.map((prop) => prop.slice(1)),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn resultRow;\n\t\t},\n\t\tasync addMany(model, rows = [], opts = {}) {\n\t\t\tconst results = await Promise.allSettled(\n\t\t\t\trows.map((row) => api.add(model, row, opts)),\n\t\t\t);\n\t\t\treturn results;\n\t\t},\n\t};\n\treturn api;\n};\n\nexport const SysModel = createDatabase();\nawait SysModel.open({\n\tname: $APP.settings.sysmodels.APP,\n\tversion: 1,\n\tmodels: $APP.sysmodels,\n\tsystem: true,\n});\n$APP.setLibrary({\n\tname: \"sysmodel\",\n\talias: \"SysModel\",\n\tbase: SysModel,\n});\n\nconst Database = createDatabase();\n\n$APP.hooks.add(\"APP:BACKEND_STARTED\", async ({ app, models }) => {\n\tif (!app || !models) {\n\t\tconsole.error(\n\t\t\t\"APP:BACKEND_STARTED hook called with invalid app or models.\",\n\t\t\t{\n\t\t\t\tapp,\n\t\t\t\tmodels,\n\t\t\t},\n\t\t);\n\t\treturn;\n\t}\n\n\tawait Database.open({\n\t\tname: app.id,\n\t\tversion: app.version,\n\t\textensions: app.extensions,\n\t\tsystem: false,\n\t\tmodels: { ...models, ...(app.models || {}) },\n\t});\n\t$APP.hooks.run(\"APP:DATABASE_STARTED\");\n});\n\nexport default Database;\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/model/extensions/metadata.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport Database from \"/modules/mvc/model/database/index.js\";\nimport T from \"/modules/types/index.js\";\n\n$APP.hooks.set({\n\tonAddRecord({ model, row, system, extensions }) {\n\t\tif (system || !Database.extdbs || !extensions.includes(\"metadata\")) return;\n\t\tconst db = Database.extdbs.metadata;\n\t\tif (!db) return console.error(\"Metadata database instance not active.\");\n\t\tdb.put(model, {\n\t\t\tid: row.id,\n\t\t\tcreatedAt: Date.now(),\n\t\t\tupdatedAt: Date.now(),\n\t\t});\n\t},\n\n\tasync onEditRecord({ model, row, system, extensions }) {\n\t\tif (system || !Database.extdbs || !extensions.includes(\"metadata\")) return;\n\t\tconst db = Database.extdbs.metadata;\n\t\tif (!db) return console.error(\"Metadata database instance not active.\");\n\t\tconst metadataRow = await db.get(model, row.id);\n\t\tmetadataRow.updatedAt = Date.now();\n\t\tdb.put(model, metadataRow);\n\t},\n\n\tonRemoveRecord({ model, id, system, extensions }) {\n\t\tif (system || !Database.extdbs || !extensions.includes(\"metadata\")) return;\n\t\tconst db = Database.extdbs.metadata;\n\t\tif (!db) return console.error(\"Metadata database instance not active.\");\n\t\tdb.remove(model, id);\n\t},\n});\n\nexport default {\n\tcreatedAt: T.string({ index: true }).$,\n\tupdatedAt: T.string({ index: true }).$,\n\tcreatedBy: T.string({ index: true }).$,\n\tupdatedBy: T.string({ index: true }).$,\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/model/extensions/operations.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport Database from \"/modules/mvc/model/database/index.js\";\nimport T from \"/modules/types/index.js\";\n\n$APP.hooks.set({\n\tonAddRecord({ model, row, system, extensions }) {\n\t\tif (system || !Database.extdbs || !extensions.includes(\"operations\"))\n\t\t\treturn;\n\t\tconst db = Database.extdbs.operations;\n\t\tif (!db) return console.error(\"Operations database instance not active.\");\n\t\tdb.put(model, {\n\t\t\ttimestamp: Date.now(),\n\t\t\trow,\n\t\t});\n\t},\n\n\tasync onEditRecord({ model, row, system, extensions }) {\n\t\tif (system || !Database.extdbs || !extensions.includes(\"operations\"))\n\t\t\treturn;\n\t\tconst db = Database.extdbs.operations;\n\t\tif (!db) return console.error(\"Operations database instance not active.\");\n\t\tdb.put(model, {\n\t\t\ttimestamp: Date.now(),\n\t\t\trowId: id,\n\t\t\trow,\n\t\t});\n\t},\n\n\tonRemoveRecord({ model, id, system, extensions }) {\n\t\tif (system || !Database.extdbs || !extensions.includes(\"operations\"))\n\t\t\treturn;\n\t\tconst db = Database.extdbs.operations;\n\t\tif (!db) return console.error(\"Operations database instance not active.\");\n\t\tdb.put(model, {\n\t\t\ttimestamp: Date.now(),\n\t\t\tremovedAt: Date.now(),\n\t\t\trowId: id,\n\t\t});\n\t},\n});\n\nexport default {\n\tcreatedAt: T.string({ index: true }).$,\n\tremovedAt: T.string().$,\n\trowId: T.string({ index: true }).$,\n\trow: T.object().$,\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/mvc/model/indexeddb/index.js": {
    "content": "const parseBoolean = { true: 1, false: 0 };\nconst parseBooleanReverse = { true: true, false: false };\n\nasync function open(props) {\n\tconst db = Database(props);\n\tawait db.init();\n\treturn db;\n}\n\nfunction Database({ name: dbName, models, version }) {\n\tlet db = null;\n\tlet isConnected = false;\n\tlet connectionPromise = null;\n\tlet dbVersion = Number(version);\n\n\tconst init = async () => {\n\t\tif (connectionPromise) return connectionPromise;\n\n\t\tconnectionPromise = new Promise((resolve, reject) => {\n\t\t\tconst request = indexedDB.open(dbName, dbVersion);\n\n\t\t\trequest.onerror = (event) => {\n\t\t\t\tconnectionPromise = null;\n\t\t\t\treject(new Error(`Failed to open database: ${event.target.error}`));\n\t\t\t};\n\n\t\t\trequest.onsuccess = (event) => {\n\t\t\t\tdb = event.target.result;\n\t\t\t\tisConnected = true;\n\n\t\t\t\tdb.onversionchange = () => {\n\t\t\t\t\tif (db) {\n\t\t\t\t\t\tdb.close();\n\t\t\t\t\t\tdb = null;\n\t\t\t\t\t\tisConnected = false;\n\t\t\t\t\t\tconnectionPromise = null;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tresolve(db);\n\t\t\t};\n\n\t\t\trequest.onupgradeneeded = (event) => {\n\t\t\t\tconst currentDb = event.target.result;\n\t\t\t\tconst transaction = event.target.transaction;\n\t\t\t\tObject.keys(models).forEach((storeName) => {\n\t\t\t\t\tif (!currentDb.objectStoreNames.contains(storeName)) {\n\t\t\t\t\t\tcreateStore(currentDb, storeName);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst objectStore = transaction.objectStore(storeName);\n\t\t\t\t\t\tconst storeSchema = models[storeName];\n\t\t\t\t\t\tObject.keys(storeSchema).forEach((field) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tstoreSchema[field].index === true &&\n\t\t\t\t\t\t\t\t!objectStore.indexNames.contains(field)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tobjectStore.createIndex(field, field, {\n\t\t\t\t\t\t\t\t\tunique: storeSchema[field].unique || false,\n\t\t\t\t\t\t\t\t\tmultiEntry: storeSchema[field].type === \"array\",\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\n\t\treturn connectionPromise;\n\t};\n\n\tconst close = () => {\n\t\tif (db) {\n\t\t\tdb.close();\n\t\t}\n\t\tdb = null;\n\t\tisConnected = false;\n\t\tconnectionPromise = null;\n\t};\n\n\tconst reload = async (props) => {\n\t\t// Block new connections and wait for any pending one to finish.\n\t\tif (connectionPromise) {\n\t\t\tawait connectionPromise;\n\t\t}\n\n\t\tclose();\n\n\t\t// Update the version and models before re-initializing.\n\t\tdbVersion = props.version;\n\t\tmodels = props.models;\n\t\t// The next call to _ensureDb will trigger a fresh init.\n\n\t\t$APP.Backend.broadcast({\n\t\t\ttype: \"UPDATE_MODELS\",\n\t\t\tpayload: { models },\n\t\t});\n\t\treturn init();\n\t};\n\n\t// This is the gatekeeper for all database operations.\n\tconst _ensureDb = async () => {\n\t\tif (!isConnected || !db) {\n\t\t\tawait init();\n\t\t}\n\t};\n\n\tconst prepareRow = ({ model, row, reverse = false, currentRow = {} }) => {\n\t\tconst parse = reverse ? parseBooleanReverse : parseBoolean;\n\t\tconst modelProps = models[model];\n\t\tconst updatedRow = { ...row };\n\t\tObject.keys(modelProps).forEach((prop) => {\n\t\t\tif (prop.relationship && !prop.belongs) return;\n\t\t\tif (row[prop] === undefined && currentRow[prop] !== undefined) {\n\t\t\t\tupdatedRow[prop] = currentRow[prop];\n\t\t\t} else {\n\t\t\t\tif (modelProps[prop].type === \"boolean\") {\n\t\t\t\t\tupdatedRow[prop] = row[prop] ? parse.true : parse.false;\n\t\t\t\t}\n\t\t\t\tif (updatedRow[prop] === undefined) delete updatedRow[prop];\n\t\t\t}\n\t\t});\n\t\tif (reverse) {\n\t\t\tObject.keys(modelProps).forEach((prop) => {\n\t\t\t\tif (modelProps[prop].type === \"boolean\") {\n\t\t\t\t\tif (updatedRow[prop] === parseBoolean.true) {\n\t\t\t\t\t\tupdatedRow[prop] = true;\n\t\t\t\t\t} else if (updatedRow[prop] === parseBoolean.false) {\n\t\t\t\t\t\tupdatedRow[prop] = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn updatedRow;\n\t};\n\n\tconst matchesFilter = (item, filter, modelName) => {\n\t\tconst modelSchema = models[modelName];\n\t\treturn Object.entries(filter).every(([key, queryValue]) => {\n\t\t\tconst itemValue = item[key];\n\t\t\tconst fieldSchema = modelSchema?.[key];\n\t\t\tif (\n\t\t\t\ttypeof queryValue === \"object\" &&\n\t\t\t\tqueryValue !== null &&\n\t\t\t\t!Array.isArray(queryValue)\n\t\t\t) {\n\t\t\t\treturn Object.entries(queryValue).every(([operator, operand]) => {\n\t\t\t\t\tswitch (operator) {\n\t\t\t\t\t\tcase \"$gt\":\n\t\t\t\t\t\t\treturn itemValue > operand;\n\t\t\t\t\t\tcase \"$gte\":\n\t\t\t\t\t\t\treturn itemValue >= operand;\n\t\t\t\t\t\tcase \"$lt\":\n\t\t\t\t\t\t\treturn itemValue < operand;\n\t\t\t\t\t\tcase \"$lte\":\n\t\t\t\t\t\t\treturn itemValue <= operand;\n\t\t\t\t\t\tcase \"$ne\":\n\t\t\t\t\t\t\treturn itemValue != operand;\n\t\t\t\t\t\tcase \"$in\":\n\t\t\t\t\t\t\treturn Array.isArray(operand) && operand.includes(itemValue);\n\t\t\t\t\t\tcase \"$nin\":\n\t\t\t\t\t\t\treturn Array.isArray(operand) && !operand.includes(itemValue);\n\t\t\t\t\t\tcase \"$contains\":\n\t\t\t\t\t\t\tif (Array.isArray(itemValue)) return itemValue.includes(operand);\n\t\t\t\t\t\t\tif (typeof itemValue === \"string\" && typeof operand === \"string\")\n\t\t\t\t\t\t\t\treturn itemValue.includes(operand);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (fieldSchema?.type === \"boolean\") {\n\t\t\t\treturn Boolean(itemValue) == queryValue;\n\t\t\t}\n\t\t\tif (fieldSchema?.type === \"array\" && Array.isArray(itemValue)) {\n\t\t\t\treturn itemValue.includes(queryValue);\n\t\t\t}\n\t\t\treturn itemValue === queryValue;\n\t\t});\n\t};\n\n\tconst createStore = (db, storeName) => {\n\t\tconst storeSchema = models[storeName];\n\t\tconst objectStore = db.createObjectStore(storeName, {\n\t\t\tkeyPath: \"id\",\n\t\t\tautoIncrement: true,\n\t\t});\n\t\tObject.keys(storeSchema).forEach((field) => {\n\t\t\tif (\n\t\t\t\tstoreSchema[field].index === true ||\n\t\t\t\tstoreSchema[field].unique === true\n\t\t\t) {\n\t\t\t\tobjectStore.createIndex(field, field, {\n\t\t\t\t\tunique: storeSchema[field].unique ?? false,\n\t\t\t\t\tmultiEntry: storeSchema[field].type === \"array\",\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tconst findIndexedProperty = (filter, modelName) => {\n\t\tconst modelSchema = models[modelName];\n\t\tif (!modelSchema || typeof filter !== \"object\" || filter === null)\n\t\t\treturn null;\n\t\tfor (const key in filter) {\n\t\t\tif (Object.hasOwn(filter, key)) {\n\t\t\t\tif (modelSchema[key]?.index) {\n\t\t\t\t\treturn key;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\n\tconst put = async (model, row, opts = {}) => {\n\t\tawait _ensureDb();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst transaction = db.transaction(model, \"readwrite\");\n\t\t\tconst store = transaction.objectStore(model);\n\t\t\tconst request = store.put(\n\t\t\t\tprepareRow({ model, row, currentRow: opts.currentRow }),\n\t\t\t);\n\t\t\trequest.onerror = () =>\n\t\t\t\treject(new Error(`Failed to put: ${request.error}`));\n\t\t\ttransaction.oncomplete = () => resolve(request.result);\n\t\t});\n\t};\n\n\tconst getMany = async (\n\t\tstoreName,\n\t\tfilter = {},\n\t\t{ limit = 0, offset = 0, order = null, keys } = {},\n\t) => {\n\t\tawait _ensureDb();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst transaction = db.transaction(storeName, \"readonly\");\n\t\t\t\tconst store = transaction.objectStore(storeName);\n\t\t\t\tconst items = [];\n\t\t\t\tconst modelSchema = models[storeName];\n\t\t\t\tconst finishProcessingAndResolve = () => {\n\t\t\t\t\tif (order && items.length > 0) {\n\t\t\t\t\t\tconst orderArray = Array.isArray(order)\n\t\t\t\t\t\t\t? order\n\t\t\t\t\t\t\t: order.split(\",\").map((item) => item.trim());\n\t\t\t\t\t\titems.sort((a, b) => {\n\t\t\t\t\t\t\tfor (const currentOrder of orderArray) {\n\t\t\t\t\t\t\t\tlet direction = 1;\n\t\t\t\t\t\t\t\tlet field = currentOrder;\n\t\t\t\t\t\t\t\tif (currentOrder.startsWith(\"-\")) {\n\t\t\t\t\t\t\t\t\tdirection = -1;\n\t\t\t\t\t\t\t\t\tfield = currentOrder.substring(1).trim();\n\t\t\t\t\t\t\t\t} else if (currentOrder.startsWith(\"+\")) {\n\t\t\t\t\t\t\t\t\tfield = currentOrder.substring(1).trim();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst valA = a[field];\n\t\t\t\t\t\t\t\tconst valB = b[field];\n\t\t\t\t\t\t\t\tif (valA === undefined && valB === undefined) return 0;\n\t\t\t\t\t\t\t\tif (valA === undefined) return 1 * direction;\n\t\t\t\t\t\t\t\tif (valB === undefined) return -1 * direction;\n\t\t\t\t\t\t\t\tif (valA < valB) return -1 * direction;\n\t\t\t\t\t\t\t\tif (valA > valB) return 1 * direction;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tconst sliced =\n\t\t\t\t\t\tlimit > 0\n\t\t\t\t\t\t\t? items.slice(offset, offset + limit)\n\t\t\t\t\t\t\t: items.slice(offset);\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tsliced.map((row) =>\n\t\t\t\t\t\t\tprepareRow({ model: storeName, row, reverse: true }),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\tif (Array.isArray(filter)) {\n\t\t\t\t\tconst request = store.openCursor();\n\t\t\t\t\trequest.onerror = () =>\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tnew Error(`Failed to getMany ${storeName}: ${request.error}`),\n\t\t\t\t\t\t);\n\t\t\t\t\trequest.onsuccess = (event) => {\n\t\t\t\t\t\tconst cursor = event.target.result;\n\t\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tfilter.includes(cursor.key) &&\n\t\t\t\t\t\t\t\t(!keys || keys.includes(cursor.key))\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\titems.push(cursor.value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinishProcessingAndResolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet cursorRequest;\n\t\t\t\tlet useIndex = false;\n\t\t\t\tconst indexedProp = findIndexedProperty(filter, storeName);\n\t\t\t\tif (indexedProp && Object.keys(filter).length > 0) {\n\t\t\t\t\tlet queryValue = filter[indexedProp];\n\t\t\t\t\tif (modelSchema[indexedProp]?.type === \"boolean\") {\n\t\t\t\t\t\tqueryValue = queryValue ? parseBoolean.true : parseBoolean.false;\n\t\t\t\t\t}\n\t\t\t\t\tif (queryValue !== undefined) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst index = store.index(indexedProp);\n\t\t\t\t\t\t\tcursorRequest = index.openCursor(IDBKeyRange.only(queryValue));\n\t\t\t\t\t\t\tuseIndex = true;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tcursorRequest = store.openCursor();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursorRequest = store.openCursor();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcursorRequest = store.openCursor();\n\t\t\t\t}\n\t\t\t\tcursorRequest.onerror = () =>\n\t\t\t\t\treject(\n\t\t\t\t\t\tnew Error(`Failed to getMany ${storeName}: ${cursorRequest.error}`),\n\t\t\t\t\t);\n\t\t\t\tcursorRequest.onsuccess = (event) => {\n\t\t\t\t\tconst cursor = event.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\tconst primaryKeyToCheck = useIndex ? cursor.primaryKey : cursor.key;\n\t\t\t\t\t\tif (keys && !keys.includes(primaryKeyToCheck)) {\n\t\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matchesFilter(cursor.value, filter, storeName)) {\n\t\t\t\t\t\t\titems.push(cursor.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinishProcessingAndResolve();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} catch (error) {\n\t\t\t\treject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t`Failed to start transaction: ${error.message}. Query Props: ${JSON.stringify({ storeName, limit, offset, filter, order, keys })}`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst get = async (storeName, keyOrFilter) => {\n\t\tawait _ensureDb();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!keyOrFilter) return resolve(null);\n\t\t\tconst transaction = db.transaction(storeName, \"readonly\");\n\t\t\tconst store = transaction.objectStore(storeName);\n\t\t\tconst modelSchema = models[storeName];\n\t\t\tif (typeof keyOrFilter === \"object\" && !Array.isArray(keyOrFilter)) {\n\t\t\t\tconst indexedProp = findIndexedProperty(keyOrFilter, storeName);\n\t\t\t\tlet cursorRequest;\n\t\t\t\tif (indexedProp) {\n\t\t\t\t\tlet queryValue = keyOrFilter[indexedProp];\n\t\t\t\t\tif (modelSchema[indexedProp]?.type === \"boolean\") {\n\t\t\t\t\t\tqueryValue = queryValue ? parseBoolean.true : parseBoolean.false;\n\t\t\t\t\t}\n\t\t\t\t\tif (queryValue !== undefined) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst index = store.index(indexedProp);\n\t\t\t\t\t\t\tcursorRequest = index.openCursor(IDBKeyRange.only(queryValue));\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tcursorRequest = store.openCursor();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursorRequest = store.openCursor();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcursorRequest = store.openCursor();\n\t\t\t\t}\n\t\t\t\tcursorRequest.onerror = () =>\n\t\t\t\t\treject(new Error(`Failed to get: ${cursorRequest.error}`));\n\t\t\t\tcursorRequest.onsuccess = (event) => {\n\t\t\t\t\tconst cursor = event.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\tif (matchesFilter(cursor.value, keyOrFilter, storeName)) {\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\tprepareRow({\n\t\t\t\t\t\t\t\t\tmodel: storeName,\n\t\t\t\t\t\t\t\t\trow: cursor.value,\n\t\t\t\t\t\t\t\t\treverse: true,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(null);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (Array.isArray(keyOrFilter)) {\n\t\t\t\t\treject(\n\t\t\t\t\t\tnew Error(\"Filter for get must be an object or a primary key.\"),\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst request = store.get(keyOrFilter);\n\t\t\t\trequest.onerror = () =>\n\t\t\t\t\treject(new Error(`Failed to get: ${request.error}`));\n\t\t\t\trequest.onsuccess = () =>\n\t\t\t\t\tresolve(\n\t\t\t\t\t\t!request.result\n\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t: prepareRow({\n\t\t\t\t\t\t\t\t\tmodel: storeName,\n\t\t\t\t\t\t\t\t\trow: request.result,\n\t\t\t\t\t\t\t\t\treverse: true,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst remove = async (storeName, key) => {\n\t\tawait _ensureDb();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst transaction = db.transaction(storeName, \"readwrite\");\n\t\t\tconst store = transaction.objectStore(storeName);\n\t\t\tconst request = store.delete(key);\n\t\t\trequest.onerror = () =>\n\t\t\t\treject(new Error(`Failed to delete: ${request.error}`));\n\t\t\trequest.onsuccess = () => resolve(true);\n\t\t});\n\t};\n\n\tconst count = async (storeName, { filter = {} } = {}) => {\n\t\tawait _ensureDb();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst transaction = db.transaction(storeName, \"readonly\");\n\t\t\tconst store = transaction.objectStore(storeName);\n\t\t\tif (Object.keys(filter).length === 0) {\n\t\t\t\tconst request = store.count();\n\t\t\t\trequest.onerror = () =>\n\t\t\t\t\treject(new Error(`Failed to count: ${request.error}`));\n\t\t\t\trequest.onsuccess = () => resolve(request.result);\n\t\t\t} else {\n\t\t\t\tconst request = store.openCursor();\n\t\t\t\tlet countNum = 0;\n\t\t\t\trequest.onerror = () =>\n\t\t\t\t\treject(new Error(`Failed to count: ${request.error}`));\n\t\t\t\trequest.onsuccess = (event) => {\n\t\t\t\t\tconst cursor = event.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\tif (matchesFilter(cursor.value, filter, storeName)) {\n\t\t\t\t\t\t\tcountNum++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(countNum);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t};\n\n\tconst isEmpty = async (storeName) => {\n\t\tconst recordCount = await count(storeName);\n\t\treturn recordCount === 0;\n\t};\n\n\tconst clear = async (storeName) => {\n\t\tawait _ensureDb();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst transaction = db.transaction(storeName, \"readwrite\");\n\t\t\tconst store = transaction.objectStore(storeName);\n\t\t\tconst request = store.clear();\n\t\t\trequest.onerror = () =>\n\t\t\t\treject(new Error(`Failed to clear: ${request.error}`));\n\t\t\trequest.onsuccess = () => resolve();\n\t\t});\n\t};\n\n\tconst destroy = async () => {\n\t\tconst dbNameToDelete = dbName;\n\t\tclose();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst request = indexedDB.deleteDatabase(dbNameToDelete);\n\t\t\trequest.onerror = () =>\n\t\t\t\treject(new Error(`Failed to delete database: ${request.error}`));\n\t\t\trequest.onsuccess = () => resolve();\n\t\t});\n\t};\n\n\tconst exportStore = async (storeName) => {\n\t\tawait _ensureDb();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst transaction = db.transaction(storeName, \"readonly\");\n\t\t\tconst store = transaction.objectStore(storeName);\n\t\t\tconst request = store.getAll();\n\t\t\trequest.onerror = () =>\n\t\t\t\treject(new Error(`Failed to export: ${request.error}`));\n\t\t\trequest.onsuccess = () => {\n\t\t\t\tconst dump = {};\n\t\t\t\tif (request.result) {\n\t\t\t\t\trequest.result.forEach((item) => {\n\t\t\t\t\t\tif ([\"string\", \"number\"].includes(typeof item.id)) {\n\t\t\t\t\t\t\tdump[item.id] = item;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tresolve(dump);\n\t\t\t};\n\t\t});\n\t};\n\n\tconst importStore = async (storeName, data) => {\n\t\tawait _ensureDb();\n\t\tif (!Array.isArray(data)) {\n\t\t\tthrow new Error(\"No data provided or data is not an array\");\n\t\t}\n\t\tif (data.length === 0) return Promise.resolve();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst transaction = db.transaction(storeName, \"readwrite\");\n\t\t\tconst store = transaction.objectStore(storeName);\n\t\t\tlet completed = 0;\n\t\t\tlet firstError = null;\n\t\t\tdata.forEach((entry) => {\n\t\t\t\tif (firstError) return;\n\t\t\t\tconst request = store.put(entry);\n\t\t\t\trequest.onerror = () => {\n\t\t\t\t\tif (!firstError) {\n\t\t\t\t\t\tfirstError = request.error;\n\t\t\t\t\t\ttransaction.abort();\n\t\t\t\t\t\treject(new Error(`Failed to import: ${firstError}`));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\trequest.onsuccess = () => {\n\t\t\t\t\tif (firstError) return;\n\t\t\t\t\tcompleted++;\n\t\t\t\t\tif (completed === data.length) {\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t\ttransaction.oncomplete = () => {\n\t\t\t\tif (!firstError) resolve();\n\t\t\t};\n\t\t\ttransaction.onerror = () => {\n\t\t\t\tif (!firstError)\n\t\t\t\t\treject(\n\t\t\t\t\t\tnew Error(`Transaction error during import: ${transaction.error}`),\n\t\t\t\t\t);\n\t\t\t};\n\t\t});\n\t};\n\n\tconst transactionWrapper = async (storeNames, mode = \"readwrite\") => {\n\t\tawait _ensureDb();\n\t\tconst idbTransaction = db.transaction(storeNames, mode);\n\t\treturn {\n\t\t\ttransaction: idbTransaction,\n\t\t\tput: (model, row, opts = {}) => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tconst store = idbTransaction.objectStore(model);\n\t\t\t\t\tconst preparedRow = prepareRow({\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\trow,\n\t\t\t\t\t\tcurrentRow: opts.currentRow,\n\t\t\t\t\t});\n\t\t\t\t\tconst request = store.put(preparedRow);\n\t\t\t\t\trequest.onsuccess = () => resolve(request.result);\n\t\t\t\t\trequest.onerror = () => reject(request.error);\n\t\t\t\t});\n\t\t\t},\n\t\t\tremove: (model, id) => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tconst store = idbTransaction.objectStore(model);\n\t\t\t\t\tconst request = store.delete(id);\n\t\t\t\t\trequest.onsuccess = () => resolve(true);\n\t\t\t\t\trequest.onerror = () => reject(request.error);\n\t\t\t\t});\n\t\t\t},\n\t\t\tdone: () => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tidbTransaction.oncomplete = () => resolve();\n\t\t\t\t\tidbTransaction.onerror = () => reject(idbTransaction.error);\n\t\t\t\t\tidbTransaction.onabort = () =>\n\t\t\t\t\t\treject(idbTransaction.error || new Error(\"Transaction aborted\"));\n\t\t\t\t});\n\t\t\t},\n\t\t\tabort: () => idbTransaction.abort(),\n\t\t};\n\t};\n\n\treturn {\n\t\tinit,\n\t\ttransaction: transactionWrapper,\n\t\tgetMany,\n\t\tprepareRow,\n\t\tput,\n\t\tget,\n\t\tremove,\n\t\treload,\n\t\tcount,\n\t\tisEmpty,\n\t\tclear,\n\t\tget db() {\n\t\t\treturn db;\n\t\t},\n\t\tclose,\n\t\tdestroy,\n\t\texport: exportStore,\n\t\timport: importStore,\n\t\tget isConnected() {\n\t\t\treturn isConnected;\n\t\t},\n\t\tget version() {\n\t\t\treturn dbVersion;\n\t\t},\n\t\tname: dbName,\n\t\tmodels,\n\t};\n}\n\nexport default { open };\n",
    "metaType": "application/javascript"
  },
  "/modules/apps/habits/backend.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport T from \"/modules/types/index.js\";\n\nconst data = {\n\thabits: [\n\t\t{\n\t\t\tid: \"habit-1\",\n\t\t\tname: \"Exercise\",\n\t\t},\n\t\t{\n\t\t\tid: \"habit-2\",\n\t\t\tname: \"Read a Book\",\n\t\t},\n\t],\n};\n\n$APP.data.set(data);\n\n$APP.models.set({\n\thabits: {\n\t\tname: { type: \"string\", required: true },\n\t\tcheckins: T.many(\"checkins\", \"habit\").$,\n\t\tnotes: T.many(\"notes\", \"habit\").$,\n\t\tdate: T.string().index().$,\n\t\t$metadata: T.extension().$,\n\t\t$operations: T.extension().$,\n\t},\n\tnotes: {\n\t\thabit: T.belongs(\"habits\", \"checkins\").$,\n\t\tnotes: T.string().$,\n\t\tdate: T.string().index().$,\n\t\t$metadata: T.extension().$,\n\t\t$operations: T.extension().$,\n\t},\n\tcheckins: {\n\t\thabit: T.belongs(\"habits\", \"checkins\").$,\n\t\tdate: T.string().index().$,\n\t\t$metadata: T.extension().$,\n\t\t$operations: T.extension().$,\n\t},\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/p2p/backend.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport Model from \"/modules/mvc/model/backend.js\";\nimport Database from \"/modules/mvc/model/database/index.js\";\n\n$APP.events.set({\n\t\"P2P:LOAD_DATA_OP\": async ({ payload }) => {\n\t\tconst { model, method, row, id } = payload;\n\t\tif (method === \"add\")\n\t\t\tModel[model].add(row, { skipP2PSync: true, keepIndex: true });\n\t\tif (method === \"edit\")\n\t\t\tModel[model].edit(row, { skipP2PSync: true, keepIndex: true });\n\t\tif (method === \"remove\") Model[model].remove(id, { skipP2PSync: true });\n\t},\n\t\"P2P:JOIN_APP\": async ({ payload, respond }) => {\n\t\tconst { app, db } = payload;\n\t\tconst { id, models, version, timestamp } = app;\n\t\tif (!id) {\n\t\t\treturn respond({ error: \"An 'appId' is required to join an app.\" });\n\t\t}\n\n\t\tawait $APP.SysModel.editMany($APP.settings.sysmodels.APP, {\n\t\t\tactive: false,\n\t\t});\n\n\t\tlet appToJoin = await $APP.SysModel.get($APP.settings.sysmodels.APP, {\n\t\t\tid,\n\t\t});\n\n\t\tif (!appToJoin)\n\t\t\tappToJoin = await $APP.Backend.createAppEntry({\n\t\t\t\tid,\n\t\t\t\tmodels,\n\t\t\t\tversion,\n\t\t\t\ttimestamp,\n\t\t\t});\n\t\telse {\n\t\t\tawait $APP.SysModel.edit($APP.settings.sysmodels.APP, {\n\t\t\t\tid,\n\t\t\t\tactive: true,\n\t\t\t});\n\t\t\tappToJoin = await $APP.SysModel.get($APP.settings.sysmodels.APP, {\n\t\t\t\tid: id,\n\t\t\t});\n\t\t}\n\t\tconst env = await setupAppEnvironment({\n\t\t\t...appToJoin,\n\t\t\tmigrationTimestamp: Date.now(),\n\t\t});\n\t\tif (db) Database.loadDBDump({ app: env.app, dump: db });\n\t\trespond(env.app);\n\t},\n\n\t\"P2P:REGISTER_PEER_CONNECTION\": async ({ payload, respond }) => {\n\t\tconsole.log({ payload });\n\t\tconst { appId, userId, peerId } = payload;\n\t\tconst app = await $APP.SysModel.get($APP.settings.sysmodels.APP, {\n\t\t\tid: appId,\n\t\t});\n\t\tif (!app) {\n\t\t\treturn respond({ success: false, error: \"App not found\" });\n\t\t}\n\n\t\tconst newConnection = { userId, peerId, timestamp: Date.now() };\n\t\tconst updatedConnections = [...(app.connections || []), newConnection];\n\n\t\tawait $APP.SysModel.edit($APP.settings.sysmodels.APP, {\n\t\t\tid: appId,\n\t\t\tconnections: updatedConnections,\n\t\t});\n\n\t\trespond({ success: true });\n\t},\n\n\t\"P2P:UNREGISTER_PEER_CONNECTION\": async ({ payload, respond }) => {\n\t\tconst { appId, peerId } = payload;\n\t\tconsole.log({ payload });\n\t\tif (!appId || !peerId) {\n\t\t\treturn respond({\n\t\t\t\tsuccess: false,\n\t\t\t\terror: \"Both 'appId' and 'peerId' are required.\",\n\t\t\t});\n\t\t}\n\n\t\tconst app = await $APP.SysModel.get($APP.settings.sysmodels.APP, {\n\t\t\tid: appId,\n\t\t});\n\n\t\tif (!app) return respond({ success: false, error: \"App not found\" });\n\n\t\tif (!app.connections || app.connections.length === 0)\n\t\t\treturn respond({ success: true });\n\n\t\tconst updatedConnections = app.connections.filter(\n\t\t\t(conn) => conn.peerId !== peerId,\n\t\t);\n\n\t\tif (updatedConnections.length < app.connections.length) {\n\t\t\tawait $APP.SysModel.edit($APP.settings.sysmodels.APP, {\n\t\t\t\tid: appId,\n\t\t\t\tconnections: updatedConnections,\n\t\t\t});\n\t\t}\n\n\t\trespond({ success: true });\n\t},\n});\n\n$APP.hooks.set({\n\tonAddRecord({ model, row, system, opts }) {\n\t\tif (opts.skipP2PSync) return;\n\t\tif (system) return;\n\t\t$APP.Backend.broadcast({\n\t\t\ttype: \"P2P:SEND_DATA_OP\",\n\t\t\tpayload: { method: \"add\", model, row },\n\t\t});\n\t},\n\n\tonEditRecord({ model, row, system, opts }) {\n\t\tif (opts.skipP2PSync) return;\n\t\tif (system) return;\n\t\t$APP.Backend.broadcast({\n\t\t\ttype: \"P2P:SEND_DATA_OP\",\n\t\t\tpayload: { method: \"edit\", model, row },\n\t\t});\n\t},\n\n\tonRemoveRecord({ model, id, system, opts }) {\n\t\tif (opts.skipP2PSync) return;\n\t\tif (system) return;\n\t\t$APP.Backend.broadcast({\n\t\t\ttype: \"P2P:SEND_DATA_OP\",\n\t\t\tpayload: { method: \"remove\", model, id },\n\t\t});\n\t},\n});\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/display/icon.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport html, { css } from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nconst { Icons, theme } = $APP;\n\nexport default {\n\ttag: \"uix-icon\",\n\n\tcss: css`& {\n\t\tdisplay: inline-block;\n\t\tvertical-align: middle;\t\n\t}\n\t\n\t&[solid] {\n\t\tstroke: currentColor;\n\t\tfill: currentColor;\n\t}`,\n\n\tproperties: {\n\t\tname: T.string(),\n\t\tsvg: T.string(),\n\t\tsolid: T.boolean(),\n\t},\n\n\tasync getIcon(name) {\n\t\tif (Icons[name]) {\n\t\t\tthis.svg = Icons[name];\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t$APP.fs.getFilePath(\n\t\t\t\t\t\t`modules/icon-${theme.font.icon.family}/${theme.font.icon.family}/${name}.svg`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (response.ok) {\n\t\t\t\t\tconst svgElement = await response.text();\n\t\t\t\t\tIcons.set({ [name]: svgElement });\n\t\t\t\t\tthis.svg = svgElement;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(`Failed to fetch icon: ${name}`);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error fetching icon: ${name}`, error);\n\t\t\t}\n\t\t}\n\t},\n\twillUpdate() {\n\t\tif (this.name) {\n\t\t\tthis.getIcon(this.name);\n\t\t}\n\t},\n\trender() {\n\t\treturn !this.svg ? null : html.unsafeHTML(this.svg);\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/display/card.js": {
    "content": "import { css } from \"/modules/mvc/view/html/index.js\";\n\nexport default {\n\ttag: \"uix-card\",\n\n\tcss: css`& {\n\t\t--uix-card-width: auto;\n\t\t--uix-card-padding: var(--uix-container-padding, 0);\n\t\t--uix-card-border-size: var(--uix-container-border-size, 0px);\n\t\t--uix-card-border-radius: var(--radius-md);\n\t\t--uix-card-background-color: var(--color-default-1, #f0f0f0);\n\t\t--uix-card-border-color: var(--uix-container-border-color, var(--color-default, #cccccc));\n\t\t--uix-card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n\t\t--uix-card-min-height: var(--uix-container-min-height, 50px);\n\t\t--uix-card-gap: var(--uix-container-gap, 0);\n\t\t--uix-card-height: auto;\n\t\t--uix-card-justify: var(--uix-container-justify, flex-start);\n\t\t--uix-card-align-items: var(--uix-container-align-items, stretch);\n\t\t--uix-card-overflow: var(--uix-container-overflow, visible);\n\t\t--uix-card-position: var(--uix-container-position, static);\n\t\t--uix-card-list-style-type: var(--uix-container-list-style-type, none);\n\t\t--uix-card-text-color: var(--uix-container-text-color, var(--uix-text-color));\n\t\n\t\tborder-width: var(--uix-card-border-size);\n\t\tborder-radius: var(--uix-card-border-radius);\n\t\tbackground-color: var(--uix-card-background-color);\n\t\tborder-color: var(--uix-card-border-color); \n\t\tbox-shadow: var(--uix-card-shadow);\n\t\tlist-style-type: var(--uix-card-list-style-type);\n\t\tcolor: var(--uix-card-text-color);\t\n\t\t&[clickable], &[clickable] * {\n\t\t\tcursor: pointer;\n\t\t}\n\t\n\t\t> :last-child.uix-join {\n\t\t\tmargin-left: calc(-1 * var(--uix-card-padding));\n\t\t\tmargin-right: calc(-1 * var(--uix-card-padding));\n\t\t\tmargin-bottom: calc(-1 * var(--uix-card-padding));\n\t\t\tpadding-bottom: 0;\n\t\n\t\t\tborder-radius: var(--uix-card-border-radius) !important;  \n\t\t\t.uix-button {\n\t\t\t\tborder-radius: 0 !important;\n\t\t\t\tborder-top-right-radius: 0 !important;      \n\t\t\t\t&:last-child {\n\t\t\t\t\tborder-bottom-right-radius: var(--uix-card-border-radius) !important;\n\t\t\t\t}\n\t\t\t\t&:first-child {\n\t\t\t\t\tborder-right-width: 0;\n\t\t\t\t\tborder-bottom-left-radius: var(--uix-card-border-radius) !important;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t&[horizontal] > :last-child.uix-join {\n\t\t\tmargin-top: calc(-1 * var(--uix-card-padding));\n\t\t\tmargin-bottom: calc(-1 * var(--uix-card-padding));\n\t\t\tmargin-right: 0;\n\t\t\tpadding-right: 0;\n\t\t}\n\t}`,\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/form/form.js": {
    "content": "import { css } from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-form\",\n\n\tcss: css`& {\n\t\tdisplay: flex;\n\t\tflex-direction: column; \n\t\tgap: 1rem; \n\t\tpadding-top: 1rem;\n\t}`,\n\tproperties: {\n\t\tmethod: T.string({ defaultValue: \"post\" }),\n\t\tendpoint: T.string(),\n\t\tsubmit: T.function(),\n\t\tsubmitSuccess: T.function(),\n\t\tsubmitError: T.function(),\n\t},\n\tgetFormControls() {\n\t\treturn this.querySelectorAll(\"uix-form-control\");\n\t},\n\tvalidate() {\n\t\tconst formControls = this.getFormControls();\n\t\treturn [...formControls].every((control) => control.reportValidity());\n\t},\n\tasync handleSubmit(event) {\n\t\tevent.preventDefault();\n\t\tif (this.submit) this.submit();\n\t\tconsole.log(this.submitSuccess);\n\t\tif (this.submitSuccess) this.submitSuccess();\n\n\t\tif (!this.validate()) return;\n\t\tconst formData = this.formData();\n\t\tconst response = await fetch(this.endpoint, {\n\t\t\tmethod: this.method,\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(formData),\n\t\t});\n\t\tif (!response.ok) console.error(\"Form submission failed\", response);\n\t},\n\treset() {\n\t\tthis.getFormControls().forEach((control) => control.formResetCallback?.());\n\t},\n\tformData() {\n\t\tconst formData = Object.fromEntries(\n\t\t\t[...this.getFormControls()].map((element) => [\n\t\t\t\telement.name,\n\t\t\t\telement?.value(),\n\t\t\t]),\n\t\t);\n\t\treturn formData;\n\t},\n\tconnectedCallback() {\n\t\tconst submitButton = this.querySelector('uix-button[type=\"submit\"]');\n\t\tif (submitButton)\n\t\t\tsubmitButton.addEventListener(\"click\", this.handleSubmit.bind(this));\n\t\tthis.addEventListener(\"keydown\", (event) => {\n\t\t\tif (event.key !== \"Enter\") return;\n\t\t\tevent.preventDefault();\n\t\t\tthis.handleSubmit(event);\n\t\t});\n\t\tthis.addEventListener(`data-retrieved-${this.id}`, (event) =>\n\t\t\tthis.updateFields(event.detail),\n\t\t);\n\t},\n\tupdateFields(data) {\n\t\tconst formControls = this.getFormControls();\n\t\tObject.keys(data).forEach((key) => {\n\t\t\tconst control = [...formControls].find((control) => control.name === key);\n\t\t\tif (control) control.value = data[key];\n\t\t});\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/form/join.js": {
    "content": "import { css } from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-join\",\n\n\tcss: css`& {\n\t\t--uix-list-button-radius: var(--uix-item-border-radius, 5px);\n\t\t--uix-list-button-border-width: 1px;\n\t\t--uix-list-button-margin: 0;\n\t\tlist-style-type: var(--uix-list-container-list-style-type);\n\t\twidth: auto;\n\t\t&.uix-join {\n\t\t\tflex-direction: row;\n\t\t\t&[vertical] {\n\t\t\t\tflex-direction: column;\n\t\t\t}\n\t\t\t&[reverse][vertical] {\n\t\t\t\tflex-direction: column-reverse;\n\t\t\t}\n\t\t\t&[reverse]:not([vertical]) {\n\t\t\t\tflex-direction: row-reverse;\n\t\t\t}\n\t\t}\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\t& > * {\n\t\t\twidth: 100%;\n\t\t\tmargin: var(--uix-list-button-margin);\n\t\t\t&:first-child {\n\t\t\t\tborder-top-left-radius: var(--uix-list-button-radius);\n\t\t\t\tborder-bottom-left-radius: var(--uix-list-button-radius);\n\t\t\t\tborder-bottom-right-radius: 0;\n\t\t\t\tborder-top-right-radius: 0;\n\t\t\t}\n\t\t\t&:last-child {\n\t\t\t\tborder-top-right-radius: var(--uix-list-button-radius);\n\t\t\t\tborder-bottom-right-radius: var(--uix-list-button-radius);\n\t\t\t\tborder-top-left-radius: 0;\n\t\t\t\tborder-bottom-left-radius: 0;\n\t\t\t\tborder-left-width: 0;\n\t\t\t}\n\t\t}\n\t\t& > [bordered], & > [outline] {\n\t\t\t&:last-child {\n\t\t\t\tborder-width: var(--uix-list-button-border-width); \n\t\t\t}\n\t\t\t&:hover:active {\n\t\t\t\tborder-width: var(--uix-list-button-border-width);\n\t\t\t}\n\t\t\t&:has(+ *:active) {\n\t\t\t\tborder-width: var(--uix-list-button-border-width);\n\t\t\t}\n\t\t}\n\t\t&[vertical] {    \n\t\t\t& > * {\n\t\t\t\tborder-radius: 0;\n\t\t\t\tmargin: var(--uix-list-button-margin);\n\t\t\t\t&:first-child {\n\t\t\t\t\tborder-top-left-radius: var(--uix-list-button-radius);\n\t\t\t\t\tborder-top-right-radius: var(--uix-list-button-radius);\n\t\t\t\t}\n\t\t\t\t&:last-child {\n\t\t\t\t\tborder-bottom-left-radius: var(--uix-list-button-radius);\n\t\t\t\t\tborder-bottom-right-radius: var(--uix-list-button-radius);\n\t\t\t\t}\n\t\t\t}\n\t\t\t& > .uix-button[bordered], & > .uix-button[outline] {\n\t\t\t\tborder-width: var(--uix-list-button-border-width);\n\t\t\t\t&:last-child {\n\t\t\t\t\tborder-width: var(--uix-list-button-border-width); \n\t\t\t\t}\n\t\t\t\t&:hover:active {\n\t\t\t\t\tborder-width: var(--uix-list-button-border-width);\n\t\t\t\t}\n\t\t\t\t&:has(+ .uix-button:active) {\n\t\t\t\t\tborder-width: var(--uix-list-button-border-width);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}`,\n\n\tproperties: {\n\t\tvertical: T.boolean(),\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/display/button.js": {
    "content": "import { css } from \"/modules/mvc/view/html/index.js\";\n\nexport default {\n\ttag: \"uix-button\",\n\n\textends: \"uix-link\",\n\tcss: css`& {\n\t\t--uix-button-font-weight: 700; \n\t\t--uix-button-text-color: var(--color-default-80);\n\t\t--uix-button-background-color: var(--color-default-100);\n\t\t--uix-button-hover-background-color: var(--color-default-20);\n\t\t--uix-button-border-radius: var(--radius-sm);\n\t\t--uix-button-border-size:  0;\n\t\t--uix-button-border-color: var(--color-default-40);\n\t\t--uix-button-hover-opacity:  0.9;\n\t\t--uix-button-active-scale: 0.9;\n\t\t--uix-button-width: fit-content;\n\t\t--uix-button-height: fit-content;\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\talign-items: center;\n\t\tgap: 0.5rem; \n\t\tcursor: pointer;\n\t\ttransition: all 0.3s ease-in-out;\n\t\tfont-weight: var(--uix-button-font-weight);\n\t\tcolor: var(--uix-button-text-color);\n\t\tbackground-color: var(--uix-button-background-color);\n\t\twidth: var(--uix-button-width);\n\t\theight: var(--uix-button-height);\n\t\tborder: var(--uix-button-border-size) solid var(--uix-button-border-color);\n\t\tborder-radius: var(--uix-button-border-radius);\n\t \n\t\t> button, > a, > input {\n\t\t\tpadding: var(--uix-button-padding, var(--uix-link-padding));\n\t\t\tword-break: keep-all;\n\t\t\theight: 100%;\n\t\t\tline-height: var(--uix-button-height);\n\t\t\tborder-radius: var(--uix-button-border-radius);\n\t\t\tflex-basis: 100%;\n\t\t\tjustify-content: var(--uix-text-align);\n\t\t\t&:hover {\n\t\t\t\topacity: var(--uix-button-hover-opacity); \n\t\t\t\tbackground-color: var(--uix-button-hover-background-color);\n\t\t\t}\n\t\t\t\n\t\t\t&:hover:active {\n\t\t\t\topacity: var(--uix-button-hover-opacity);\n\t\t\t}  \n\t\t}\n\t\n\t\t.uix-icon, button, input, a {\n\t\t\tcursor: pointer;      \n\t\t}\n\t}\n\t`,\n\ttypes: {\n\t\tdefault: ({ variant }) => ({\n\t\t\t\"border-size\": \"0\",\n\t\t\t\"background-color\":\n\t\t\t\tvariant === \"default\"\n\t\t\t\t\t? `var(--color-${variant}-100)`\n\t\t\t\t\t: `var(--color-${variant}-60)`,\n\t\t\t\"hover-background-color\": `var(--color-${variant}-30)`,\n\t\t\t\"text-color\": `var(--color-${variant}-1)`,\n\t\t}),\n\t\tbordered: ({ variant }) => ({\n\t\t\t\"border-size\": \"1px\",\n\t\t\t\"background-color\": \"transparent\",\n\t\t\t\"hover-background-color\": `var(--color-${variant}-30)`,\n\t\t\t\"border-color\": `var(--color-${variant}-40)`,\n\t\t\t\"text-color\": `var(--color-${variant}-100)`,\n\t\t}),\n\t\tghost: ({ variant }) => ({\n\t\t\t\"background-color\": \"transparent\",\n\t\t\t\"hover-background-color\": `var(--color-${variant}-30)`,\n\t\t\t\"border-size\": \"0px\",\n\t\t\t\"text-color\": `var(--color-${variant}-100)`,\n\t\t}),\n\t\toutline: ({ variant }) => ({\n\t\t\t\"background-color\": \"transparent\",\n\t\t\t\"hover-background-color\": `var(--color-${variant}-30)`,\n\t\t\t\"text-color\": `var(--color-${variant}-90)`,\n\t\t\t\"border-size\": \"1px\",\n\t\t}),\n\t\tfloat: ({ variant }) => ({\n\t\t\t\"background-color\": `var(--color-${variant}-60)`,\n\t\t\t\"hover-background-color\": `var(--color-${variant}-50)`,\n\t\t\t\"text-color\": `var(--color-${variant}-1)`,\n\t\t\t\"border-size\": \"0px\",\n\t\t\t\"border-radius\": \"100%\",\n\t\t\twidth: \"var(--uix-button-height)\",\n\t\t\tpadding: \"0\",\n\t\t\t\"justify-content\": \"center\",\n\t\t\tshadow: \"var(--shadow-md)\",\n\t\t\t\"hover-shadow\": \"var(--shadow-lg)\",\n\t\t}),\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/form/input.js": {
    "content": "import html, { css } from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-input\",\n\n\tcss: css`& {\n\t\t--uix-input-background-color: var(--color-default-10);\n\t\t--uix-input-border-color: var(--color-default-70);\n\t\t--uix-input-text-color: var(--color-default-95); \n\t\t--uix-input-border-radius: 0.375rem; \n\t\t--uix-input-padding-x: 5px; \n\t\t--uix-input-padding-y: 5px; \n\t\t--uix-input-font-size: 1rem; \n\t\t--uix-input-focus-ring-width: 2px; \n\t\t--uix-input-focus-ring-offset-width: 2px;\n\t\t--uix-input-height:  2.5rem;\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\twidth: 100%; \n\t\theight: var(--uix-input-height); \n\t\tborder-radius: var(--uix-input-border-radius); \n\t\tborder: 2px solid var(--uix-input-border-color); \n\t\tfont-size: var(--uix-input-font-size); \n\t\tbackground-color: var(--uix-input-background-color);\n\t\tcolor: var(--uix-input-text-color);\n\t\t&:focus {\n\t\t\toutline: none;outline-style: none;\n\t\t\tbox-shadow: none;\n\t\t\tborder-color: transparent;\n\t\t}\n\t\t/* Default (text-based) inputs */\n\t\tinput[type=\"text\"],\n\t\tinput[type=\"password\"],\n\t\tinput[type=\"email\"],\n\t\tinput[type=\"number\"],\n\t\tinput[type=\"decimal\"],\n\t\tinput[type=\"search\"],\n\t\tinput[type=\"tel\"],\n\t\tinput[type=\"url\"] {\n\t\t\twidth: 100%;\n\t\t\toutline: none;\n\t\t\tcolor: var(--uix-input-text-color);\n\t\t\tbackground-color: transparent;\n\t\t\tpadding: var(--uix-input-padding-x) var(--uix-input-padding-y);\n\t\t\tborder: 0;\n\t\t\t&:focus + label, &:not(:placeholder-shown) + label {\n\t\t\t\ttransition: margin-top 0.3s ease, font-size 0.3s ease;\n\t\t\t\tmargin-top: -0.4rem;\n\t\t\t\tfont-size: 0.6rem;\n\t\t\t\tcursor: default;\n\t\t\t\t.uix-text {\n\t\t\t\t\t--uix-text-size: 0.8rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\t&::placeholder {\n\t\t\t\tcolor: transparent;\n\t\t\t}\n\t\t\t&:focus {\n\t\t\t\toutline: none;outline-style: none;\n\t\t\t\tbox-shadow: none;\n\t\t\t\tborder-color: transparent;\n\t\t\t\t&::placeholder {\n\t\t\t\t\tcolor: var(--uix-input-text-color);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlabel {\n\t\t\t.uix-text {\n\t\t\t\t--uix-text-font-weight: 600;\n\t\t\t}\n\t\t\tcursor: text;\n\t\t\tposition: absolute;\n\t\t\tmargin-top: 0.5rem; \n\t\t\tfont-family: monospace; \n\t\t\tletter-spacing: 0.05em; \n\t\t\ttext-transform: uppercase; \n\t\t\tfont-weight: 600;\n\t\t\tmargin-left: 0.75rem;\n\t\t\tpadding-right: 0.5rem; \n\t\t\tpadding-left: 0.25rem;\n\t\t\tbackground-color: var(--uix-input-background-color);\n\t\t\tcolor: var(--uix-input-text-color);\n\t\t\ttransition: margin-top 0.3s ease, font-size 0.3s ease;\n\t\t}\n\t\tlabel[required]::after {\n\t\t\tcontent: '*';\n\t\t\tcolor: var(--color-error-50); \n\t\t}\n\t\t&:not([type=checkbox]):not([radio]) input:focus-visible {\n\t\t\toutline: none; \n\t\t\tbox-shadow: 0 0 0 var(--uix-input-focus-ring-width) var(--uix-input-border-color);\n\t\t}\n\t\t&:not([type=checkbox]):not([radio]) input:disabled {\n\t\t\tcursor: not-allowed; \n\t\t\topacity: 0.6;\n\t\t}\n\t\t&[type=checkbox],\n\t\t&[radio] {\n\t\t\tborder: 0;\n\t\t\talign-items: center;\n\t\t\theight: auto;\n\t\t\twidth: auto;\n\t\t\tposition: relative;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t&[type=checkbox] label,\n\t\t&[radio] label {\n\t\t\tposition: static;\n\t\t\tmargin-top: 0;\n\t\t\tbackground-color: transparent;\n\t\t\tpadding: 0;\n\t\t\tcursor: pointer;\n\t\t\tmargin-left: 0.5rem;    \n\t\t\ttext-transform: none;\n\t\t\tfont-family: inherit;\n\t\t\tletter-spacing: normal;\n\t\t\tfont-weight: normal;\n\t\t\t.uix-text {\n\t\t\t\t--uix-text-font-weight: 400;\n\t\t\t}\n\t\t}\n\t\t&[type=checkbox] input,\n\t\t&[radio] input[type=\"radio\"] {\n\t\t\twidth: var(--uix-input-size);\n\t\t\theight: var(--uix-input-size);\n\t\t\tmargin: 0;\n\t\t\tborder: none;\n\t\t\tbackground: none;\n\t\t\tbox-shadow: none;\n\t\t\tpadding: 0;    \n\t\t}\n\t\t&[type=checkbox] input:disabled,\n\t\t&[radio] input[type=\"radio\"]:disabled {\n\t\t\tcursor: not-allowed;\n\t\t\topacity: 0.6;\n\t\t}\n\t\t&[type=checkbox], &[radio] {\n\t\t\tgap: 0.75rem;\n\t\t\tpadding: 0.5rem 0;\n\t\t\t--uix-checkbox-size: 1.5rem;\n\t\t\t--uix-checkbox-border-radius: 0.375rem;\n\t\t\t--uix-checkbox-checked-bg: var(--uix-input-border-color);\n\t\t\t--uix-checkbox-check-color: var(--uix-input-background-color);\n\t\t\tinput, input[type=\"radio\"] {\n\t\t\t\tappearance: none;\n\t\t\t\t-webkit-appearance: none;\n\t\t\t\twidth: var(--uix-checkbox-size);\n\t\t\t\theight: var(--uix-checkbox-size);\n\t\t\t\tmargin: 0;\n\t\t\t\tborder: 2px solid var(--uix-input-border-color);\n\t\t\t\tborder-radius: var(--uix-checkbox-border-radius);\n\t\t\t\tbackground-color: var(--uix-input-background-color);\n\t\t\t\tcursor: pointer;\n\t\t\t\tposition: relative;\n\t\t\t\ttransition: \n\t\t\t\t\tbackground-color 0.2s ease,\n\t\t\t\t\tborder-color 0.2s ease;\n\t\t\t\t&::after {\n\t\t\t\t\tcontent: \"\";\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tdisplay: none;\n\t\t\t\t\tleft: 50%;\n\t\t\t\t\ttop: 50%;\n\t\t\t\t\twidth: 0.375rem;\n\t\t\t\t\theight: 0.75rem;\n\t\t\t\t\tborder: solid var(--uix-checkbox-check-color);\n\t\t\t\t\tborder-width: 0 2px 2px 0;\n\t\t\t\t\ttransform: translate(-50%, -60%) rotate(45deg);\n\t\t\t\t}\n\t\t\t\t&:checked {\n\t\t\t\t\tbackground-color: var(--uix-checkbox-checked-bg);\n\t\t\t\t\tborder-color: var(--uix-checkbox-checked-bg);\n\t\t\t\t\t&::after {\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t&:focus-visible {\n\t\t\t\t\tbox-shadow: 0 0 0 var(--uix-input-focus-ring-width) var(--uix-input-border-color);\n\t\t\t\t}\n\t\t\t\t&:disabled {\n\t\t\t\t\topacity: 0.6;\n\t\t\t\t\tcursor: not-allowed;\n\t\t\t\t\t\n\t\t\t\t\t& + label {\n\t\t\t\t\t\tcursor: not-allowed;\n\t\t\t\t\t\topacity: 0.6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t&:hover:not(:has(input[type=\"checkbox\"]:disabled)) {\n\t\t\t\tinput[type=\"checkbox\"] {\n\t\t\t\t\tborder-color: var(--uix-input-border-color);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlabel {\n\t\t\t\tmargin-left: 0;\n\t\t\t\torder: 2;\n\t\t\t}\n\t\t}\n\t}\n\t`,\n\tproperties: {\n\t\tbind: T.object(),\n\t\tautofocus: T.boolean(),\n\t\tvalue: T.string(),\n\t\tplaceholder: T.string(),\n\t\tname: T.string(),\n\t\tlabel: T.string(),\n\t\tdisabled: T.boolean(),\n\t\tregex: T.string(),\n\t\trequired: T.boolean(),\n\t\ttype: T.string({\n\t\t\tdefaultValue: \"text\",\n\t\t\tenum: [\n\t\t\t\t\"text\",\n\t\t\t\t\"password\",\n\t\t\t\t\"email\",\n\t\t\t\t\"number\",\n\t\t\t\t\"decimal\",\n\t\t\t\t\"search\",\n\t\t\t\t\"tel\",\n\t\t\t\t\"url\",\n\t\t\t\t\"checkbox\",\n\t\t\t],\n\t\t}),\n\t\tmaxLength: T.number(),\n\t\tkeydown: T.function(),\n\t\tinput: T.function(),\n\t\tselected: T.boolean(),\n\t},\n\tconnectedCallback() {\n\t\tif (!this.name) {\n\t\t\tconst uniqueId = `uix-input-${Math.random().toString(36).substr(2, 9)}`;\n\t\t\tthis.name = uniqueId;\n\t\t}\n\t},\n\tinputValue() {\n\t\tconst el = this.q(\"input\");\n\t\treturn el?.value;\n\t},\n\tresetValue() {\n\t\tconst el = this.q(\"input\");\n\t\tif (el) el.value = null;\n\t},\n\t_input(event) {\n\t\tthis.value = event.target.value;\n\t\tif (this.input) this.input(event);\n\t},\n\trender() {\n\t\tconst {\n\t\t\tname,\n\t\t\tautofocus,\n\t\t\tvalue,\n\t\t\tplaceholder,\n\t\t\tlabel,\n\t\t\tdisabled,\n\t\t\trequired,\n\t\t\tregex,\n\t\t\ttype,\n\t\t\t_input: input,\n\t\t\tsize,\n\t\t\tbind,\n\t\t\tcheckbox,\n\t\t\tradio,\n\t\t\tselected,\n\t\t} = this;\n\n\t\tconst inputType = checkbox ? \"checkbox\" : radio ? \"radio\" : type;\n\t\tconst inputValue = (bind ? bind.value : value) || \"\";\n\t\tconst isCheckbox = type === \"checkbox\";\n\t\treturn html`\n        <input\n          type=${inputType}\n          value=${inputValue}\n          ?autofocus=${autofocus}\n          ?disabled=${disabled}\n          size=${size}\n          ?required=${required}\n            ?checked=${selected}\n          name=${name}\n          id=${name}\n          regex=${regex}\n          @input=${bind ? (e) => bind.setValue(isCheckbox ? e.target.checked : e.target.value) : input}\n          placeholder=${placeholder}\n        />\t\t\t\n        ${\n\t\t\t\t\tlabel || placeholder\n\t\t\t\t\t\t? html`<label for=${name} ?required=${required}>${label || placeholder}</label>`\n\t\t\t\t\t\t: \"\"\n\t\t\t\t}\n    `;\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/layout/container.js": {
    "content": "export default { tag: \"uix-container\" };\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/layout/list.js": {
    "content": "import html from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-list\",\n\n\tproperties: {\n\t\tmultiple: T.boolean(),\n\t\tmultipleWithCtrl: T.boolean(),\n\t\tmultipleWithShift: T.boolean(),\n\t\tlastSelectedIndex: T.number(),\n\t\tselectedIds: T.array(),\n\t\tonSelectedChanged: T.function(),\n\t\tgap: T.string({ defaultValue: \"md\" }),\n\t\titemId: T.string(\".uix-link\"),\n\t\tselectable: T.boolean(),\n\t},\n\tconnectedCallback() {\n\t\tif (this.selectable)\n\t\t\tthis.addEventListener(\"click\", this.handleClick.bind(this));\n\t},\n\tdisconnectedCallback() {\n\t\tif (this.selectable)\n\t\t\tthis.removeEventListener(\"click\", this.handleClick.bind(this));\n\t},\n\thandleClick: function (e) {\n\t\tconsole.log(this);\n\t\tconst link = e.target.closest(\".uix-link\");\n\t\tif (!link || !this.contains(link)) return;\n\t\te.preventDefault();\n\t\tconst links = Array.from(this.qa(\".uix-link\"));\n\t\tconst index = links.indexOf(link);\n\t\tif (index === -1) return;\n\t\t// Handle multipleWithShift selection: select range between last and current click.\n\t\tif (\n\t\t\tthis.multipleWithShift &&\n\t\t\te.shiftKey &&\n\t\t\tthis.lastSelectedIndex !== null\n\t\t) {\n\t\t\tconst start = Math.min(this.lastSelectedIndex, index);\n\t\t\tconst end = Math.max(this.lastSelectedIndex, index);\n\t\t\tlinks\n\t\t\t\t.slice(start, end + 1)\n\t\t\t\t.forEach((el) => el.setAttribute(\"selected\", \"\"));\n\t\t\tthis.lastSelectedIndex = index;\n\t\t\tthis.updateSelectedIds();\n\t\t\treturn;\n\t\t}\n\t\t// Handle multipleWithCtrl: toggle selection when Ctrl key is pressed.\n\t\tif (this.multipleWithCtrl) {\n\t\t\tif (e.ctrlKey) {\n\t\t\t\tlink.hasAttribute(\"selected\")\n\t\t\t\t\t? link.removeAttribute(\"selected\")\n\t\t\t\t\t: link.setAttribute(\"selected\", \"\");\n\t\t\t\tthis.lastSelectedIndex = index;\n\t\t\t\tthis.updateSelectedIds();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Without Ctrl, treat as single selection with toggle.\n\t\t\tlinks.forEach((el) => el.removeAttribute(\"selected\"));\n\t\t\tif (link.hasAttribute(\"selected\")) {\n\t\t\t\tlink.removeAttribute(\"selected\");\n\t\t\t\tthis.lastSelectedIndex = null;\n\t\t\t} else {\n\t\t\t\tlink.setAttribute(\"selected\", \"\");\n\t\t\t\tthis.lastSelectedIndex = index;\n\t\t\t}\n\t\t\tthis.updateSelectedIds();\n\t\t\treturn;\n\t\t}\n\n\t\t// Handle multiple: toggle selection on each click.\n\t\tif (this.multiple) {\n\t\t\tlink.hasAttribute(\"selected\")\n\t\t\t\t? link.removeAttribute(\"selected\")\n\t\t\t\t: link.setAttribute(\"selected\", \"\");\n\t\t\tthis.lastSelectedIndex = index;\n\t\t\tthis.updateSelectedIds();\n\t\t\treturn;\n\t\t}\n\n\t\t// Default single selection: toggle selection.\n\t\tif (link.hasAttribute(\"selected\")) {\n\t\t\t// If already selected, unselect it.\n\t\t\tlinks.forEach((el) => el.removeAttribute(\"selected\"));\n\t\t\tthis.lastSelectedIndex = null;\n\t\t} else {\n\t\t\tlinks.forEach((el) => el.removeAttribute(\"selected\"));\n\t\t\tlink.setAttribute(\"selected\", \"\");\n\t\t\tthis.lastSelectedIndex = index;\n\t\t}\n\t\tthis.updateSelectedIds();\n\t},\n\tupdateSelectedIds() {\n\t\tconst links = Array.from(this.qa(this.itemId));\n\t\tthis.selectedIds = links.reduce((ids, el, index) => {\n\t\t\tif (el.hasAttribute(\"selected\")) ids.push(index);\n\t\t\treturn ids;\n\t\t}, []);\n\t\tif (this.onSelectedChanged) this.onSelectedChanged(this.selectedIds);\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/display/stat.js": {
    "content": "import html from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\nexport default {\n\ttag: \"uix-stat\",\n\n\tproperties: {\n\t\tlabel: T.string(),\n\t\tvalue: T.string(),\n\t\tpadding: T.string(\"lg\"),\n\t\titems: T.string(\"center\"),\n\t\ttext: T.string(\"center\"),\n\t\tgap: T.string(\"md\"),\n\t},\n\trender() {\n\t\treturn html`<span class=\"center text-6xl text-bold\">${this.value}</span>\n\t\t\t\t\t\t\t\t<span class=\"center text-xl text-medium\">${this.label}</span>`;\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/app/button.js": {
    "content": "import html from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"app-button\",\n\n\trender() {\n\t\treturn html`<div class=\"fixed bottom-[30px] right-[30px]\">\n                  <uix-button .float=${html`<div class=\"flex flex-col items-center gap-2\">\n                                              <theme-darkmode></theme-darkmode>\n                                              <app-dev-only>\n                                                <template>\n                                                  <bundler-button></bundler-button>\n                                                </template>\n                                              </app-dev-only>\n                                              <p2p-button></p2p-button> \n                                            </div>`} icon=\"settings\"></uix-button>\n                </div>`;\n\t},\n\tproperties: {\n\t\tlabel: T.string(\"Actions\"),\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/display/link.js": {
    "content": "import html, { css } from \"/modules/mvc/view/html/index.js\";\nimport Router from \"/modules/router/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-link\",\n\n\tcss: css`& {\n\t\t&[vertical] {\n\t\t\tmargin: 0 auto;\n\t\t}\n\t\t--uix-link-indent: 0;\n\t\tcursor: pointer;\n\t\ta, button {\n\t\t\tcursor: pointer;\n\t\t\tpadding: var(--uix-link-padding);\n\t\t\t&:hover {\n\t\t\t\tcolor: var(--uix-link-hover-color, var(--color-primary-70));    \n\t\t\t}\n\t\t}\n\t\tcolor: var(--uix-link-text-color, var(--color-primary-70));\n\t\tfont-weight: var(--uix-link-font-weight, 600);\n\t\twidth: var(--uix-link-width, auto);\t\t\n\t\t.uix-text-icon__element {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: var(--uix-link-icon-gap, 0.5rem);\n\t\t\twidth: auto;\n\t\t\t&[reverse][vertical] {\n\t\t\t\tflex-direction: column-reverse;\n\t\t\t}\n\t\n\t\t\t&:not([reverse])[vertical] {\n\t\t\t\tflex-direction: column;\n\t\t\t}\n\t\n\t\t\t&[reverse]:not([vertical]) {\n\t\t\t\tflex-direction: row-reverse;\n\t\t\t}\n\t\n\t\t\t&:not([reverse]):not([vertical]) {\n\t\t\t\tflex-direction: row;\n\t\t\t}\n\t\t}\n\t\ttransition: all 0.3s ease-in-out; \n\t}\n\t\n\t&[indent] {\n\t\t> a, > button {\n\t\t\tpadding-left: var(--uix-link-indent);\n\t\t}\n\t}\n\t\n\t&[active]:hover {\n\t\tcolor: var(--uix-link-hover-text-color, var(--color-primary-40));\n\t}\n\t\n\t&[selectable][selected] {\n\t\tbackground-color: var(--color-primary-40); \n\t}\n\t\n\t&:hover {\n\t\t[tooltip] {\n\t\t\tdisplay: flex;\n\t\t}\n\t}\n\t\n\t&[tooltip] {\n\t\tdisplay: inline-block;\n\t\t&:hover {\n\t\t\t[tooltip] {\n\t\t\t\tvisibility: visible;\n\t\t\t}\n\t\t}\n\t\t[tooltip] {\n\t\t\t\tvisibility: hidden;\n\t\t\t\twidth: 120px;\n\t\t\t\tbackground-color: black;\n\t\t\t\tcolor: #fff;\n\t\t\t\ttext-align: center;\n\t\t\t\tborder-radius: 6px;\n\t\t\t\tpadding: 5px 0;    \n\t\t\t\tposition: absolute;\n\t\t\t\tz-index: 1000000000;\n\t\t\t\ttop: 50%;\n\t\t\t\tleft: 100%;       \n\t\t\t\ttransform: translateY(-50%);\n\t\t}\n\t}\n\t\n\t&[position~=\"top\"] [tooltip] {\n\t\tbottom: 100%; \n\t\tleft: 50%;\n\t\ttransform: translateX(-50%); \n\t}\n\t\n\t&[position~=\"bottom\"] [tooltip] {\n\t\ttop: 100%; \n\t\tleft: 50%;\n\t\ttransform: translateX(-50%); \n\t}\n\t\n\t&[position~=\"left\"] [tooltip] {\n\t\ttop: 50%;\n\t\tright: 100%; \n\t\ttransform: translateY(-50%);\n\t}\n\t\n\t&[tooltip], &[dropdown], &[context], &[float] {\n\t\tposition: relative;\n\t}\n\t\n\t&[dropdown], &[accordion] {\n\t\tflex-direction: column;\n\t}\n\t\n\t[float], [dropdown], [accordion], [context] {\n\t\tdisplay: none;\n\t}\n\n\t&[floatopen] [float] {\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\tbottom: 50px;\n\t\tright: 30px;\n\t\twidth: 30px;\n\t}\n\t\n\t&[context] {\n\t\tz-index: auto;\n\t}\n\t\n\t[dropdown], [context][open] {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 100%; \n\t\twidth: 100%;\n\t\tmin-width: 200px;\n\t\tz-index: 1000;\n\t\tbackground-color: var(--color-primary-10); \n\t\tbox-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n\t\t.uix-link:hover, input {\n\t\t\tbackground-color: var(--color-primary-20); \n\t\t}\n\t\t& > .uix-link, input {\n\t\t\twidth: 100%;\n\t\t}\n\t}\n\t\n\t[context][open] {\n\t\tdisplay: flex;\n\t}\n\t\n\t&[selected] {\n\t\t[dropdown], [accordion] {\n\t\t\tdisplay: flex;\n\t\t}\n\t}`,\n\tproperties: {\n\t\tcontent: T.object(),\n\t\tcontext: T.object(), // right-click menu\n\t\texternal: T.boolean(),\n\t\tselectable: T.boolean(),\n\t\tskipRoute: T.boolean(),\n\t\thideLabel: T.boolean(),\n\t\taccordion: T.boolean(),\n\t\tfloat: T.object(),\n\t\ttab: T.boolean(),\n\t\ttooltip: T.boolean(),\n\t\tdropdown: T.boolean(),\n\t\tdirection: T.string(),\n\t\tname: T.string(),\n\t\talt: T.string(),\n\t\tlabel: T.string(),\n\t\ttype: T.string(),\n\t\thref: T.string(),\n\t\trelated: T.string(),\n\t\ticon: T.string(),\n\t\tactive: T.boolean(),\n\t\treverse: T.boolean(),\n\t\tvertical: T.boolean(),\n\t\tselected: T.boolean(),\n\t\tfloatOpen: T.boolean(),\n\t\tclick: T.function(),\n\t\tconfirmation: T.string(),\n\t},\n\n\tconnectedCallback() {\n\t\tif (this.context)\n\t\t\tthis.addEventListener(\"contextmenu\", this.handleContextMenu);\n\t},\n\tdefaultOnClick(e) {\n\t\tconst link = e.currentTarget;\n\t\tconst localLink =\n\t\t\tthis.href && link.origin === window.location.origin && !this.external;\n\t\tconst isComponent = this.dropdown || this.accordion || this.tab;\n\t\tif (!this.href || localLink || isComponent || this.float) {\n\t\t\te.preventDefault();\n\t\t}\n\n\t\tif (this.float) return this.toggleAttribute(\"floatOpen\");\n\n\t\tif (localLink) {\n\t\t\tif (isComponent)\n\t\t\t\tRouter.push([link.pathname, link.search].filter(Boolean).join(\"\"));\n\t\t\telse Router.go([link.pathname, link.search].filter(Boolean).join(\"\"));\n\t\t\treturn;\n\t\t}\n\t\tif (this.click && link.type !== \"submit\") {\n\t\t\tif (this.confirmation) {\n\t\t\t\tconst prompt = window.confirm(this.confirmation);\n\t\t\t\tif (prompt) this.click(e);\n\t\t\t} else this.click(e);\n\t\t}\n\n\t\tif (this.dropdown) {\n\t\t\tthis.q(\"[dropdown]\").toggleAttribute(\"selected\");\n\t\t\tif (this.selected) {\n\t\t\t\tdocument.removeEventListener(\"click\", this.handleOutsideClick);\n\t\t\t\tdocument.removeEventListener(\"keydown\", this.handleEscKey);\n\t\t\t} else {\n\t\t\t\tdocument.addEventListener(\"click\", this.handleOutsideClick);\n\t\t\t\tdocument.addEventListener(\"keydown\", this.handleEscKey);\n\t\t\t}\n\t\t\tthis.toggleAttribute(\"selected\");\n\t\t}\n\t},\n\n\thandleContextMenu(e) {\n\t\te.preventDefault();\n\t\tconst contextContainer = this.q(\"[context]\");\n\t\tif (contextContainer) {\n\t\t\tif (contextContainer.getAttribute(\"open\") === null) {\n\t\t\t\tdocument.addEventListener(\"click\", this.handleOutsideClick);\n\t\t\t\tdocument.addEventListener(\"keydown\", this.handleEscKey);\n\t\t\t} else {\n\t\t\t\tdocument.removeEventListener(\"click\", this.handleOutsideClick);\n\t\t\t\tdocument.removeEventListener(\"keydown\", this.handleEscKey);\n\t\t\t}\n\t\t\tcontextContainer.toggleAttribute(\"open\");\n\t\t}\n\t},\n\n\tdisconnectedCallback() {\n\t\tif (this.context)\n\t\t\tthis.removeEventListener(\"contextmenu\", this.handleContextMenu);\n\t\tif (this.dropdown) {\n\t\t\tdocument.removeEventListener(\"click\", this.handleOutsideClick);\n\t\t\tdocument.removeEventListener(\"keydown\", this.handleEscKey);\n\t\t}\n\t},\n\n\thandleOutsideClick(e) {\n\t\tif (\n\t\t\tthis.dropdown &&\n\t\t\t(!this.contains(e.target) || this.q(\"[dropdown]\").contains(e.target))\n\t\t) {\n\t\t\tthis.removeAttribute(\"selected\");\n\t\t}\n\t\tif (\n\t\t\tthis.context &&\n\t\t\t(!this.contains(e.target) || this.q(\"[context]\").contains(e.target))\n\t\t) {\n\t\t\tthis.q(\"[context]\").removeAttribute(\"open\");\n\t\t}\n\t},\n\n\thandleEscKey(e) {\n\t\tif (e.key === \"Escape\") {\n\t\t\tif (this.dropdown) this.removeAttribute(\"selected\");\n\t\t\tif (this.context) this.q(\"[context]\").removeAttribute(\"open\");\n\t\t}\n\t},\n\n\trender() {\n\t\treturn html`<a\n\t\t\t\t\t\t\tclass=${this.icon ? \"uix-text-icon__element\" : undefined}\n\t\t\t\t\t\t\tcontent\n\t\t\t\t\t\t\thref=${this.href}\n\t\t\t\t\t\t\t@click=${this.defaultOnClick.bind(this)}\n\t\t\t\t\t\t\t?reverse=${this.reverse}\n\t\t\t\t\t\t\t?vertical=${this.vertical}\n\t\t\t\t\t\t\trelated=${this.related}\n\t\t\t\t\t\t\tname=${this.name || this.label}\n\t\t\t\t\t\t\talt=${this.alt || this.label || this.name}\n\t\t\t\t\t\t\tpadding=${this.padding}\n\t\t\t\t\t\t\tgap=${this.gap}\n\t\t\t\t\t\t\ttype=${this.type}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\tthis.icon\n\t\t\t\t\t\t\t\t\t? html`<uix-icon\n\t\t\t\t\t\t\t\t\t\tname=${this.icon}\n\t\t\t\t\t\t\t\t\t\talt=${this.alt || this.label || this.name}\n\t\t\t\t\t\t\t\t\t\tsize=${this.iconSize || this.size}\n\t\t\t\t\t\t\t\t\t></uix-icon>`\n\t\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t${this.hideLabel ? null : this.label}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t${\n\t\t\t\t\t\t\t!this.dropdown\n\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t: html`\n\t\t\t\t\t<div dropdown>\n\t\t\t\t\t\t${this.dropdown}\n\t\t\t\t\t</div>`\n\t\t\t\t\t\t}\n\t\t\t\t\t${\n\t\t\t\t\t\t!this.context\n\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t: html`\n\t\t\t\t\t<div context>\n\t\t\t\t\t\t${this.context}\n\t\t\t\t\t</div>`\n\t\t\t\t\t}\n\t\t\t\t\t\t${\n\t\t\t\t\t\t\t!this.accordion\n\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t: html`\n\t\t\t\t\t<div accordion>\n\t\t\t\t\t\t${this.accordion}\n\t\t\t\t\t</div>`\n\t\t\t\t\t\t}\n\t\t\t\t\t${\n\t\t\t\t\t\t!this.tooltip\n\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t: html`\n\t\t\t\t\t<div tooltip>\n\t\t\t\t\t\t${this.tooltip === true ? this.label : this.tooltip}\n\t\t\t\t\t</div>`\n\t\t\t\t\t}\n\n\t\t\t\t\t\t${\n\t\t\t\t\t\t\t!this.float\n\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t: html`\n\t\t\t\t\t<div float>\n\t\t\t\t\t\t${this.float}\n\t\t\t\t\t</div>`\n\t\t\t\t\t\t}\n        `;\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/icon-lucide/lucide/calendar-heart.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><g fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><path d=\"M3 10h18V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7M8 2v4m8-4v4\"/><path d=\"M21.29 14.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34l-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53c-.95.94-1 2.53.2 3.74L17.5 22l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z\"/></g></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/icon-lucide/lucide/circle-plus.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><g fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"M8 12h8m-4-4v8\"/></g></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/uix/display/calendar.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport html, { css } from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-calendar\",\n\n\tcss: css`\n\tuix-calendar-day {\n\t\tmargin-inline: auto;\n\t}\n\t[calendarDay] {\n\t\t\t\tcursor: pointer; \n\t\t\t\ttext-align: center; \n\t\t\t\tpadding: 0.5rem; \n\t\t\t\tbackground-color: transparent;\n\t\t\t\t&[toggled] {\n\t\t\t\t\tbackground-color: var(--color-primary-50);\n\t\t\t\t\tcolor: white;\n\t\t\t\t}\n\t\t\t}`,\n\tproperties: {\n\t\tgap: T.string(),\n\t\tmonth: T.number({ defaultValue: new Date().getMonth() }),\n\t\tyear: T.number({ defaultValue: new Date().getFullYear() }),\n\t\ttoggledDays: T.array({ defaultValue: [] }),\n\t\tdayContent: T.object(),\n\t\thabit: T.string(),\n\t},\n\t_getCalendarDays(month, year) {\n\t\tconst days = [];\n\t\tconst date = new Date(year, month, 1);\n\t\tconst firstDayIndex = (date.getDay() + 6) % 7;\n\t\tconst lastDay = new Date(year, month + 1, 0).getDate();\n\t\tfor (let i = 0; i < firstDayIndex; i++)\n\t\t\tdays.push({ day: null, isCurrentMonth: false });\n\n\t\tfor (let i = 1; i <= lastDay; i++)\n\t\t\tdays.push({\n\t\t\t\tday: i,\n\t\t\t\tisCurrentMonth: true,\n\t\t\t\tdate: new Date(year, month, i),\n\t\t\t});\n\n\t\treturn days;\n\t},\n\n\t_prevMonth() {\n\t\tif (this.month === 0) {\n\t\t\tthis.month = 11;\n\t\t\tthis.year--;\n\t\t} else this.month--;\n\t\tthis.requestUpdate();\n\t},\n\n\t_nextMonth() {\n\t\tif (this.month === 11) {\n\t\t\tthis.month = 0;\n\t\t\tthis.year++;\n\t\t} else this.month++;\n\t\tthis.requestUpdate();\n\t},\n\trender() {\n\t\tconst weekdays = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n\t\tconst calendarDays = this._getCalendarDays(this.month, this.year);\n\t\tconst headerText = new Intl.DateTimeFormat(undefined, {\n\t\t\tyear: \"numeric\",\n\t\t\tmonth: \"long\",\n\t\t}).format(new Date(this.year, this.month));\n\t\treturn html`\n      <div class=\"flex justify-between items-center p-2\">\n        <uix-icon class=\"cursor-pointer rounded-full p-2 hover:bg-gray-100 dark:hover:bg-gray-700\" name=\"chevron-left\" @click=${() => this._prevMonth()}></uix-icon>\n        <span class=\"font-bold text-center\">${headerText}</span>\n        <uix-icon class=\"cursor-pointer rounded-full p-2 hover:bg-gray-100 dark:hover:bg-gray-700\" name=\"chevron-right\" @click=${() => this._nextMonth()}></uix-icon>\n      </div>\n      <div class=\"grid grid-cols-7 mt-4\" style=${`gap: ${this.gap || \"0.5rem\"}`}>\n        ${weekdays.map((day) => html`<span class=\"text-center font-semibold text-sm text-gray-500\">${day}</span>`)}\n        ${calendarDays.map((day) => {\n\t\t\t\t\tif (!day.isCurrentMonth) return html`<div></div>`;\n\t\t\t\t\tconst dateKey = $APP.Date.formatKey(day.date);\n\t\t\t\t\treturn this.dayContent({\n\t\t\t\t\t\tdateKey,\n\t\t\t\t\t\ttoggled: this.toggledDays.includes(dateKey),\n\t\t\t\t\t\tday,\n\t\t\t\t\t\thabit: this.habit,\n\t\t\t\t\t});\n\t\t\t\t})}\n      </div>\n    `;\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/overlay/modal.js": {
    "content": "import html, { css } from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-modal\",\n\n\tcss: css`& {\n\t\t--uix-modal-background-color: var(--color-default-1, #ffffff);\n\t\t--uix-modal-box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n\t\t--uix-modal-padding: var(--spacing-sm);\n\t\t--uix-modal-dialog-width: var(--sizes-xl);\n\t\t--uix-container-height: auto;\n\t\tborder: 0;   \n\t\tdialog {\n\t\t\t&[open] {\n\t\t\t\tdisplay: flex;\n\t\t\t}\t\t\t\n\t\t\tposition: absolute;\n\t\t\tmargin: auto;\t\t\t\n\t\t\tz-index: 1000; \n\t\t\toverflow-y: auto;\n\t\t\tbox-sizing: border-box; \n\t\t\ttransition: all 0.1s ease-in-out;      \n\t\t\tborder: 0;\n\t\t\tbackground-color: transparent;\n\t\t\t> .uix-card {\n\n\t\t\t}\n\t\t}  \n\t}`,\n\tproperties: {\n\t\tlabel: T.string(),\n\t\ticon: T.string(),\n\t\topen: T.boolean({ defaultValue: false }),\n\t\tcontent: T.object(),\n\t\tcontentFn: T.function(),\n\t\tonclose: T.function(),\n\t\tcta: T.object(),\n\t},\n\tfirstUpdated() {\n\t\tconst firstChild = this.children[0];\n\t\tif (firstChild && firstChild.tagName !== \"DIALOG\")\n\t\t\tfirstChild.addEventListener(\"click\", this.show.bind(this));\n\n\t\tthis.addEventListener(\"keydown\", this.onKeyDown.bind(this));\n\t\tthis.addEventListener(\"click\", this.onBackdropClick.bind(this));\n\t},\n\thide() {\n\t\tthis.querySelector(\"dialog\").close();\n\t\tthis.open = false;\n\t\tif (this.onclose) this.onclose();\n\t},\n\tfocusFirstInput() {\n\t\tconst dialog = this.querySelector(\"dialog\");\n\t\tconst firstInput = dialog.querySelector(\"input, textarea, select, button\");\n\t\tif (firstInput) firstInput.focus();\n\t},\n\tshow(e) {\n\t\tthis.open = true;\n\t\tthis.querySelector(\"dialog\").showModal();\n\t\tthis.focusFirstInput();\n\t\te?.stopPropagation();\n\t},\n\ttoggle(e) {\n\t\te?.preventDefault();\n\t\tthis.open ? this.hide() : this.show();\n\t},\n\tonKeyDown(e) {\n\t\tif (e.key === \"Escape\") this.hide();\n\t},\n\tonBackdropClick(e) {\n\t\tif (\n\t\t\t!window.getSelection().toString() &&\n\t\t\te.target === this.querySelector(\"dialog\")\n\t\t)\n\t\t\tthis.hide();\n\t},\n\trender() {\n\t\treturn html`<dialog ?open=${this.open}>\n\t\t\t\t\t\t\t\t\t<uix-card variant=${this.variant} size=${this.size} width=${this.size}>\n\t\t\t\t\t\t\t\t\t\t<div horizontal items=\"center\" width=\"full\" justify=\"space-between\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span grow size=\"lg\" transform=\"uppercase\" weight=\"semibold\" icon=${this.icon}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t${this.label}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<uix-link @click=${this.hide.bind(this)} icon=\"x\"></uix-link>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t${!this.open ? null : (this.content ?? this.contentFn.bind(this)())}\n\t\t\t\t\t\t\t\t\t</uix-card>\n\t\t\t\t\t\t\t\t</dialog>\n\t\t\t\t\t\t\t\t${!this.cta ? null : html`<div @click=${this.show.bind(this)}>${this.cta}</div>`}\n\t\t\t\t\t\t`;\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/router/index.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport Controller from \"/modules/mvc/controller/frontend.js\";\nimport html from \"/modules/mvc/view/html/index.js\";\n\nclass Router {\n\tstatic stack = [];\n\tstatic routes = {};\n\n\tstatic init(routes, defaultTitle) {\n\t\tif (!Object.keys(routes).length)\n\t\t\treturn console.error(\"Error: no routes loaded\");\n\n\t\tthis.routes = routes;\n\t\tthis.defaultTitle = defaultTitle;\n\n\t\t// Add popstate event listener for browser back/forward\n\t\twindow.addEventListener(\"popstate\", () => {\n\t\t\tconst currentPath = window.location.pathname + window.location.search;\n\t\t\tthis.handleHistoryNavigation(currentPath);\n\t\t});\n\n\t\tthis.setCurrentRoute(\n\t\t\twindow.location.pathname + window.location.search,\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tstatic handleHistoryNavigation(path) {\n\t\t// Find the index of this path in our stack\n\t\tconst stackIndex = this.stack.findIndex(\n\t\t\t(item) => this.normalizePath(item.path) === this.normalizePath(path),\n\t\t);\n\n\t\tif (stackIndex !== -1) {\n\t\t\tthis.truncateStack(stackIndex);\n\t\t\tconst matched = this.matchRoute(path);\n\t\t\tif (matched) this.updateCurrentRouteInRam(matched);\n\t\t} else this.setCurrentRoute(path, true);\n\t}\n\n\tstatic go(path) {\n\t\tthis.setCurrentRoute(path, true);\n\t}\n\n\tstatic home() {\n\t\tthis.stack = [];\n\t\tthis.go(\"/\");\n\t}\n\n\tstatic back() {\n\t\tif (this.stack.length <= 1) {\n\t\t\tthis.home();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.stack = this.stack.slice(0, -1);\n\t\twindow.history.back();\n\t}\n\n\tstatic pushToStack(path, params = {}, title = this.defaultTitle) {\n\t\tif (path === \"/\") {\n\t\t\tthis.stack = [];\n\t\t} else {\n\t\t\tthis.stack.push({ path, params, title });\n\t\t}\n\t}\n\n\tstatic isRoot() {\n\t\treturn this.stack.length === 0;\n\t}\n\n\tstatic truncateStack(index = 0) {\n\t\tif (index >= this.stack.length) return;\n\t\tthis.stack = this.stack.slice(0, index + 1);\n\t}\n\n\tstatic normalizePath(path = \"/\") {\n\t\tconst normalized = path.includes(\"url=\")\n\t\t\t? path.split(\"url=\")[1]\n\t\t\t: path.split(\"?\")[0];\n\t\treturn (normalized || \"/\").replace(/\\/+$/, \"\");\n\t}\n\n\tstatic push(path, state = {}) {\n\t\twindow.history.pushState(state, \"\", path);\n\t\tconst popstateEvent = new PopStateEvent(\"popstate\", { state });\n\t\twindow.dispatchEvent(popstateEvent);\n\t}\n\n\tstatic setCurrentRoute(path, pushToStack = true) {\n\t\tif (!this.routes) return;\n\t\tconst normalizedPath = this.normalizePath(path);\n\t\tconst matched = this.matchRoute(normalizedPath);\n\t\tif (!matched) return this.go(\"/\");\n\n\t\tthis.updateCurrentRouteInRam(matched);\n\t\tif (!pushToStack) return;\n\t\tthis.pushToStack(\n\t\t\tnormalizedPath,\n\t\t\tmatched.params,\n\t\t\tmatched.route.title || this.defaultTitle,\n\t\t);\n\t\tthis.push(path, { path: normalizedPath });\n\t}\n\n\tstatic matchRoute(url) {\n\t\tconst path = url.split(\"?\")[0];\n\t\tif (this.routes[path])\n\t\t\treturn { route: this.routes[path], params: {}, path };\n\n\t\tfor (const routePath in this.routes) {\n\t\t\tconst paramNames = [];\n\t\t\tconst regexPath = routePath.replace(/:([^/]+)/g, (_, paramName) => {\n\t\t\t\tparamNames.push(paramName);\n\t\t\t\treturn \"([^/]+)\";\n\t\t\t});\n\n\t\t\tconst regex = new RegExp(`^${regexPath.replace(/\\/+$/, \"\")}$`);\n\t\t\tconst match = path.match(regex);\n\t\t\tif (!match) continue;\n\t\t\tconst params = {};\n\t\t\tparamNames.forEach((name, index) => {\n\t\t\t\tparams[name] = match[index + 1];\n\t\t\t});\n\t\t\treturn { route: this.routes[routePath], params, path };\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic setTitle(newTitle) {\n\t\tdocument.title = newTitle;\n\t\tthis.stack.at(-1).title = newTitle;\n\t\tthis.currentRoute.route.title = newTitle;\n\t\tController.ram.set(\"currentRoute\", { ...this.currentRoute });\n\t}\n\n\tstatic updateCurrentRouteInRam(route) {\n\t\tthis.currentRoute = route;\n\t\tthis.currentRoute.root = this.isRoot();\n\t\tController.ram.set(\"currentRoute\", this.currentRoute);\n\t}\n}\n\nconst init = () => {\n\tRouter.init($APP.routes);\n};\n\n$APP.hooks.add(\"init\", init);\n$APP.routes.set({ \"/\": { component: () => html`<app-index></app-index>` } });\n\nexport default Router;\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/display/calendar-day.js": {
    "content": "import html from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-calendar-day\",\n\n\textends: \"uix-avatar\",\n\tproperties: {\n\t\ttoggled: T.boolean(),\n\t\tday: T.object(),\n\t\thabit: T.string(),\n\t\tdateKey: T.string(),\n\t},\n\n\trender() {\n\t\tconst { day, dateKey, toggled, habit } = this;\n\t\treturn html`<uix-link \n\t\t\t\t\t\t\t\t\t\tcenter\n\t\t\t\t\t\t\t\t\t\t?toggled=${toggled}\n\t\t\t\t\t\t\t\t\t\tcalendarDay\n\t\t\t\t\t\t\t\t\t\t._data=${{\n\t\t\t\t\t\t\t\t\t\t\tmodel: \"checkins\",\n\t\t\t\t\t\t\t\t\t\t\tmethod: \"add\",\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t._map=${{\n\t\t\t\t\t\t\t\t\t\t\thabit,\n\t\t\t\t\t\t\t\t\t\t\tdate: dateKey,\n\t\t\t\t\t\t\t\t\t\t\tonclick: toggled ? \"$data:remove\" : \"$data:add\",\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t${day.day}\n\t\t\t\t\t\t\t\t\t</uix-link>\n\t\t\t\t\t\t\t\t\t<uix-overlay y=\"top\" x=\"right\">\n\t\t\t\t\t\t\t\t\t\t<uix-modal\n\t\t\t\t\t\t\t\t\t\ticon=\"message\" label=\"Add notes\"\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t.cta=${html`<uix-circle\n\t\t\t\t\t\t\t\t\t\t\tclass=\"w-4 h-4 bg-green\"\n\t\t\t\t\t\t\t\t\t\t\t._map=${{\n\t\t\t\t\t\t\t\t\t\t\t\t_row: `$find:@parent.notes:date=${dateKey}`,\n\t\t\t\t\t\t\t\t\t\t\t\tsolid: \"$boolean:@id\",\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t></uix-circle>`}\n\t\t\t\t\t\t\t\t\t\t.content=${html`\n\t\t\t\t\t\t\t\t\t\t\t<uix-form\n\t\t\t\t\t\t\t\t\t\t\t\t._data=${{\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: \"notes\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tmethod: \"add\",\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t._map=${{\n\t\t\t\t\t\t\t\t\t\t\t\t\t_row: `$find:@parent.notes:date=${dateKey}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\thabit,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdate: dateKey,\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubmit: \"$data:upsert\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubmitSuccess: \"$closest:uix-modal.hide\",\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<uix-join>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<uix-input name=\"notes\" size=\"xl\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t._map=${{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_row: `$find:@parent.notes:date=${dateKey}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: \"@notes\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></uix-input>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<uix-button label=\"ADD\" icon=\"plus\" type=\"submit\" size=\"xl\"></uix-button>\n\t\t\t\t\t\t\t\t\t\t\t\t</uix-join>\n\t\t\t\t\t\t\t\t\t\t\t</uix-form>`}>\n\t\t\t\t\t\t\t\t\t\t</uix-modal>\n\t\t\t\t\t\t\t\t\t</uix-overlay>`;\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/icon-lucide/lucide/chevron-left.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"m15 18l-6-6l6-6\"/></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/icon-lucide/lucide/chevron-right.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"m9 18l6-6l-6-6\"/></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/uix/display/avatar.js": {
    "content": "import { css } from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-avatar\",\n\n\tcss: css`\n    & {\n      --uix-avatar-background-color: var(--color-default-30, #d1d5db);\n      --uix-avatar-text: var(--color-default, #000000);\n      --uix-avatar-ring: var(--color-default, #000000);\n      --uix-avatar-ring-width: 2px;\n      --uix-avatar-border-radius: 50%;\n      --uix-avatar-width: 3rem;\n      --uix-avatar-height: 3rem;\n      display: flex;\n      position: relative;\n      justify-content: center;\n      align-items: center;\n      overflow: hidden;\n      color: var(--uix-avatar-text);\n      font-size: calc(var(--uix-avatar-width) / 2.5);\n      font-weight: 500;\n      vertical-align: middle;\n\t\t\ttext-align: center; \n\t\t\tmin-width: var(--uix-avatar-width);\n\t\t\tpadding: 3px;\n    }\n\t\t> :not(uix-overlay) {\n      width: var(--uix-avatar-width);\n      height: var(--uix-avatar-height);\n      border-radius: var(--uix-avatar-border-radius);\n      background-color: var(--uix-avatar-background-color);\n\t\t}\n\n    &[ring] {\n      box-shadow: 0 0 0 var(--uix-avatar-ring-width) var(--uix-avatar-ring);\n    }\n    > img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n\n\n    > uix-overlay {\n      position: absolute;\n      z-index: 100;\n      --tx: 0;\n      --ty: 0;\n      transform: translate(var(--tx), var(--ty));\n\t\t\tcursor: pointer; \n\t\t\ttext-align: center; \n\t\t\tbackground: transparent;\n    }\n    > uix-overlay[y=\"top\"] { top: 0%; }\n    > uix-overlay[y=\"bottom\"] { bottom: 0%; }\n    > uix-overlay[y=\"center\"] { top: 50%; --ty: -50%; }\n    > uix-overlay[x=\"left\"] { left: -5%; }\n    > uix-overlay[x=\"right\"] { right: 0%; }\n    > uix-overlay[x=\"center\"] { left: 50%; --tx: -50%; }\n  `,\n\tproperties: {\n\t\tpresence: T.string({\n\t\t\tenum: [\"online\", \"offline\"],\n\t\t\treflect: true,\n\t\t}),\n\t\tring: T.boolean({\n\t\t\tdefaultValue: false,\n\t\t\treflect: true,\n\t\t}),\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/theme/darkmode.js": {
    "content": "import html from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"theme-darkmode\",\n\n\textends: \"uix-button\",\n\ticons: [\"moon\", \"sun\"],\n\tproperties: {\n\t\twidth: T.string({ defaultValue: \"fit\" }),\n\t\tdarkmode: T.boolean({ sync: \"local\", defaultValue: true }),\n\t},\n\n\tclick(e) {\n\t\te.stopPropagation();\n\t\tdocument.documentElement.classList.toggle(\"dark\");\n\t\tthis.darkmode = !this.darkmode;\n\t\tthis.icon = !this.darkmode ? \"sun\" : \"moon\";\n\t},\n\n\tconnectedCallback() {\n\t\tthis.icon = this.darkmode ? \"sun\" : \"moon\";\n\t\tif (this.darkmode) document.documentElement.classList.add(\"dark\");\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/app/dev-only.js": {
    "content": "import $APP from \"/bootstrap.js\";\n\nexport default {\n\ttag: \"app-dev-only\",\n\n\tconnectedCallback() {\n\t\tif ($APP.settings.dev) {\n\t\t\tconst template = this.querySelector(\"template\");\n\t\t\tif (template) {\n\t\t\t\tthis.append(template.content.cloneNode(true));\n\t\t\t}\n\t\t}\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/p2p/button.js": {
    "content": "import $APP from \"/bootstrap.js\";\nimport Controller from \"/modules/mvc/controller/frontend.js\";\nimport html from \"/modules/mvc/view/html/index.js\";\nimport Trystero from \"/modules/p2p/trystero.js\";\nimport T from \"/modules/types/index.js\";\n\nconst eventHandlers = {\n\tSYNC_DATA_OP: ({ payload }) => {\n\t\tconsole.log({ payload });\n\t\tController.backend(\"P2P:LOAD_DATA_OP\", payload);\n\t},\n\tREQUEST_TO_JOIN: ({ payload, peerId, component }) => {\n\t\tconst { deviceId } = payload;\n\t\tconsole.log(\n\t\t\t`Received join request from peer ${peerId} with device ID ${deviceId}`,\n\t\t);\n\n\t\tconst isKnownDevice = component.currentApp?.connections?.some(\n\t\t\t(conn) => conn.deviceId === deviceId,\n\t\t);\n\n\t\tif (isKnownDevice) {\n\t\t\tconsole.log(`Auto-approving known device: ${deviceId}`);\n\t\t\tcomponent.projectRoom.sendEvent({ type: \"RECONNECT_APPROVED\" }, peerId);\n\t\t} else {\n\t\t\tconsole.log(\n\t\t\t\t`Device ${deviceId} is not trusted. Awaiting manual approval.`,\n\t\t\t);\n\t\t\tif (component.connectionRequests.some((req) => req.peerId === peerId))\n\t\t\t\treturn;\n\t\t\tcomponent.connectionRequests = [\n\t\t\t\t...component.connectionRequests,\n\t\t\t\t{ peerId, deviceId },\n\t\t\t];\n\t\t}\n\t},\n\tJOIN_APPROVED: async ({ payload, peerId }) => {\n\t\tconsole.log(`Join request approved by ${peerId}. Receiving DB dump.`);\n\t\tawait Controller.backend(\"P2P:JOIN_APP\", payload);\n\t\twindow.location.reload();\n\t},\n\tRECONNECT_APPROVED: ({ peerId }) => {\n\t\tconsole.log(`Reconnection approved by ${peerId}.`);\n\t\talert(\"Reconnected to project successfully!\");\n\t},\n\tJOIN_DENIED: ({ peerId, component }) => {\n\t\tconsole.log(`Join request denied by ${peerId}.`);\n\t\talert(\"Your request to join the project was denied. Leaving room.\");\n\t\tcomponent.projectRoom?.room.leave();\n\t\tcomponent.projectRoom = null;\n\t},\n\tDATA_OPERATION: ({ payload, peerId }) => {\n\t\tconsole.log(`Received DATA_OPERATION from peer ${peerId}:`, payload);\n\t},\n};\n\nexport default {\n\ttag: \"p2p-button\",\n\n\tproperties: {\n\t\tapps: T.array({ defaultValue: [] }),\n\t\tcurrentApp: T.object({ defaultValue: null }),\n\t\tprojectRoom: T.object(),\n\t\tpeerCount: T.number({ defaultValue: 0 }),\n\t\tconnectionRequests: T.array({ defaultValue: [], sync: \"local\" }),\n\t\tjoinAppId: T.string({ defaultValue: \"\" }),\n\t\tisLoading: T.boolean({ defaultValue: true }),\n\t},\n\n\tasync firstUpdated() {\n\t\tthis.isLoading = true;\n\t\t[this.apps, this.currentApp] = await Promise.all([\n\t\t\tController.backend(\"LIST_APPS\"),\n\t\t\tController.backend(\"GET_CURRENT_APP\"),\n\t\t]);\n\t\tthis.isLoading = false;\n\n\t\tif (this.currentApp?.id && Trystero) {\n\t\t\tthis._joinRoom(this.currentApp.id, true);\n\t\t}\n\t},\n\n\t_joinRoom(appId, isMember = false) {\n\t\tif (!appId || !Trystero) return;\n\t\tconsole.log(\"JOIN ROOM\", appId);\n\t\tthis.peerCount = 0;\n\t\tthis.connectionRequests = [];\n\n\t\tconst room = Trystero.joinRoom({ appId }, appId);\n\t\tconst [sendEvent, onEvent] = room.makeAction(\"event\");\n\t\tthis.sendEvent = sendEvent;\n\t\tonEvent((event, peerId) => {\n\t\t\tconst handler = eventHandlers[event.type];\n\t\t\tif (handler) {\n\t\t\t\thandler({ payload: event.payload, peerId, component: this });\n\t\t\t} else {\n\t\t\t\tconsole.warn(`No handler found for event type: ${event.type}`);\n\t\t\t}\n\t\t});\n\n\t\troom.onPeerJoin((peerId) => {\n\t\t\tthis.peerCount = Object.keys(room.getPeers()).length;\n\t\t\tif (!isMember) {\n\t\t\t\tconsole.log(`Requesting to join room ${appId}...`);\n\t\t\t\tsendEvent({\n\t\t\t\t\ttype: \"REQUEST_TO_JOIN\",\n\t\t\t\t\tpayload: { deviceId: $APP.about.device.id },\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\troom.onPeerLeave((peerId) => {\n\t\t\tthis.peerCount = Object.keys(room.getPeers()).length;\n\t\t\tthis.connectionRequests = this.connectionRequests.filter(\n\t\t\t\t(req) => req.peerId !== peerId,\n\t\t\t);\n\t\t});\n\n\t\tthis.projectRoom = { room, sendEvent, appId };\n\t},\n\n\tasync _handleApproveRequest(request) {\n\t\tconsole.log(\n\t\t\t`Approving request for peer ${request.peerId} with device ${request.deviceId}`,\n\t\t);\n\n\t\tawait Controller.backend(\"P2P:REGISTER_PEER_CONNECTION\", {\n\t\t\tappId: this.currentApp.id,\n\t\t\tdeviceId: request.deviceId,\n\t\t});\n\n\t\tconst dump = await Controller.backend(\"GET_DB_DUMP\");\n\t\tthis.projectRoom.sendEvent(\n\t\t\t{ type: \"JOIN_APPROVED\", payload: { app: this.currentApp, db: dump } },\n\t\t\trequest.peerId,\n\t\t);\n\n\t\tif (\n\t\t\t!this.currentApp.connections?.some((c) => c.deviceId === request.deviceId)\n\t\t) {\n\t\t\tthis.currentApp.connections = [\n\t\t\t\t...(this.currentApp.connections || []),\n\t\t\t\t{ deviceId: request.deviceId },\n\t\t\t];\n\t\t}\n\n\t\tthis.connectionRequests = this.connectionRequests.filter(\n\t\t\t(r) => r.peerId !== request.peerId,\n\t\t);\n\t},\n\n\t_handleDenyRequest(request) {\n\t\tconsole.log(`Denying request from ${request.peerId}`);\n\t\tthis.projectRoom.sendEvent(\n\t\t\t{ type: \"JOIN_DENIED\", payload: {} },\n\t\t\trequest.peerId,\n\t\t);\n\t\tthis.connectionRequests = this.connectionRequests.filter(\n\t\t\t(r) => r.peerId !== request.peerId,\n\t\t);\n\t},\n\n\t_handleJoinApp() {\n\t\tconst appId = this.joinAppId;\n\t\tif (appId) {\n\t\t\tthis._joinRoom(appId, false);\n\t\t}\n\t},\n\n\tasync _handleSelectApp(appId) {\n\t\tif (appId && appId !== this.currentApp?.id) {\n\t\t\tawait Controller.backend(\"SELECT_APP\", { appId });\n\t\t\twindow.location.reload();\n\t\t}\n\t},\n\n\tasync _handleCreateApp() {\n\t\tawait Controller.backend(\"CREATE_APP\");\n\t\twindow.location.reload();\n\t},\n\n\t_handleSendDataOperation() {\n\t\tif (!this.projectRoom || this.peerCount === 0) return;\n\t\tconst samplePayload = {\n\t\t\ttimestamp: Date.now(),\n\t\t\toperation: \"CREATE_ITEM\",\n\t\t\tdata: {\n\t\t\t\tid: `item-${Math.random().toString(36).substr(2, 9)}`,\n\t\t\t\tvalue: \"hello world\",\n\t\t\t},\n\t\t};\n\t\tthis.projectRoom.sendEvent({\n\t\t\ttype: \"DATA_OPERATION\",\n\t\t\tpayload: samplePayload,\n\t\t});\n\t},\n\tconnectedCallback() {\n\t\t$APP.p2p.on(\"SEND_DATA_OP\", (payload) => {\n\t\t\tif (this.sendEvent) this.sendEvent({ type: \"SYNC_DATA_OP\", payload });\n\t\t});\n\t\tController.backend(\"START_SYNC_DATA\");\n\t},\n\tdisconnectedCallback() {\n\t\tController.backend(\"STOP_SYNC_DATA\");\n\t},\n\trender() {\n\t\tconst isConnected = this.peerCount > 0;\n\t\tconst statusText = isConnected\n\t\t\t? `Connected to ${this.peerCount} peer(s)`\n\t\t\t: \"Offline\";\n\n\t\tconst modalContent = html`\n      <div class=\"flex flex-col gap-4 p-4 w-[640px]\">\n        <p class=\"text-lg\">Project ID: <strong class=\"font-mono bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded\">#${this.currentApp?.id}</strong></p>\n        <p class=\"text-sm text-gray-500 flex items-center gap-2\">Status: ${statusText} <uix-icon name=${isConnected ? \"users\" : \"cloud-off\"}></uix-icon></p>\n        \n        ${\n\t\t\t\t\tthis.projectRoom\n\t\t\t\t\t\t? html`\n          <hr class=\"my-2 border-gray-200 dark:border-gray-700\" />\n          <h6 class=\"font-semibold\">Test Data Sync</h6>\n          <uix-button\n            class=\"rounded-md bg-gray-200 dark:bg-gray-700 text-black dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n            label=\"Send Data Operation\"\n            icon=\"send\"\n            .click=${this._handleSendDataOperation.bind(this)}\n            .disabled=${!isConnected}\n            title=${!isConnected ? \"Must be connected to another peer to send data\" : \"Send a sample data operation\"}\n          ></uix-button>\n        `\n\t\t\t\t\t\t: \"\"\n\t\t\t\t}\n        ${\n\t\t\t\t\tthis.connectionRequests.length > 0\n\t\t\t\t\t\t? html`\n          <hr class=\"my-2 border-gray-200 dark:border-gray-700\" />\n          <h6 class=\"font-semibold\">Connection Requests</h6>\n          <div class=\"flex flex-col gap-2\">\n            ${this.connectionRequests.map(\n\t\t\t\t\t\t\t(req) => html`\n              <div class=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-md flex flex-col gap-2\">\n                <p>Request from: <strong class=\"font-mono\">${req.peerId.slice(0, 8)}...</strong></p>\n                <div class=\"flex justify-end gap-2\">\n                  <uix-button class=\"text-xs px-2 py-1 rounded-md bg-red-600 hover:bg-red-700 text-white\" .click=${() => this._handleDenyRequest(req)} label=\"Deny\"></uix-button>\n                  <uix-button class=\"text-xs px-2 py-1 rounded-md bg-green-600 hover:bg-green-700 text-white\" .click=${() => this._handleApproveRequest(req)} label=\"Approve\"></uix-button>\n                </div>\n              </div>\n            `,\n\t\t\t\t\t\t)}\n          </div>\n        `\n\t\t\t\t\t\t: \"\"\n\t\t\t\t}\n\n        <hr class=\"my-2 border-gray-200 dark:border-gray-700\" />\n        <h6 class=\"font-semibold\">My Projects</h6>\n        ${\n\t\t\t\t\tthis.isLoading\n\t\t\t\t\t\t? html`<uix-spinner></uix-spinner>`\n\t\t\t\t\t\t: html`\n          <div class=\"flex flex-col gap-2\">\n            ${this.apps.map(\n\t\t\t\t\t\t\t(app) => html`\n              <uix-button\n                class=\"w-full text-left px-3 py-2 rounded-md ${app.id === this.currentApp?.id ? \"bg-blue-600 text-white\" : \"bg-gray-200 dark:bg-gray-700 text-black dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600\"}\"\n                .click=${() => this._handleSelectApp(app.id)}\n                label=${`Project ${app.id.slice(0, 12)}...`}\n              ></uix-button>\n            `,\n\t\t\t\t\t\t)}\n          </div>\n        `\n\t\t\t\t}\n\n        <hr class=\"my-2 border-gray-200 dark:border-gray-700\" />\n        <h6 class=\"font-semibold\">Join a Project</h6>\n        <uix-join class=\"flex\">\n          <uix-input\n            class=\"flex-grow border rounded-md dark:bg-gray-800 dark:border-gray-600\"\n            label=\"Enter Project ID to join\"\n            .bind=${this.prop(\"joinAppId\")}            \n          ></uix-input>\n          <uix-button\n            class=\"px-4 py-2 rounded-md bg-gray-200 dark:bg-gray-700 text-black dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n            .click=${this._handleJoinApp.bind(this)}\n            label=\"Join\"\n            icon=\"log-in\"\n            .disabled=${!this.joinAppId}\n          ></uix-button>\n\t\t\t\t</uix-join>\n\n        <hr class=\"my-2 border-gray-200 dark:border-gray-700\" />\n        <uix-button class=\"w-full px-4 py-2 rounded-md bg-blue-600 hover:bg-blue-700 text-white\" .click=${this._handleCreateApp} label=\"Create New Project\" icon=\"plus\"></uix-button>\n      </div>\n    `;\n\n\t\treturn html`\n        <uix-modal\n          .content=${modalContent}\n          .cta=${html`<uix-button icon=\"wifi\"></uix-button>`}\n        ></uix-modal>\n    `;\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/icon-lucide/lucide/trash.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 6h18m-2 0v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6m3 0V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"/></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/icon-lucide/lucide/x.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18 6L6 18M6 6l12 12\"/></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/icon-lucide/lucide/plus.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 12h14m-7-7v14\"/></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/icon-lucide/lucide/message-square-text.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2zm-8-7H7m10 4H7\"/></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/icon-lucide/lucide/settings.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><g fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/></g></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/p2p/trystero.js": {
    "content": "const { floor: e, random: r } = Math,\n\tt = \"Trystero\",\n\tn = (e, r) => Array(e).fill().map(r),\n\ta = \"0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",\n\to = (t) => n(t, () => a[e(62 * r())]).join(\"\"),\n\ts = o(20),\n\ti = Promise.all.bind(Promise),\n\tc = \"undefined\" != typeof window,\n\t{ entries: l, fromEntries: d, keys: f } = Object,\n\tu = () => {},\n\tp = (e) => Error(`${t}: ${e}`),\n\ty = new TextEncoder(),\n\tm = new TextDecoder(),\n\tw = (e) => y.encode(e),\n\tg = (e) => m.decode(e),\n\th = (...e) => e.join(\"@\"),\n\tb = JSON.stringify,\n\tk = JSON.parse,\n\tv = {},\n\tP = \"AES-GCM\",\n\tT = {},\n\tA = async (e) =>\n\t\tT[e] ||\n\t\t(T[e] = Array.from(\n\t\t\tnew Uint8Array(await crypto.subtle.digest(\"SHA-1\", w(e))),\n\t\t)\n\t\t\t.map((e) => e.toString(36))\n\t\t\t.join(\"\")),\n\tS = async (e, r) => {\n\t\tconst t = crypto.getRandomValues(new Uint8Array(16));\n\t\treturn (\n\t\t\tt.join(\",\") +\n\t\t\t\"$\" +\n\t\t\t((n = await crypto.subtle.encrypt({ name: P, iv: t }, await e, w(r))),\n\t\t\tbtoa(String.fromCharCode.apply(null, new Uint8Array(n))))\n\t\t);\n\t\tvar n;\n\t},\n\tD = async (e, r) => {\n\t\tconst [t, n] = r.split(\"$\");\n\t\treturn g(\n\t\t\tawait crypto.subtle.decrypt(\n\t\t\t\t{ name: P, iv: new Uint8Array(t.split(\",\")) },\n\t\t\t\tawait e,\n\t\t\t\t((e) => {\n\t\t\t\t\tconst r = atob(e);\n\t\t\t\t\treturn new Uint8Array(r.length).map((e, t) => r.charCodeAt(t)).buffer;\n\t\t\t\t})(n),\n\t\t\t),\n\t\t);\n\t},\n\tL = \"icegatheringstatechange\",\n\tI = \"offer\";\nvar $ = (e, { rtcConfig: r, rtcPolyfill: t, turnConfig: n }) => {\n\tconst a = new (t || RTCPeerConnection)({\n\t\t\ticeServers: E.concat(n || []),\n\t\t\t...r,\n\t\t}),\n\t\to = {};\n\tlet s = !1,\n\t\tc = !1,\n\t\tl = null;\n\tconst d = (e) => {\n\t\t\t(e.binaryType = \"arraybuffer\"),\n\t\t\t\t(e.bufferedAmountLowThreshold = 65535),\n\t\t\t\t(e.onmessage = (e) => o.data?.(e.data)),\n\t\t\t\t(e.onopen = () => o.connect?.()),\n\t\t\t\t(e.onclose = () => o.close?.()),\n\t\t\t\t(e.onerror = (e) => o.error?.(e));\n\t\t},\n\t\tf = (e) =>\n\t\t\tPromise.race([\n\t\t\t\tnew Promise((r) => {\n\t\t\t\t\tconst t = () => {\n\t\t\t\t\t\t\"complete\" === e.iceGatheringState &&\n\t\t\t\t\t\t\t(e.removeEventListener(L, t), r());\n\t\t\t\t\t};\n\t\t\t\t\te.addEventListener(L, t), t();\n\t\t\t\t}),\n\t\t\t\tnew Promise((e) => setTimeout(e, 5e3)),\n\t\t\t]).then(() => ({\n\t\t\t\ttype: e.localDescription.type,\n\t\t\t\tsdp: e.localDescription.sdp.replace(/a=ice-options:trickle\\s\\n/g, \"\"),\n\t\t\t}));\n\treturn (\n\t\te\n\t\t\t? ((l = a.createDataChannel(\"data\")), d(l))\n\t\t\t: (a.ondatachannel = ({ channel: e }) => {\n\t\t\t\t\t(l = e), d(e);\n\t\t\t\t}),\n\t\t(a.onnegotiationneeded = async () => {\n\t\t\ttry {\n\t\t\t\t(s = !0), await a.setLocalDescription();\n\t\t\t\tconst e = await f(a);\n\t\t\t\to.signal?.(e);\n\t\t\t} catch (e) {\n\t\t\t\to.error?.(e);\n\t\t\t} finally {\n\t\t\t\ts = !1;\n\t\t\t}\n\t\t}),\n\t\t(a.onconnectionstatechange = () => {\n\t\t\t[\"disconnected\", \"failed\", \"closed\"].includes(a.connectionState) &&\n\t\t\t\to.close?.();\n\t\t}),\n\t\t(a.ontrack = (e) => {\n\t\t\to.track?.(e.track, e.streams[0]), o.stream?.(e.streams[0]);\n\t\t}),\n\t\t(a.onremovestream = (e) => o.stream?.(e.stream)),\n\t\te && (a.canTrickleIceCandidates || a.onnegotiationneeded()),\n\t\t{\n\t\t\tcreated: Date.now(),\n\t\t\tconnection: a,\n\t\t\tget channel() {\n\t\t\t\treturn l;\n\t\t\t},\n\t\t\tget isDead() {\n\t\t\t\treturn \"closed\" === a.connectionState;\n\t\t\t},\n\t\t\tasync signal(r) {\n\t\t\t\tif (\"open\" !== l?.readyState || r.sdp?.includes(\"a=rtpmap\"))\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (r.type === I) {\n\t\t\t\t\t\t\tif (s || (\"stable\" !== a.signalingState && !c)) {\n\t\t\t\t\t\t\t\tif (e) return;\n\t\t\t\t\t\t\t\tawait i([\n\t\t\t\t\t\t\t\t\ta.setLocalDescription({ type: \"rollback\" }),\n\t\t\t\t\t\t\t\t\ta.setRemoteDescription(r),\n\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t} else await a.setRemoteDescription(r);\n\t\t\t\t\t\t\tawait a.setLocalDescription();\n\t\t\t\t\t\t\tconst t = await f(a);\n\t\t\t\t\t\t\treturn o.signal?.(t), t;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\"answer\" === r.type) {\n\t\t\t\t\t\t\tc = !0;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait a.setRemoteDescription(r);\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tc = !1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\to.error?.(e);\n\t\t\t\t\t}\n\t\t\t},\n\t\t\tsendData(e) {\n\t\t\t\treturn l.send(e);\n\t\t\t},\n\t\t\tdestroy() {\n\t\t\t\tl?.close(), a.close(), (s = !1), (c = !1);\n\t\t\t},\n\t\t\tsetHandlers(e) {\n\t\t\t\treturn Object.assign(o, e);\n\t\t\t},\n\t\t\tofferPromise: e\n\t\t\t\t? new Promise(\n\t\t\t\t\t\t(e) =>\n\t\t\t\t\t\t\t(o.signal = (r) => {\n\t\t\t\t\t\t\t\tr.type === I && e(r);\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t: Promise.resolve(),\n\t\t\taddStream(e) {\n\t\t\t\treturn e.getTracks().forEach((r) => a.addTrack(r, e));\n\t\t\t},\n\t\t\tremoveStream(e) {\n\t\t\t\treturn a\n\t\t\t\t\t.getSenders()\n\t\t\t\t\t.filter((r) => e.getTracks().includes(r.track))\n\t\t\t\t\t.forEach((e) => a.removeTrack(e));\n\t\t\t},\n\t\t\taddTrack(e, r) {\n\t\t\t\treturn a.addTrack(e, r);\n\t\t\t},\n\t\t\tremoveTrack(e) {\n\t\t\t\tconst r = a.getSenders().find((r) => r.track === e);\n\t\t\t\tr && a.removeTrack(r);\n\t\t\t},\n\t\t\treplaceTrack(e, r) {\n\t\t\t\tconst t = a.getSenders().find((r) => r.track === e);\n\t\t\t\tif (t) return t.replaceTrack(r);\n\t\t\t},\n\t\t}\n\t);\n};\nconst E = [\n\t\t...n(3, (e, r) => `stun:stun${r || \"\"}.l.google.com:19302`),\n\t\t\"stun:stun.cloudflare.com:3478\",\n\t].map((e) => ({ urls: e })),\n\tC = Object.getPrototypeOf(Uint8Array),\n\tU = 16369,\n\t_ = 255,\n\tO = \"bufferedamountlow\",\n\tj = (e) => \"@_\" + e;\nconst H = {},\n\tJ = {},\n\tM = {},\n\tR = {},\n\tx = {},\n\tq = {},\n\tB = {},\n\tG = {},\n\tN = async (e) => {\n\t\tif (J[e]) return J[e];\n\t\tconst r = (await A(e)).slice(0, 20);\n\t\treturn (J[e] = r), (M[r] = e), r;\n\t},\n\tz = async (e, r, t) =>\n\t\te.send(b({ action: \"announce\", info_hash: await N(r), peer_id: s, ...t })),\n\tK = (e, r, n) =>\n\t\tconsole.warn(\n\t\t\t`${t}: torrent tracker ${n ? \"failure\" : \"warning\"} from ${e} - ${r}`,\n\t\t),\n\tV = (({ init: e, subscribe: r, announce: a }) => {\n\t\tconst o = {};\n\t\tlet y,\n\t\t\tm,\n\t\t\tv,\n\t\t\tT = !1;\n\t\treturn (L, I, E) => {\n\t\t\tconst { appId: H } = L;\n\t\t\tif (o[H]?.[I]) return o[H][I];\n\t\t\tconst J = {},\n\t\t\t\tM = {},\n\t\t\t\tR = h(t, H, I),\n\t\t\t\tx = A(R),\n\t\t\t\tq = A(h(R, s)),\n\t\t\t\tB = (async (e, r, t) =>\n\t\t\t\t\tcrypto.subtle.importKey(\n\t\t\t\t\t\t\"raw\",\n\t\t\t\t\t\tawait crypto.subtle.digest(\n\t\t\t\t\t\t\t{ name: \"SHA-256\" },\n\t\t\t\t\t\t\tw(`${e}:${r}:${t}`),\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{ name: P },\n\t\t\t\t\t\t!1,\n\t\t\t\t\t\t[\"encrypt\", \"decrypt\"],\n\t\t\t\t\t))(L.password || \"\", H, I),\n\t\t\t\tG = (e) => async (r) => ({ type: r.type, sdp: await e(B, r.sdp) }),\n\t\t\t\tN = G(D),\n\t\t\t\tz = G(S),\n\t\t\t\tK = () => $(!0, L),\n\t\t\t\tV = (e, r, t) => {\n\t\t\t\t\tM[r]\n\t\t\t\t\t\t? M[r] !== e && e.destroy()\n\t\t\t\t\t\t: ((M[r] = e),\n\t\t\t\t\t\t\tre(e, r),\n\t\t\t\t\t\t\tJ[r]?.forEach((e, r) => {\n\t\t\t\t\t\t\t\tr !== t && e.destroy();\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tdelete J[r]);\n\t\t\t\t},\n\t\t\t\tW = (e, r) => {\n\t\t\t\t\tM[r] === e && delete M[r];\n\t\t\t\t},\n\t\t\t\tF = (e) => (\n\t\t\t\t\tm.push(...n(e, K)),\n\t\t\t\t\ti(\n\t\t\t\t\t\tm\n\t\t\t\t\t\t\t.splice(0, e)\n\t\t\t\t\t\t\t.map((e) =>\n\t\t\t\t\t\t\t\te.offerPromise.then(z).then((r) => ({ peer: e, offer: r })),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tQ = (e, r) =>\n\t\t\t\t\tE?.({\n\t\t\t\t\t\terror: `incorrect password (${L.password}) when decrypting ${r}`,\n\t\t\t\t\t\tappId: H,\n\t\t\t\t\t\tpeerId: e,\n\t\t\t\t\t\troomId: I,\n\t\t\t\t\t}),\n\t\t\t\tX = (e) => async (r, t, n) => {\n\t\t\t\t\tconst [a, o] = await i([x, q]);\n\t\t\t\t\tif (r !== a && r !== o) return;\n\t\t\t\t\tconst {\n\t\t\t\t\t\tpeerId: c,\n\t\t\t\t\t\toffer: l,\n\t\t\t\t\t\tanswer: d,\n\t\t\t\t\t\tpeer: f,\n\t\t\t\t\t} = \"string\" == typeof t ? k(t) : t;\n\t\t\t\t\tif (c !== s && !M[c])\n\t\t\t\t\t\tif (!c || l || d) {\n\t\t\t\t\t\t\tif (l) {\n\t\t\t\t\t\t\t\tconst r = J[c]?.[e];\n\t\t\t\t\t\t\t\tif (r && s > c) return;\n\t\t\t\t\t\t\t\tconst t = $(!1, L);\n\t\t\t\t\t\t\t\tlet a;\n\t\t\t\t\t\t\t\tt.setHandlers({\n\t\t\t\t\t\t\t\t\tconnect() {\n\t\t\t\t\t\t\t\t\t\treturn V(t, c, e);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tclose() {\n\t\t\t\t\t\t\t\t\t\treturn W(t, c);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\ta = await N(l);\n\t\t\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t\t\treturn void Q(c, \"offer\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (t.isDead) return;\n\t\t\t\t\t\t\t\tconst [o, d] = await i([A(h(R, c)), t.signal(a)]);\n\t\t\t\t\t\t\t\tn(o, b({ peerId: s, answer: await z(d) }));\n\t\t\t\t\t\t\t} else if (d) {\n\t\t\t\t\t\t\t\tlet r;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tr = await N(d);\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\treturn void Q(c, \"answer\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (f)\n\t\t\t\t\t\t\t\t\tf.setHandlers({\n\t\t\t\t\t\t\t\t\t\tconnect() {\n\t\t\t\t\t\t\t\t\t\t\treturn V(f, c, e);\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tclose() {\n\t\t\t\t\t\t\t\t\t\t\treturn W(f, c);\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\tf.signal(r);\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tconst t = J[c]?.[e];\n\t\t\t\t\t\t\t\t\tt && !t.isDead && t.signal(r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (J[c]?.[e]) return;\n\t\t\t\t\t\t\tconst [[{ peer: r, offer: t }], a] = await i([F(1), A(h(R, c))]);\n\t\t\t\t\t\t\t(J[c] ||= []),\n\t\t\t\t\t\t\t\t(J[c][e] = r),\n\t\t\t\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\t\t((e, r) => {\n\t\t\t\t\t\t\t\t\t\t\tif (M[e]) return;\n\t\t\t\t\t\t\t\t\t\t\tconst t = J[e]?.[r];\n\t\t\t\t\t\t\t\t\t\t\tt && (delete J[e][r], t.destroy());\n\t\t\t\t\t\t\t\t\t\t})(c, e),\n\t\t\t\t\t\t\t\t\t0.9 * Y[e],\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tr.setHandlers({\n\t\t\t\t\t\t\t\t\tconnect() {\n\t\t\t\t\t\t\t\t\t\treturn V(r, c, e);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tclose() {\n\t\t\t\t\t\t\t\t\t\treturn W(r, c);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tn(a, b({ peerId: s, offer: t }));\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tif (!L) throw p(\"requires a config map as the first argument\");\n\t\t\tif (!H && !L.firebaseApp) throw p(\"config map is missing appId field\");\n\t\t\tif (!I) throw p(\"roomId argument required\");\n\t\t\tif (!T) {\n\t\t\t\tconst r = e(L);\n\t\t\t\t(m = n(20, K)),\n\t\t\t\t\t(y = Array.isArray(r) ? r : [r]),\n\t\t\t\t\t(T = !0),\n\t\t\t\t\t(v = setInterval(\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t(m = m.filter((e) => {\n\t\t\t\t\t\t\t\tconst r = Date.now() - e.created < 57333;\n\t\t\t\t\t\t\t\treturn r || e.destroy(), r;\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t59052.99,\n\t\t\t\t\t));\n\t\t\t}\n\t\t\tconst Y = y.map(() => 5333),\n\t\t\t\tZ = [],\n\t\t\t\tee = y.map(async (e, t) => r(await e, await x, await q, X(t), F));\n\t\t\ti([x, q]).then(([e, r]) => {\n\t\t\t\tconst t = async (n, o) => {\n\t\t\t\t\tconst s = await a(n, e, r);\n\t\t\t\t\t\"number\" == typeof s && (Y[o] = s),\n\t\t\t\t\t\t(Z[o] = setTimeout(() => t(n, o), Y[o]));\n\t\t\t\t};\n\t\t\t\tee.forEach(async (e, r) => {\n\t\t\t\t\tawait e, t(await y[r], r);\n\t\t\t\t});\n\t\t\t});\n\t\t\tlet re = u;\n\t\t\treturn (\n\t\t\t\t(o[H] ||= {}),\n\t\t\t\t(o[H][I] = ((e, r, a) => {\n\t\t\t\t\tconst o = {},\n\t\t\t\t\t\ts = {},\n\t\t\t\t\t\ty = {},\n\t\t\t\t\t\tm = {},\n\t\t\t\t\t\th = {},\n\t\t\t\t\t\tv = {},\n\t\t\t\t\t\tP = {},\n\t\t\t\t\t\tT = {\n\t\t\t\t\t\t\tonPeerJoin: u,\n\t\t\t\t\t\t\tonPeerLeave: u,\n\t\t\t\t\t\t\tonPeerStream: u,\n\t\t\t\t\t\t\tonPeerTrack: u,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tA = (e, r) =>\n\t\t\t\t\t\t\t(e ? (Array.isArray(e) ? e : [e]) : f(o)).flatMap((e) => {\n\t\t\t\t\t\t\t\tconst n = o[e];\n\t\t\t\t\t\t\t\treturn n\n\t\t\t\t\t\t\t\t\t? r(e, n)\n\t\t\t\t\t\t\t\t\t: (console.warn(`${t}: no peer with id ${e} found`), []);\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tS = (e) => {\n\t\t\t\t\t\t\to[e] &&\n\t\t\t\t\t\t\t\t(delete o[e], delete m[e], delete h[e], T.onPeerLeave(e), r(e));\n\t\t\t\t\t\t},\n\t\t\t\t\t\tD = (e) => {\n\t\t\t\t\t\t\tif (s[e]) return y[e];\n\t\t\t\t\t\t\tif (!e) throw p(\"action type argument is required\");\n\t\t\t\t\t\t\tconst r = w(e);\n\t\t\t\t\t\t\tif (r.byteLength > 12)\n\t\t\t\t\t\t\t\tthrow p(\n\t\t\t\t\t\t\t\t\t`action type string \"${e}\" (${r.byteLength}b) exceeds byte limit (12). Hint: choose a shorter name.`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst t = new Uint8Array(12);\n\t\t\t\t\t\t\tt.set(r);\n\t\t\t\t\t\t\tlet a = 0;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t(s[e] = {\n\t\t\t\t\t\t\t\t\tonComplete: u,\n\t\t\t\t\t\t\t\t\tonProgress: u,\n\t\t\t\t\t\t\t\t\tsetOnComplete: (r) => (s[e] = { ...s[e], onComplete: r }),\n\t\t\t\t\t\t\t\t\tsetOnProgress: (r) => (s[e] = { ...s[e], onProgress: r }),\n\t\t\t\t\t\t\t\t\tasync send(e, r, s, c) {\n\t\t\t\t\t\t\t\t\t\tif (s && \"object\" != typeof s)\n\t\t\t\t\t\t\t\t\t\t\tthrow p(\"action meta argument must be an object\");\n\t\t\t\t\t\t\t\t\t\tconst l = typeof e;\n\t\t\t\t\t\t\t\t\t\tif (\"undefined\" === l)\n\t\t\t\t\t\t\t\t\t\t\tthrow p(\"action data cannot be undefined\");\n\t\t\t\t\t\t\t\t\t\tconst d = \"string\" !== l,\n\t\t\t\t\t\t\t\t\t\t\tf = e instanceof Blob,\n\t\t\t\t\t\t\t\t\t\t\tu = f || e instanceof ArrayBuffer || e instanceof C;\n\t\t\t\t\t\t\t\t\t\tif (s && !u)\n\t\t\t\t\t\t\t\t\t\t\tthrow p(\n\t\t\t\t\t\t\t\t\t\t\t\t\"action meta argument can only be used with binary data\",\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tconst y = u\n\t\t\t\t\t\t\t\t\t\t\t\t? new Uint8Array(f ? await e.arrayBuffer() : e)\n\t\t\t\t\t\t\t\t\t\t\t\t: w(d ? b(e) : e),\n\t\t\t\t\t\t\t\t\t\t\tm = s ? w(b(s)) : null,\n\t\t\t\t\t\t\t\t\t\t\tg = Math.ceil(y.byteLength / U) + (s ? 1 : 0) || 1,\n\t\t\t\t\t\t\t\t\t\t\th = n(g, (e, r) => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst n = r === g - 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\to = s && 0 === r,\n\t\t\t\t\t\t\t\t\t\t\t\t\ti = new Uint8Array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t15 +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(o\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? m.byteLength\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? y.byteLength - U * (g - (s ? 2 : 1))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: U),\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.set(t),\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.set([a], 12),\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.set([n | (o << 1) | (u << 2) | (d << 3)], 13),\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.set([Math.round(((r + 1) / g) * _)], 14),\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.set(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ts\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? o\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? m\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: y.subarray((r - 1) * U, r * U)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: y.subarray(r * U, (r + 1) * U),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t15,\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\ti\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t(a = (a + 1) & _),\n\t\t\t\t\t\t\t\t\t\t\ti(\n\t\t\t\t\t\t\t\t\t\t\t\tA(r, async (e, r) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst { channel: t } = r;\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet n = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (; n < g; ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst a = h[n];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(t.bufferedAmount >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tt.bufferedAmountLowThreshold &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(await new Promise((e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst r = () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tt.removeEventListener(O, r), e();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tt.addEventListener(O, r);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t!o[e])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tr.sendData(a), n++, c?.(a[14] / _, e, s);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t(y[e] ||= [s[e].send, s[e].setOnComplete, s[e].setOnProgress])\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tL = (e, r) => {\n\t\t\t\t\t\t\tconst n = new Uint8Array(r),\n\t\t\t\t\t\t\t\ta = g(n.subarray(0, 12)).replaceAll(\"\\0\", \"\"),\n\t\t\t\t\t\t\t\t[o] = n.subarray(12, 13),\n\t\t\t\t\t\t\t\t[i] = n.subarray(13, 14),\n\t\t\t\t\t\t\t\t[c] = n.subarray(14, 15),\n\t\t\t\t\t\t\t\tl = n.subarray(15),\n\t\t\t\t\t\t\t\td = !!(1 & i),\n\t\t\t\t\t\t\t\tf = !!(2 & i),\n\t\t\t\t\t\t\t\tu = !!(4 & i),\n\t\t\t\t\t\t\t\tp = !!(8 & i);\n\t\t\t\t\t\t\tif (!s[a])\n\t\t\t\t\t\t\t\treturn void console.warn(\n\t\t\t\t\t\t\t\t\t`${t}: received message with unregistered type (${a})`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t(m[e] ||= {}), (m[e][a] ||= {});\n\t\t\t\t\t\t\tconst y = (m[e][a][o] ||= { chunks: [] });\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(f ? (y.meta = k(g(l))) : y.chunks.push(l),\n\t\t\t\t\t\t\t\ts[a].onProgress(c / _, e, y.meta),\n\t\t\t\t\t\t\t\t!d)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tconst w = new Uint8Array(\n\t\t\t\t\t\t\t\ty.chunks.reduce((e, r) => e + r.byteLength, 0),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(y.chunks.reduce((e, r) => (w.set(r, e), e + r.byteLength), 0),\n\t\t\t\t\t\t\t\tdelete m[e][a][o],\n\t\t\t\t\t\t\t\tu)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\ts[a].onComplete(w, e, y.meta);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tconst r = g(w);\n\t\t\t\t\t\t\t\ts[a].onComplete(p ? k(r) : r, e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tI = async () => {\n\t\t\t\t\t\t\tawait N(\"\"),\n\t\t\t\t\t\t\t\tawait new Promise((e) => setTimeout(e, 99)),\n\t\t\t\t\t\t\t\tl(o).forEach(([e, r]) => {\n\t\t\t\t\t\t\t\t\tr.destroy(), delete o[e];\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\ta();\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[$, E] = D(j(\"ping\")),\n\t\t\t\t\t\t[H, J] = D(j(\"pong\")),\n\t\t\t\t\t\t[M, R] = D(j(\"signal\")),\n\t\t\t\t\t\t[x, q] = D(j(\"stream\")),\n\t\t\t\t\t\t[B, G] = D(j(\"track\")),\n\t\t\t\t\t\t[N, z] = D(j(\"leave\"));\n\t\t\t\t\treturn (\n\t\t\t\t\t\te((e, r) => {\n\t\t\t\t\t\t\to[r] ||\n\t\t\t\t\t\t\t\t((o[r] = e),\n\t\t\t\t\t\t\t\te.setHandlers({\n\t\t\t\t\t\t\t\t\tdata: (e) => L(r, e),\n\t\t\t\t\t\t\t\t\tstream(e) {\n\t\t\t\t\t\t\t\t\t\tT.onPeerStream(e, r, v[r]), delete v[r];\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttrack(e, t) {\n\t\t\t\t\t\t\t\t\t\tT.onPeerTrack(e, t, r, P[r]), delete P[r];\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tsignal: (e) => M(e, r),\n\t\t\t\t\t\t\t\t\tclose: () => S(r),\n\t\t\t\t\t\t\t\t\terror(e) {\n\t\t\t\t\t\t\t\t\t\tconsole.error(e), S(r);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tT.onPeerJoin(r),\n\t\t\t\t\t\t\t\te.drainEarlyData?.((e) => L(r, e)));\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tE((e, r) => H(\"\", r)),\n\t\t\t\t\t\tJ((e, r) => {\n\t\t\t\t\t\t\th[r]?.(), delete h[r];\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tR((e, r) => o[r]?.signal(e)),\n\t\t\t\t\t\tq((e, r) => (v[r] = e)),\n\t\t\t\t\t\tG((e, r) => (P[r] = e)),\n\t\t\t\t\t\tz((e, r) => S(r)),\n\t\t\t\t\t\tc && addEventListener(\"beforeunload\", I),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmakeAction: D,\n\t\t\t\t\t\t\tleave: I,\n\t\t\t\t\t\t\tasync ping(e) {\n\t\t\t\t\t\t\t\tif (!e) throw p(\"ping() must be called with target peer ID\");\n\t\t\t\t\t\t\t\tconst r = Date.now();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t$(\"\", e), await new Promise((r) => (h[e] = r)), Date.now() - r\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgetPeers: () => d(l(o).map(([e, r]) => [e, r.connection])),\n\t\t\t\t\t\t\taddStream: (e, r, t) =>\n\t\t\t\t\t\t\t\tA(r, async (r, n) => {\n\t\t\t\t\t\t\t\t\tt && (await x(t, r)), n.addStream(e);\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tremoveStream: (e, r) => A(r, (r, t) => t.removeStream(e)),\n\t\t\t\t\t\t\taddTrack: (e, r, t, n) =>\n\t\t\t\t\t\t\t\tA(t, async (t, a) => {\n\t\t\t\t\t\t\t\t\tn && (await B(n, t)), a.addTrack(e, r);\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tremoveTrack: (e, r) => A(r, (r, t) => t.removeTrack(e)),\n\t\t\t\t\t\t\treplaceTrack: (e, r, t, n) =>\n\t\t\t\t\t\t\t\tA(t, async (t, a) => {\n\t\t\t\t\t\t\t\t\tn && (await B(n, t)), a.replaceTrack(e, r);\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tonPeerJoin: (e) => (T.onPeerJoin = e),\n\t\t\t\t\t\t\tonPeerLeave: (e) => (T.onPeerLeave = e),\n\t\t\t\t\t\t\tonPeerStream: (e) => (T.onPeerStream = e),\n\t\t\t\t\t\t\tonPeerTrack: (e) => (T.onPeerTrack = e),\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t})(\n\t\t\t\t\t(e) => (re = e),\n\t\t\t\t\t(e) => delete M[e],\n\t\t\t\t\t() => {\n\t\t\t\t\t\tdelete o[H][I],\n\t\t\t\t\t\t\tZ.forEach(clearTimeout),\n\t\t\t\t\t\t\tee.forEach(async (e) => (await e)()),\n\t\t\t\t\t\t\tclearInterval(v);\n\t\t\t\t\t},\n\t\t\t\t))\n\t\t\t);\n\t\t};\n\t})({\n\t\tinit(e) {\n\t\t\treturn ((e, r, t) =>\n\t\t\t\t(e.relayUrls || r).slice(\n\t\t\t\t\t0,\n\t\t\t\t\te.relayUrls ? e.relayUrls.length : e.relayRedundancy || t,\n\t\t\t\t))(e, Q, 3).map((e) => {\n\t\t\t\tconst r = ((e, r) => {\n\t\t\t\t\t\tconst t = {},\n\t\t\t\t\t\t\tn = () => {\n\t\t\t\t\t\t\t\tconst a = new WebSocket(e);\n\t\t\t\t\t\t\t\t(a.onclose = () => {\n\t\t\t\t\t\t\t\t\t(v[e] ??= 3333), setTimeout(n, v[e]), (v[e] *= 2);\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t(a.onmessage = (e) => r(e.data)),\n\t\t\t\t\t\t\t\t\t(t.socket = a),\n\t\t\t\t\t\t\t\t\t(t.url = a.url),\n\t\t\t\t\t\t\t\t\t(t.ready = new Promise(\n\t\t\t\t\t\t\t\t\t\t(r) =>\n\t\t\t\t\t\t\t\t\t\t\t(a.onopen = () => {\n\t\t\t\t\t\t\t\t\t\t\t\tr(t), (v[e] = 3333);\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t)),\n\t\t\t\t\t\t\t\t\t(t.send = (e) => {\n\t\t\t\t\t\t\t\t\t\t1 === a.readyState && a.send(e);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\treturn n(), t;\n\t\t\t\t\t})(e, (e) => {\n\t\t\t\t\t\tconst r = k(e),\n\t\t\t\t\t\t\tn = r[\"failure reason\"],\n\t\t\t\t\t\t\ta = r[\"warning message\"],\n\t\t\t\t\t\t\t{ interval: o } = r,\n\t\t\t\t\t\t\ts = M[r.info_hash];\n\t\t\t\t\t\tif (n) K(t, n, !0);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif ((a && K(t, a), o && 1e3 * o > q[t] && x[t][s])) {\n\t\t\t\t\t\t\t\tconst e = Math.min(1e3 * o, 120333);\n\t\t\t\t\t\t\t\tclearInterval(R[t][s]),\n\t\t\t\t\t\t\t\t\t(q[t] = e),\n\t\t\t\t\t\t\t\t\t(R[t][s] = setInterval(x[t][s], e));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tB[r.offer_id] ||\n\t\t\t\t\t\t\t\t((r.offer || r.answer) && ((B[r.offer_id] = !0), G[t][s]?.(r)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t\t{ url: t } = r;\n\t\t\t\treturn (H[t] = r), (G[t] = {}), r.ready;\n\t\t\t});\n\t\t},\n\t\tsubscribe(e, r, t, n, a) {\n\t\t\tconst { url: s } = e,\n\t\t\t\ti = async () => {\n\t\t\t\t\tconst t = d((await a(10)).map((e) => [o(20), e]));\n\t\t\t\t\t(G[e.url][r] = (a) => {\n\t\t\t\t\t\tif (a.offer)\n\t\t\t\t\t\t\tn(r, { offer: a.offer, peerId: a.peer_id }, (t, n) =>\n\t\t\t\t\t\t\t\tz(e, r, {\n\t\t\t\t\t\t\t\t\tanswer: k(n).answer,\n\t\t\t\t\t\t\t\t\toffer_id: a.offer_id,\n\t\t\t\t\t\t\t\t\tto_peer_id: a.peer_id,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse if (a.answer) {\n\t\t\t\t\t\t\tconst e = t[a.offer_id];\n\t\t\t\t\t\t\te && n(r, { answer: a.answer, peerId: a.peer_id, peer: e.peer });\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t\t\tz(e, r, {\n\t\t\t\t\t\t\tnumwant: 10,\n\t\t\t\t\t\t\toffers: l(t).map(([e, { offer: r }]) => ({\n\t\t\t\t\t\t\t\toffer_id: e,\n\t\t\t\t\t\t\t\toffer: r,\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t});\n\t\t\t\t};\n\t\t\treturn (\n\t\t\t\t(q[s] = 33333),\n\t\t\t\t(x[s] ||= {}),\n\t\t\t\t(x[s][r] = i),\n\t\t\t\t(R[s] ||= {}),\n\t\t\t\t(R[s][r] = setInterval(i, q[s])),\n\t\t\t\ti(),\n\t\t\t\t() => {\n\t\t\t\t\tclearInterval(R[s][r]), delete G[s][r], delete x[s][r];\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\t\tannounce(e) {\n\t\t\treturn q[e.url];\n\t\t},\n\t}),\n\tW = ((F = H), () => d(l(F).map(([e, r]) => [e, r.socket])));\nvar F;\nconst Q = [\n\t\"tracker.webtorrent.dev\",\n\t\"tracker.openwebtorrent.com\",\n\t\"tracker.btorrent.xyz\",\n\t\"tracker.files.fm:7073/announce\",\n].map((e) => \"wss://\" + e);\nconst trystero = {\n\tdefaultRelayUrls: Q,\n\tgetRelaySockets: W,\n\tjoinRoom: V,\n\tselfId: s,\n};\n\nexport default trystero;\n",
    "metaType": "application/javascript"
  },
  "/modules/apps/bundler/button.js": {
    "content": "import Bundler from \"/modules/apps/bundler/frontend.js\";\nimport Controller from \"/modules/mvc/controller/frontend.js\";\nimport html from \"/modules/mvc/view/html/index.js\";\n\nexport default {\n\ttag: \"bundler-button\",\n\n\textends: \"uix-modal\",\n\tcta: html`<uix-button icon=\"file-box\"></uix-button>`,\n\tasync bundleAppSPA() {\n\t\tawait Bundler.bundleSPA();\n\t},\n\n\tasync bundleAppSSR() {\n\t\tawait Controller.backend(\"BUNDLE_APP_SSR\");\n\t},\n\tcontentFn() {\n\t\treturn html`<uix-list gap=\"md\">\n        <uix-button .click=${this.bundleAppSPA.bind(this)} label=\"Bundle SPA\"></uix-button>\n        <uix-button .click=${this.bundleAppSSR.bind(this)} label=\"Bundle SSR\"></uix-button>\n        <uix-button href=\"/admin\" label=\"Admin\"></uix-button>\n      </uix-list>`;\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/overlay/overlay.js": {
    "content": "import T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-overlay\",\n\n\tproperties: {\n\t\tx: T.string({\n\t\t\tdefaultValue: \"right\",\n\t\t}),\n\t\ty: T.string({\n\t\t\tdefaultValue: \"bottom\",\n\t\t}),\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/uix/display/circle.js": {
    "content": "import { css } from \"/modules/mvc/view/html/index.js\";\nimport T from \"/modules/types/index.js\";\n\nexport default {\n\ttag: \"uix-circle\",\n\n\tcss: css`\n    &:not([solid]) {\n      background-color: transparent;\n    }\n  `,\n\tclass:\n\t\t\"inline-block align-middle box-border w-4 h-4 rounded-full border-1 border-solid border-gray-900\",\n\tproperties: {\n\t\tsolid: T.boolean({\n\t\t\tdefaultValue: false,\n\t\t}),\n\t},\n};\n",
    "metaType": "application/javascript"
  },
  "/modules/icon-lucide/lucide/sun.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><g fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><circle cx=\"12\" cy=\"12\" r=\"4\"/><path d=\"M12 2v2m0 16v2M4.93 4.93l1.41 1.41m11.32 11.32l1.41 1.41M2 12h2m16 0h2M6.34 17.66l-1.41 1.41M19.07 4.93l-1.41 1.41\"/></g></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/icon-lucide/lucide/wifi.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 20h.01M2 8.82a15 15 0 0 1 20 0M5 12.859a10 10 0 0 1 14 0m-10.5 3.57a5 5 0 0 1 7 0\"/></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/icon-lucide/lucide/file-box.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><g fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><path d=\"M14.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4\"/><path d=\"M14 2v4a2 2 0 0 0 2 2h4M3 13.1a2 2 0 0 0-1 1.76v3.24a2 2 0 0 0 .97 1.78L6 21.7a2 2 0 0 0 2.03.01L11 19.9a2 2 0 0 0 1-1.76V14.9a2 2 0 0 0-.97-1.78L8 11.3a2 2 0 0 0-2.03-.01ZM7 17v5\"/><path d=\"M11.7 14.2L7 17l-4.7-2.8\"/></g></svg>",
    "metaType": "image/svg+xml"
  },
  "/modules/icon-lucide/lucide/moon.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3a6 6 0 0 0 9 9a9 9 0 1 1-9-9\"/></svg>",
    "metaType": "image/svg+xml"
  },
  "/style.css": {
    "content": "/* layer: preflights */\n*,::before,::after{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}::backdrop{--un-rotate:0;--un-rotate-x:0;--un-rotate-y:0;--un-rotate-z:0;--un-scale-x:1;--un-scale-y:1;--un-scale-z:1;--un-skew-x:0;--un-skew-y:0;--un-translate-x:0;--un-translate-y:0;--un-translate-z:0;--un-pan-x: ;--un-pan-y: ;--un-pinch-zoom: ;--un-scroll-snap-strictness:proximity;--un-ordinal: ;--un-slashed-zero: ;--un-numeric-figure: ;--un-numeric-spacing: ;--un-numeric-fraction: ;--un-border-spacing-x:0;--un-border-spacing-y:0;--un-ring-offset-shadow:0 0 rgb(0 0 0 / 0);--un-ring-shadow:0 0 rgb(0 0 0 / 0);--un-shadow-inset: ;--un-shadow:0 0 rgb(0 0 0 / 0);--un-ring-inset: ;--un-ring-offset-width:0px;--un-ring-offset-color:#fff;--un-ring-width:0px;--un-ring-color:rgb(147 197 253 / 0.5);--un-blur: ;--un-brightness: ;--un-contrast: ;--un-drop-shadow: ;--un-grayscale: ;--un-hue-rotate: ;--un-invert: ;--un-saturate: ;--un-sepia: ;--un-backdrop-blur: ;--un-backdrop-brightness: ;--un-backdrop-contrast: ;--un-backdrop-grayscale: ;--un-backdrop-hue-rotate: ;--un-backdrop-invert: ;--un-backdrop-opacity: ;--un-backdrop-saturate: ;--un-backdrop-sepia: ;}\n/* layer: default */\n.fixed{position:fixed;}\n.bottom-\\[30px\\]{bottom:30px;}\n.right-\\[30px\\]{right:30px;}\n.grid{display:grid;}\n.grid-cols-7{grid-template-columns:repeat(7,minmax(0,1fr));}\n.m15{margin:3.75rem;}\n.m9{margin:2.25rem;}\n.mx-auto{margin-left:auto;margin-right:auto;}\n.my-2{margin-top:0.5rem;margin-bottom:0.5rem;}\n.mt-4{margin-top:1rem;}\n.box-border{box-sizing:border-box;}\n.inline-block{display:inline-block;}\n.h-4{height:1rem;}\n.max-w-6xl{max-width:72rem;}\n.w-\\[640px\\]{width:640px;}\n.w-4{width:1rem;}\n.w-full{width:100%;}\n.flex{display:flex;}\n.flex-grow{flex-grow:1;}\n.flex-col{flex-direction:column;}\n.cursor-pointer{cursor:pointer;}\n.cursor-not-allowed{cursor:not-allowed;}\n.disabled\\:cursor-not-allowed:disabled{cursor:not-allowed;}\n.items-center{align-items:center;}\n.justify-between{justify-content:space-between;}\n.justify-evenly{justify-content:space-evenly;}\n.gap-\\[10px\\]{gap:10px;}\n.gap-16{gap:4rem;}\n.gap-2{gap:0.5rem;}\n.gap-4{gap:1rem;}\n.gap-8{gap:2rem;}\n.border,\n.border-1{border-width:1px;}\n.border-gray-200{--un-border-opacity:1;border-color:rgb(229 231 235 / var(--un-border-opacity));}\n.border-gray-900{--un-border-opacity:1;border-color:rgb(17 24 39 / var(--un-border-opacity));}\n.dark .dark\\:border-gray-600{--un-border-opacity:1;border-color:rgb(75 85 99 / var(--un-border-opacity));}\n.dark .dark\\:border-gray-700{--un-border-opacity:1;border-color:rgb(55 65 81 / var(--un-border-opacity));}\n.rounded{border-radius:0.25rem;}\n.rounded-full{border-radius:9999px;}\n.rounded-lg{border-radius:0.5rem;}\n.rounded-md{border-radius:0.375rem;}\n.border-solid{border-style:solid;}\n.bg-blue-100{--un-bg-opacity:1;background-color:rgb(219 234 254 / var(--un-bg-opacity));}\n.bg-blue-600{--un-bg-opacity:1;background-color:rgb(37 99 235 / var(--un-bg-opacity));}\n.bg-gray-100{--un-bg-opacity:1;background-color:rgb(243 244 246 / var(--un-bg-opacity));}\n.bg-gray-200{--un-bg-opacity:1;background-color:rgb(229 231 235 / var(--un-bg-opacity));}\n.bg-green{--un-bg-opacity:1;background-color:rgb(74 222 128 / var(--un-bg-opacity));}\n.bg-green-600{--un-bg-opacity:1;background-color:rgb(22 163 74 / var(--un-bg-opacity));}\n.bg-white{--un-bg-opacity:1;background-color:rgb(255 255 255 / var(--un-bg-opacity));}\n.dark .dark\\:bg-gray-700{--un-bg-opacity:1;background-color:rgb(55 65 81 / var(--un-bg-opacity));}\n.dark .dark\\:bg-gray-800{--un-bg-opacity:1;background-color:rgb(31 41 55 / var(--un-bg-opacity));}\n.dark .dark\\:hover\\:bg-gray-600:hover{--un-bg-opacity:1;background-color:rgb(75 85 99 / var(--un-bg-opacity));}\n.dark .dark\\:hover\\:bg-gray-700:hover{--un-bg-opacity:1;background-color:rgb(55 65 81 / var(--un-bg-opacity));}\n.hover\\:bg-blue-700:hover{--un-bg-opacity:1;background-color:rgb(29 78 216 / var(--un-bg-opacity));}\n.hover\\:bg-gray-100:hover{--un-bg-opacity:1;background-color:rgb(243 244 246 / var(--un-bg-opacity));}\n.hover\\:bg-gray-300:hover{--un-bg-opacity:1;background-color:rgb(209 213 219 / var(--un-bg-opacity));}\n.p-2{padding:0.5rem;}\n.p-3{padding:0.75rem;}\n.p-4{padding:1rem;}\n.p-6{padding:1.5rem;}\n.p-8{padding:2rem;}\n.px-2{padding-left:0.5rem;padding-right:0.5rem;}\n.px-4{padding-left:1rem;padding-right:1rem;}\n.py-1{padding-top:0.25rem;padding-bottom:0.25rem;}\n.py-2{padding-top:0.5rem;padding-bottom:0.5rem;}\n.text-center{text-align:center;}\n.align-middle{vertical-align:middle;}\n.text-2xl{font-size:1.5rem;line-height:2rem;}\n.text-3xl{font-size:1.875rem;line-height:2.25rem;}\n.text-4xl{font-size:2.25rem;line-height:2.5rem;}\n.text-6xl{font-size:3.75rem;line-height:1;}\n.text-lg{font-size:1.125rem;line-height:1.75rem;}\n.text-sm{font-size:0.875rem;line-height:1.25rem;}\n.text-xl{font-size:1.25rem;line-height:1.75rem;}\n.dark .dark\\:text-white,\n.text-white{--un-text-opacity:1;color:rgb(255 255 255 / var(--un-text-opacity));}\n.text-black{--un-text-opacity:1;color:rgb(0 0 0 / var(--un-text-opacity));}\n.text-blue-600{--un-text-opacity:1;color:rgb(37 99 235 / var(--un-text-opacity));}\n.text-gray-500{--un-text-opacity:1;color:rgb(107 114 128 / var(--un-text-opacity));}\n.text-green-600{--un-text-opacity:1;color:rgb(22 163 74 / var(--un-text-opacity));}\n.text-red-500{--un-text-opacity:1;color:rgb(239 68 68 / var(--un-text-opacity));}\n.hover\\:text-red-700:hover{--un-text-opacity:1;color:rgb(185 28 28 / var(--un-text-opacity));}\n.font-bold{font-weight:700;}\n.font-semibold{font-weight:600;}\n.font-mono{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;}\n.uppercase{text-transform:uppercase;}\n.disabled\\:opacity-50:disabled{opacity:0.5;}\n.shadow-md{--un-shadow:var(--un-shadow-inset) 0 4px 6px -1px var(--un-shadow-color, rgb(0 0 0 / 0.1)),var(--un-shadow-inset) 0 2px 4px -2px var(--un-shadow-color, rgb(0 0 0 / 0.1));box-shadow:var(--un-ring-offset-shadow), var(--un-ring-shadow), var(--un-shadow);}\n.uix-card { & {\n\t\t--uix-card-width: auto;\n\t\t--uix-card-padding: var(--uix-container-padding, 0);\n\t\t--uix-card-border-size: var(--uix-container-border-size, 0px);\n\t\t--uix-card-border-radius: var(--radius-md);\n\t\t--uix-card-background-color: var(--color-default-1, #f0f0f0);\n\t\t--uix-card-border-color: var(--uix-container-border-color, var(--color-default, #cccccc));\n\t\t--uix-card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n\t\t--uix-card-min-height: var(--uix-container-min-height, 50px);\n\t\t--uix-card-gap: var(--uix-container-gap, 0);\n\t\t--uix-card-height: auto;\n\t\t--uix-card-justify: var(--uix-container-justify, flex-start);\n\t\t--uix-card-align-items: var(--uix-container-align-items, stretch);\n\t\t--uix-card-overflow: var(--uix-container-overflow, visible);\n\t\t--uix-card-position: var(--uix-container-position, static);\n\t\t--uix-card-list-style-type: var(--uix-container-list-style-type, none);\n\t\t--uix-card-text-color: var(--uix-container-text-color, var(--uix-text-color));\n\t\n\t\tborder-width: var(--uix-card-border-size);\n\t\tborder-radius: var(--uix-card-border-radius);\n\t\tbackground-color: var(--uix-card-background-color);\n\t\tborder-color: var(--uix-card-border-color); \n\t\tbox-shadow: var(--uix-card-shadow);\n\t\tlist-style-type: var(--uix-card-list-style-type);\n\t\tcolor: var(--uix-card-text-color);\t\n\t\t&[clickable], &[clickable] * {\n\t\t\tcursor: pointer;\n\t\t}\n\t\n\t\t> :last-child.uix-join {\n\t\t\tmargin-left: calc(-1 * var(--uix-card-padding));\n\t\t\tmargin-right: calc(-1 * var(--uix-card-padding));\n\t\t\tmargin-bottom: calc(-1 * var(--uix-card-padding));\n\t\t\tpadding-bottom: 0;\n\t\n\t\t\tborder-radius: var(--uix-card-border-radius) !important;  \n\t\t\t.uix-button {\n\t\t\t\tborder-radius: 0 !important;\n\t\t\t\tborder-top-right-radius: 0 !important;      \n\t\t\t\t&:last-child {\n\t\t\t\t\tborder-bottom-right-radius: var(--uix-card-border-radius) !important;\n\t\t\t\t}\n\t\t\t\t&:first-child {\n\t\t\t\t\tborder-right-width: 0;\n\t\t\t\t\tborder-bottom-left-radius: var(--uix-card-border-radius) !important;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t&[horizontal] > :last-child.uix-join {\n\t\t\tmargin-top: calc(-1 * var(--uix-card-padding));\n\t\t\tmargin-bottom: calc(-1 * var(--uix-card-padding));\n\t\t\tmargin-right: 0;\n\t\t\tpadding-right: 0;\n\t\t}\n\t} }.uix-icon { & {\n\t\tdisplay: inline-block;\n\t\tvertical-align: middle;\t\n\t}\n\t\n\t&[solid] {\n\t\tstroke: currentColor;\n\t\tfill: currentColor;\n\t} }.uix-join { & {\n\t\t--uix-list-button-radius: var(--uix-item-border-radius, 5px);\n\t\t--uix-list-button-border-width: 1px;\n\t\t--uix-list-button-margin: 0;\n\t\tlist-style-type: var(--uix-list-container-list-style-type);\n\t\twidth: auto;\n\t\t&.uix-join {\n\t\t\tflex-direction: row;\n\t\t\t&[vertical] {\n\t\t\t\tflex-direction: column;\n\t\t\t}\n\t\t\t&[reverse][vertical] {\n\t\t\t\tflex-direction: column-reverse;\n\t\t\t}\n\t\t\t&[reverse]:not([vertical]) {\n\t\t\t\tflex-direction: row-reverse;\n\t\t\t}\n\t\t}\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\t& > * {\n\t\t\twidth: 100%;\n\t\t\tmargin: var(--uix-list-button-margin);\n\t\t\t&:first-child {\n\t\t\t\tborder-top-left-radius: var(--uix-list-button-radius);\n\t\t\t\tborder-bottom-left-radius: var(--uix-list-button-radius);\n\t\t\t\tborder-bottom-right-radius: 0;\n\t\t\t\tborder-top-right-radius: 0;\n\t\t\t}\n\t\t\t&:last-child {\n\t\t\t\tborder-top-right-radius: var(--uix-list-button-radius);\n\t\t\t\tborder-bottom-right-radius: var(--uix-list-button-radius);\n\t\t\t\tborder-top-left-radius: 0;\n\t\t\t\tborder-bottom-left-radius: 0;\n\t\t\t\tborder-left-width: 0;\n\t\t\t}\n\t\t}\n\t\t& > [bordered], & > [outline] {\n\t\t\t&:last-child {\n\t\t\t\tborder-width: var(--uix-list-button-border-width); \n\t\t\t}\n\t\t\t&:hover:active {\n\t\t\t\tborder-width: var(--uix-list-button-border-width);\n\t\t\t}\n\t\t\t&:has(+ *:active) {\n\t\t\t\tborder-width: var(--uix-list-button-border-width);\n\t\t\t}\n\t\t}\n\t\t&[vertical] {    \n\t\t\t& > * {\n\t\t\t\tborder-radius: 0;\n\t\t\t\tmargin: var(--uix-list-button-margin);\n\t\t\t\t&:first-child {\n\t\t\t\t\tborder-top-left-radius: var(--uix-list-button-radius);\n\t\t\t\t\tborder-top-right-radius: var(--uix-list-button-radius);\n\t\t\t\t}\n\t\t\t\t&:last-child {\n\t\t\t\t\tborder-bottom-left-radius: var(--uix-list-button-radius);\n\t\t\t\t\tborder-bottom-right-radius: var(--uix-list-button-radius);\n\t\t\t\t}\n\t\t\t}\n\t\t\t& > .uix-button[bordered], & > .uix-button[outline] {\n\t\t\t\tborder-width: var(--uix-list-button-border-width);\n\t\t\t\t&:last-child {\n\t\t\t\t\tborder-width: var(--uix-list-button-border-width); \n\t\t\t\t}\n\t\t\t\t&:hover:active {\n\t\t\t\t\tborder-width: var(--uix-list-button-border-width);\n\t\t\t\t}\n\t\t\t\t&:has(+ .uix-button:active) {\n\t\t\t\t\tborder-width: var(--uix-list-button-border-width);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} }.uix-form { & {\n\t\tdisplay: flex;\n\t\tflex-direction: column; \n\t\tgap: 1rem; \n\t\tpadding-top: 1rem;\n\t} }.uix-input { & {\n\t\t--uix-input-background-color: var(--color-default-10);\n\t\t--uix-input-border-color: var(--color-default-70);\n\t\t--uix-input-text-color: var(--color-default-95); \n\t\t--uix-input-border-radius: 0.375rem; \n\t\t--uix-input-padding-x: 5px; \n\t\t--uix-input-padding-y: 5px; \n\t\t--uix-input-font-size: 1rem; \n\t\t--uix-input-focus-ring-width: 2px; \n\t\t--uix-input-focus-ring-offset-width: 2px;\n\t\t--uix-input-height:  2.5rem;\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\twidth: 100%; \n\t\theight: var(--uix-input-height); \n\t\tborder-radius: var(--uix-input-border-radius); \n\t\tborder: 2px solid var(--uix-input-border-color); \n\t\tfont-size: var(--uix-input-font-size); \n\t\tbackground-color: var(--uix-input-background-color);\n\t\tcolor: var(--uix-input-text-color);\n\t\t&:focus {\n\t\t\toutline: none;outline-style: none;\n\t\t\tbox-shadow: none;\n\t\t\tborder-color: transparent;\n\t\t}\n\t\t/* Default (text-based) inputs */\n\t\tinput[type=\"text\"],\n\t\tinput[type=\"password\"],\n\t\tinput[type=\"email\"],\n\t\tinput[type=\"number\"],\n\t\tinput[type=\"decimal\"],\n\t\tinput[type=\"search\"],\n\t\tinput[type=\"tel\"],\n\t\tinput[type=\"url\"] {\n\t\t\twidth: 100%;\n\t\t\toutline: none;\n\t\t\tcolor: var(--uix-input-text-color);\n\t\t\tbackground-color: transparent;\n\t\t\tpadding: var(--uix-input-padding-x) var(--uix-input-padding-y);\n\t\t\tborder: 0;\n\t\t\t&:focus + label, &:not(:placeholder-shown) + label {\n\t\t\t\ttransition: margin-top 0.3s ease, font-size 0.3s ease;\n\t\t\t\tmargin-top: -0.4rem;\n\t\t\t\tfont-size: 0.6rem;\n\t\t\t\tcursor: default;\n\t\t\t\t.uix-text {\n\t\t\t\t\t--uix-text-size: 0.8rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\t&::placeholder {\n\t\t\t\tcolor: transparent;\n\t\t\t}\n\t\t\t&:focus {\n\t\t\t\toutline: none;outline-style: none;\n\t\t\t\tbox-shadow: none;\n\t\t\t\tborder-color: transparent;\n\t\t\t\t&::placeholder {\n\t\t\t\t\tcolor: var(--uix-input-text-color);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlabel {\n\t\t\t.uix-text {\n\t\t\t\t--uix-text-font-weight: 600;\n\t\t\t}\n\t\t\tcursor: text;\n\t\t\tposition: absolute;\n\t\t\tmargin-top: 0.5rem; \n\t\t\tfont-family: monospace; \n\t\t\tletter-spacing: 0.05em; \n\t\t\ttext-transform: uppercase; \n\t\t\tfont-weight: 600;\n\t\t\tmargin-left: 0.75rem;\n\t\t\tpadding-right: 0.5rem; \n\t\t\tpadding-left: 0.25rem;\n\t\t\tbackground-color: var(--uix-input-background-color);\n\t\t\tcolor: var(--uix-input-text-color);\n\t\t\ttransition: margin-top 0.3s ease, font-size 0.3s ease;\n\t\t}\n\t\tlabel[required]::after {\n\t\t\tcontent: '*';\n\t\t\tcolor: var(--color-error-50); \n\t\t}\n\t\t&:not([type=checkbox]):not([radio]) input:focus-visible {\n\t\t\toutline: none; \n\t\t\tbox-shadow: 0 0 0 var(--uix-input-focus-ring-width) var(--uix-input-border-color);\n\t\t}\n\t\t&:not([type=checkbox]):not([radio]) input:disabled {\n\t\t\tcursor: not-allowed; \n\t\t\topacity: 0.6;\n\t\t}\n\t\t&[type=checkbox],\n\t\t&[radio] {\n\t\t\tborder: 0;\n\t\t\talign-items: center;\n\t\t\theight: auto;\n\t\t\twidth: auto;\n\t\t\tposition: relative;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t&[type=checkbox] label,\n\t\t&[radio] label {\n\t\t\tposition: static;\n\t\t\tmargin-top: 0;\n\t\t\tbackground-color: transparent;\n\t\t\tpadding: 0;\n\t\t\tcursor: pointer;\n\t\t\tmargin-left: 0.5rem;    \n\t\t\ttext-transform: none;\n\t\t\tfont-family: inherit;\n\t\t\tletter-spacing: normal;\n\t\t\tfont-weight: normal;\n\t\t\t.uix-text {\n\t\t\t\t--uix-text-font-weight: 400;\n\t\t\t}\n\t\t}\n\t\t&[type=checkbox] input,\n\t\t&[radio] input[type=\"radio\"] {\n\t\t\twidth: var(--uix-input-size);\n\t\t\theight: var(--uix-input-size);\n\t\t\tmargin: 0;\n\t\t\tborder: none;\n\t\t\tbackground: none;\n\t\t\tbox-shadow: none;\n\t\t\tpadding: 0;    \n\t\t}\n\t\t&[type=checkbox] input:disabled,\n\t\t&[radio] input[type=\"radio\"]:disabled {\n\t\t\tcursor: not-allowed;\n\t\t\topacity: 0.6;\n\t\t}\n\t\t&[type=checkbox], &[radio] {\n\t\t\tgap: 0.75rem;\n\t\t\tpadding: 0.5rem 0;\n\t\t\t--uix-checkbox-size: 1.5rem;\n\t\t\t--uix-checkbox-border-radius: 0.375rem;\n\t\t\t--uix-checkbox-checked-bg: var(--uix-input-border-color);\n\t\t\t--uix-checkbox-check-color: var(--uix-input-background-color);\n\t\t\tinput, input[type=\"radio\"] {\n\t\t\t\tappearance: none;\n\t\t\t\t-webkit-appearance: none;\n\t\t\t\twidth: var(--uix-checkbox-size);\n\t\t\t\theight: var(--uix-checkbox-size);\n\t\t\t\tmargin: 0;\n\t\t\t\tborder: 2px solid var(--uix-input-border-color);\n\t\t\t\tborder-radius: var(--uix-checkbox-border-radius);\n\t\t\t\tbackground-color: var(--uix-input-background-color);\n\t\t\t\tcursor: pointer;\n\t\t\t\tposition: relative;\n\t\t\t\ttransition: \n\t\t\t\t\tbackground-color 0.2s ease,\n\t\t\t\t\tborder-color 0.2s ease;\n\t\t\t\t&::after {\n\t\t\t\t\tcontent: \"\";\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tdisplay: none;\n\t\t\t\t\tleft: 50%;\n\t\t\t\t\ttop: 50%;\n\t\t\t\t\twidth: 0.375rem;\n\t\t\t\t\theight: 0.75rem;\n\t\t\t\t\tborder: solid var(--uix-checkbox-check-color);\n\t\t\t\t\tborder-width: 0 2px 2px 0;\n\t\t\t\t\ttransform: translate(-50%, -60%) rotate(45deg);\n\t\t\t\t}\n\t\t\t\t&:checked {\n\t\t\t\t\tbackground-color: var(--uix-checkbox-checked-bg);\n\t\t\t\t\tborder-color: var(--uix-checkbox-checked-bg);\n\t\t\t\t\t&::after {\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t&:focus-visible {\n\t\t\t\t\tbox-shadow: 0 0 0 var(--uix-input-focus-ring-width) var(--uix-input-border-color);\n\t\t\t\t}\n\t\t\t\t&:disabled {\n\t\t\t\t\topacity: 0.6;\n\t\t\t\t\tcursor: not-allowed;\n\t\t\t\t\t\n\t\t\t\t\t& + label {\n\t\t\t\t\t\tcursor: not-allowed;\n\t\t\t\t\t\topacity: 0.6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t&:hover:not(:has(input[type=\"checkbox\"]:disabled)) {\n\t\t\t\tinput[type=\"checkbox\"] {\n\t\t\t\t\tborder-color: var(--uix-input-border-color);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlabel {\n\t\t\t\tmargin-left: 0;\n\t\t\t\torder: 2;\n\t\t\t}\n\t\t}\n\t}\n\t }.uix-modal { & {\n\t\t--uix-modal-background-color: var(--color-default-1, #ffffff);\n\t\t--uix-modal-box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n\t\t--uix-modal-padding: var(--spacing-sm);\n\t\t--uix-modal-dialog-width: var(--sizes-xl);\n\t\t--uix-container-height: auto;\n\t\tborder: 0;   \n\t\tdialog {\n\t\t\t&[open] {\n\t\t\t\tdisplay: flex;\n\t\t\t}\t\t\t\n\t\t\tposition: absolute;\n\t\t\tmargin: auto;\t\t\t\n\t\t\tz-index: 1000; \n\t\t\toverflow-y: auto;\n\t\t\tbox-sizing: border-box; \n\t\t\ttransition: all 0.1s ease-in-out;      \n\t\t\tborder: 0;\n\t\t\tbackground-color: transparent;\n\t\t\t> .uix-card {\n\n\t\t\t}\n\t\t}  \n\t} }.uix-calendar { \n\tuix-calendar-day {\n\t\tmargin-inline: auto;\n\t}\n\t[calendarDay] {\n\t\t\t\tcursor: pointer; \n\t\t\t\ttext-align: center; \n\t\t\t\tpadding: 0.5rem; \n\t\t\t\tbackground-color: transparent;\n\t\t\t\t&[toggled] {\n\t\t\t\t\tbackground-color: var(--color-primary-50);\n\t\t\t\t\tcolor: white;\n\t\t\t\t}\n\t\t\t} }.uix-link { & {\n\t\t&[vertical] {\n\t\t\tmargin: 0 auto;\n\t\t}\n\t\t--uix-link-indent: 0;\n\t\tcursor: pointer;\n\t\ta, button {\n\t\t\tcursor: pointer;\n\t\t\tpadding: var(--uix-link-padding);\n\t\t\t&:hover {\n\t\t\t\tcolor: var(--uix-link-hover-color, var(--color-primary-70));    \n\t\t\t}\n\t\t}\n\t\tcolor: var(--uix-link-text-color, var(--color-primary-70));\n\t\tfont-weight: var(--uix-link-font-weight, 600);\n\t\twidth: var(--uix-link-width, auto);\t\t\n\t\t.uix-text-icon__element {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: var(--uix-link-icon-gap, 0.5rem);\n\t\t\twidth: auto;\n\t\t\t&[reverse][vertical] {\n\t\t\t\tflex-direction: column-reverse;\n\t\t\t}\n\t\n\t\t\t&:not([reverse])[vertical] {\n\t\t\t\tflex-direction: column;\n\t\t\t}\n\t\n\t\t\t&[reverse]:not([vertical]) {\n\t\t\t\tflex-direction: row-reverse;\n\t\t\t}\n\t\n\t\t\t&:not([reverse]):not([vertical]) {\n\t\t\t\tflex-direction: row;\n\t\t\t}\n\t\t}\n\t\ttransition: all 0.3s ease-in-out; \n\t}\n\t\n\t&[indent] {\n\t\t> a, > button {\n\t\t\tpadding-left: var(--uix-link-indent);\n\t\t}\n\t}\n\t\n\t&[active]:hover {\n\t\tcolor: var(--uix-link-hover-text-color, var(--color-primary-40));\n\t}\n\t\n\t&[selectable][selected] {\n\t\tbackground-color: var(--color-primary-40); \n\t}\n\t\n\t&:hover {\n\t\t[tooltip] {\n\t\t\tdisplay: flex;\n\t\t}\n\t}\n\t\n\t&[tooltip] {\n\t\tdisplay: inline-block;\n\t\t&:hover {\n\t\t\t[tooltip] {\n\t\t\t\tvisibility: visible;\n\t\t\t}\n\t\t}\n\t\t[tooltip] {\n\t\t\t\tvisibility: hidden;\n\t\t\t\twidth: 120px;\n\t\t\t\tbackground-color: black;\n\t\t\t\tcolor: #fff;\n\t\t\t\ttext-align: center;\n\t\t\t\tborder-radius: 6px;\n\t\t\t\tpadding: 5px 0;    \n\t\t\t\tposition: absolute;\n\t\t\t\tz-index: 1000000000;\n\t\t\t\ttop: 50%;\n\t\t\t\tleft: 100%;       \n\t\t\t\ttransform: translateY(-50%);\n\t\t}\n\t}\n\t\n\t&[position~=\"top\"] [tooltip] {\n\t\tbottom: 100%; \n\t\tleft: 50%;\n\t\ttransform: translateX(-50%); \n\t}\n\t\n\t&[position~=\"bottom\"] [tooltip] {\n\t\ttop: 100%; \n\t\tleft: 50%;\n\t\ttransform: translateX(-50%); \n\t}\n\t\n\t&[position~=\"left\"] [tooltip] {\n\t\ttop: 50%;\n\t\tright: 100%; \n\t\ttransform: translateY(-50%);\n\t}\n\t\n\t&[tooltip], &[dropdown], &[context], &[float] {\n\t\tposition: relative;\n\t}\n\t\n\t&[dropdown], &[accordion] {\n\t\tflex-direction: column;\n\t}\n\t\n\t[float], [dropdown], [accordion], [context] {\n\t\tdisplay: none;\n\t}\n\n\t&[floatopen] [float] {\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\tbottom: 50px;\n\t\tright: 30px;\n\t\twidth: 30px;\n\t}\n\t\n\t&[context] {\n\t\tz-index: auto;\n\t}\n\t\n\t[dropdown], [context][open] {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 100%; \n\t\twidth: 100%;\n\t\tmin-width: 200px;\n\t\tz-index: 1000;\n\t\tbackground-color: var(--color-primary-10); \n\t\tbox-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n\t\t.uix-link:hover, input {\n\t\t\tbackground-color: var(--color-primary-20); \n\t\t}\n\t\t& > .uix-link, input {\n\t\t\twidth: 100%;\n\t\t}\n\t}\n\t\n\t[context][open] {\n\t\tdisplay: flex;\n\t}\n\t\n\t&[selected] {\n\t\t[dropdown], [accordion] {\n\t\t\tdisplay: flex;\n\t\t}\n\t} }.uix-button { & {\n\t\t--uix-button-font-weight: 700; \n\t\t--uix-button-text-color: var(--color-default-80);\n\t\t--uix-button-background-color: var(--color-default-100);\n\t\t--uix-button-hover-background-color: var(--color-default-20);\n\t\t--uix-button-border-radius: var(--radius-sm);\n\t\t--uix-button-border-size:  0;\n\t\t--uix-button-border-color: var(--color-default-40);\n\t\t--uix-button-hover-opacity:  0.9;\n\t\t--uix-button-active-scale: 0.9;\n\t\t--uix-button-width: fit-content;\n\t\t--uix-button-height: fit-content;\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\talign-items: center;\n\t\tgap: 0.5rem; \n\t\tcursor: pointer;\n\t\ttransition: all 0.3s ease-in-out;\n\t\tfont-weight: var(--uix-button-font-weight);\n\t\tcolor: var(--uix-button-text-color);\n\t\tbackground-color: var(--uix-button-background-color);\n\t\twidth: var(--uix-button-width);\n\t\theight: var(--uix-button-height);\n\t\tborder: var(--uix-button-border-size) solid var(--uix-button-border-color);\n\t\tborder-radius: var(--uix-button-border-radius);\n\t \n\t\t> button, > a, > input {\n\t\t\tpadding: var(--uix-button-padding, var(--uix-link-padding));\n\t\t\tword-break: keep-all;\n\t\t\theight: 100%;\n\t\t\tline-height: var(--uix-button-height);\n\t\t\tborder-radius: var(--uix-button-border-radius);\n\t\t\tflex-basis: 100%;\n\t\t\tjustify-content: var(--uix-text-align);\n\t\t\t&:hover {\n\t\t\t\topacity: var(--uix-button-hover-opacity); \n\t\t\t\tbackground-color: var(--uix-button-hover-background-color);\n\t\t\t}\n\t\t\t\n\t\t\t&:hover:active {\n\t\t\t\topacity: var(--uix-button-hover-opacity);\n\t\t\t}  \n\t\t}\n\t\n\t\t.uix-icon, button, input, a {\n\t\t\tcursor: pointer;      \n\t\t}\n\t}\n\t }.uix-avatar { \n    & {\n      --uix-avatar-background-color: var(--color-default-30, #d1d5db);\n      --uix-avatar-text: var(--color-default, #000000);\n      --uix-avatar-ring: var(--color-default, #000000);\n      --uix-avatar-ring-width: 2px;\n      --uix-avatar-border-radius: 50%;\n      --uix-avatar-width: 3rem;\n      --uix-avatar-height: 3rem;\n      display: flex;\n      position: relative;\n      justify-content: center;\n      align-items: center;\n      overflow: hidden;\n      color: var(--uix-avatar-text);\n      font-size: calc(var(--uix-avatar-width) / 2.5);\n      font-weight: 500;\n      vertical-align: middle;\n\t\t\ttext-align: center; \n\t\t\tmin-width: var(--uix-avatar-width);\n\t\t\tpadding: 3px;\n    }\n\t\t> :not(uix-overlay) {\n      width: var(--uix-avatar-width);\n      height: var(--uix-avatar-height);\n      border-radius: var(--uix-avatar-border-radius);\n      background-color: var(--uix-avatar-background-color);\n\t\t}\n\n    &[ring] {\n      box-shadow: 0 0 0 var(--uix-avatar-ring-width) var(--uix-avatar-ring);\n    }\n    > img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n\n\n    > uix-overlay {\n      position: absolute;\n      z-index: 100;\n      --tx: 0;\n      --ty: 0;\n      transform: translate(var(--tx), var(--ty));\n\t\t\tcursor: pointer; \n\t\t\ttext-align: center; \n\t\t\tbackground: transparent;\n    }\n    > uix-overlay[y=\"top\"] { top: 0%; }\n    > uix-overlay[y=\"bottom\"] { bottom: 0%; }\n    > uix-overlay[y=\"center\"] { top: 50%; --ty: -50%; }\n    > uix-overlay[x=\"left\"] { left: -5%; }\n    > uix-overlay[x=\"right\"] { right: 0%; }\n    > uix-overlay[x=\"center\"] { left: 50%; --tx: -50%; }\n   }.uix-circle { \n    &:not([solid]) {\n      background-color: transparent;\n    }\n   }\n@font-face {\n      font-family: 'Manrope';\n      font-weight: 200;\n      src: url('/modules/font/manrope/extralight.woff2') format('woff2');\n    }\n@font-face {\n      font-family: 'Manrope';\n      font-weight: 300;\n      src: url('/modules/font/manrope/light.woff2') format('woff2');\n    }\n@font-face {\n      font-family: 'Manrope';\n      font-weight: 500;\n      src: url('/modules/font/manrope/medium.woff2') format('woff2');\n    }\n@font-face {\n      font-family: 'Manrope';\n      font-weight: 400;\n      src: url('/modules/font/manrope/regular.woff2') format('woff2');\n    }\n@font-face {\n      font-family: 'Manrope';\n      font-weight: 600;\n      src: url('/modules/font/manrope/semibold.woff2') format('woff2');\n    }\n@font-face {\n      font-family: 'Manrope';\n      font-weight: 700;\n      src: url('/modules/font/manrope/bold.woff2') format('woff2');\n    }\n@font-face {\n      font-family: 'Manrope';\n      font-weight: 800;\n      src: url('/modules/font/manrope/extrabold.woff2') format('woff2');\n    }\nbody {\n\tfont-family: var(--font-family);\n}\n\nhtml,\nbody {\n\tfont-family: var(--font-family);\n\tbackground-color: var(--background-color) !important;\n\tcolor: var(--text-color) !important;\n\twidth: 100%;\n\tmin-height: 100%;\n\theight: 100%;\n\tpadding: 0;\n\tmargin: 0;\n}\n\n:not(.production) {\n\t*:not(:defined) {\n\t\tborder: 1px solid red;\n\t}\n}\n\n.dark {\n\tfilter: invert(1) hue-rotate(180deg);\n}\n\n.dark img,\n.dark dialog,\n.dark video,\n.dark iframe {\n\tfilter: invert(1) hue-rotate(180deg);\n}\n\nhtml {\n\tfont-size: 14px;\n}\n\n@media (max-width: 768px) {\n\thtml {\n\t\tfont-size: 18px;\n\t}\n}\n\n@media (max-width: 480px) {\n\thtml {\n\t\tfont-size: 20px;\n\t}\n}\n\ntextarea {\n\tfont-family: inherit;\n\tfont-feature-settings: inherit;\n\tfont-variation-settings: inherit;\n\tfont-size: 100%;\n\tfont-weight: inherit;\n\tline-height: inherit;\n\tcolor: inherit;\n\tmargin: 0;\n\tpadding: 0;\n}\n\n:root {\n\tbox-sizing: border-box;\n\t-moz-text-size-adjust: none;\n\t-webkit-text-size-adjust: none;\n\ttext-size-adjust: none;\n\tline-height: 1.2;\n\t-webkit-font-smoothing: antialiased;\n}\n*,\n*::before,\n*::after {\n\tbox-sizing: border-box;\n}\n* {\n\tmargin: 0;\n}\nbody {\n\t-webkit-font-smoothing: antialiased;\n}\na {\n\tcolor: currentColor;\n\ttext-decoration: none;\n\tfont-family: var(--font-family);\n}\n\nbutton,\ntextarea,\nselect {\n\tbackground-color: inherit;\n\tborder-width: 0;\n\tcolor: inherit;\n}\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n\tdisplay: block;\n\tmax-width: 100%;\n}\ninput,\nbutton,\ntextarea,\nselect {\n\tfont: inherit;\n}\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n\tfont-family: var(--font-family);\n\toverflow-wrap: break-word;\n}\n\ndialog::backdrop {\n\tbackground-color: rgba(0, 0, 0, 0.8);\n}\n\n*::-webkit-scrollbar {\n\twidth: 8px;\n\tmargin-right: 10px;\n}\n\n*::-webkit-scrollbar-track {\n\tbackground: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n\t&:hover {\n\t\tscrollbar-color: rgba(154, 153, 150, 0.8) transparent;\n\t}\n\tborder-radius: 10px;\n\tborder: none;\n}\n\n*::-webkit-scrollbar-button {\n\tbackground: transparent;\n\tcolor: transparent;\n}\n\n* {\n\tscrollbar-width: thin;\n\tscrollbar-color: transparent transparent;\n\t&:hover {\n\t\tscrollbar-color: rgba(154, 153, 150, 0.8) transparent;\n\t}\n}\n\n[full] {\n\twidth: 100%;\n\theight: 100vh;\n}\n\n[w-full] {\n\twidth: 100%;\n}\n\n[grow] {\n\tflex-grow: 1;\n}\n\n[hide] {\n\tdisplay: none !important;\n}\n\n.hide {\n\tdisplay: none !important;\n}\n\n[noscroll] {\n\toverflow: hidden;\n}\n\ndiv [container] {\n\tdisplay: flex;\n}\n\ndiv [container][horizontal] {\n\tdisplay: flex;\n\tflex-direction: col;\n}\n",
    "metaType": "text/css"
  },
  "/data.json": {
    "content": "{}",
    "metaType": "application/json"
  }
};
self.addEventListener("install", (e) => e.waitUntil(self.skipWaiting()));
self.addEventListener("activate", (e) => e.waitUntil(self.clients.claim()));
self.addEventListener("fetch", (e) => {
  const url = new URL(e.request.url);
  const file = FILE_BUNDLE[url.pathname];
	  console.log({path: url.pathname, file});
  if (file) {
    e.respondWith(
      new Response(file.content, {
        headers: { 'Content-Type': file.metaType || 'application/javascript' }
      })
    );
  }
});