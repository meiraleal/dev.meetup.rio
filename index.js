const ensureSWController = () => {const timeoutPromise = new Promise((_, reject) => {setTimeout(() => reject(new Error("Service Worker timed out.")), 100);});const controllerPromise = new Promise((resolve) => {if (navigator.serviceWorker.controller) {return resolve();}navigator.serviceWorker.addEventListener("controllerchange", () => {return resolve();});});return Promise.race([controllerPromise, timeoutPromise]);};const startApp = async () => {if (!("serviceWorker" in navigator)) {console.warn("Service Worker not supported.");throw new Error("Platform not supported");}await navigator.serviceWorker.register("/sw.js", { scope: "/" });try {console.log("Waiting for Service Worker to take control...");await ensureSWController();console.log("âœ… Service Worker is in control!");await import("/bootstrap.js");await import("/app.js");} catch (error) {console.warn("Service Worker did not take control in time. Reloading...");window.location.reload();}};startApp();